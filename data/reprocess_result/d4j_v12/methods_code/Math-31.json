{"getA": "\n    protected abstract double getA(int n, double x);\n\n    /**\n     * Access the n-th b coefficient of the continued fraction.  Since b can be\n     * a function of the evaluation point, x, that is passed in as well.\n     * @param n the coefficient index to retrieve.\n     * @param x the evaluation point.\n     * @return the n-th b coefficient.\n     */\n    protected abstract double getB(int n, double x);\n\n    /**\n     * Evaluates the continued fraction at the value x.\n     * @param x the evaluation point.\n     * @return the value of the continued fraction evaluated at x.\n     * @throws ConvergenceException if the algorithm fails to converge.\n     */\n    public double evaluate(double x) {\n        return evaluate(x, DEFAULT_EPSILON, Integer.MAX_VALUE);\n    }", "getB": "\n    protected abstract double getB(int n, double x);\n\n    /**\n     * Evaluates the continued fraction at the value x.\n     * @param x the evaluation point.\n     * @return the value of the continued fraction evaluated at x.\n     * @throws ConvergenceException if the algorithm fails to converge.\n     */\n    public double evaluate(double x) {\n        return evaluate(x, DEFAULT_EPSILON, Integer.MAX_VALUE);\n    }", "evaluate": "\n    public double evaluate(double x) {\n        return evaluate(x, DEFAULT_EPSILON, Integer.MAX_VALUE);\n    }"}