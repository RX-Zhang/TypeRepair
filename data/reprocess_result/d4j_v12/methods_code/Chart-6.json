{"getShape": "\n    public Shape getShape(int index) {\n        return (Shape) get(index);\n    }", "setShape": "\n    public void setShape(int index, Shape shape) {\n        set(index, shape);\n    }", "clone": "\n    public Object clone() throws CloneNotSupportedException {\n        return super.clone();\n    }", "equals": "\n    public boolean equals(Object obj) {\n\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof ShapeList)) {\n            return false;\n        }\n        return super.equals(obj);\n\n    }", "hashCode": "\n    public int hashCode() {\n        return super.hashCode();\n    }", "writeObject": "\n    private void writeObject(ObjectOutputStream stream) throws IOException {\n\n        stream.defaultWriteObject();\n        int count = size();\n        stream.writeInt(count);\n        for (int i = 0; i < count; i++) {\n            Shape shape = getShape(i);\n            if (shape != null) {\n                stream.writeInt(i);\n                SerialUtilities.writeShape(shape, stream);\n            }\n            else {\n                stream.writeInt(-1);\n            }\n        }\n\n    }", "readObject": "\n    private void readObject(ObjectInputStream stream) throws IOException,\n            ClassNotFoundException {\n\n        stream.defaultReadObject();\n        int count = stream.readInt();\n        for (int i = 0; i < count; i++) {\n            int index = stream.readInt();\n            if (index != -1) {\n                setShape(index, SerialUtilities.readShape(stream));\n            }\n        }\n\n    }"}