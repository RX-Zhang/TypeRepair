{"checkPeriodType": "\n    protected PeriodType checkPeriodType(PeriodType type) {\n        return DateTimeUtils.getPeriodType(type);\n    }", "getPeriodType": "\n    public PeriodType getPeriodType() {\n        return iType;\n    }", "size": "\n    public int size() {\n        return iType.size();\n    }", "getFieldType": "\n    public DurationFieldType getFieldType(int index) {\n        return iType.getFieldType(index);\n    }", "getValue": "\n    public int getValue(int index) {\n        return iValues[index];\n    }", "toDurationFrom": "\n    public Duration toDurationFrom(ReadableInstant startInstant) {\n        long startMillis = DateTimeUtils.getInstantMillis(startInstant);\n        Chronology chrono = DateTimeUtils.getInstantChronology(startInstant);\n        long endMillis = chrono.add(this, startMillis, 1);\n        return new Duration(startMillis, endMillis);\n    }", "toDurationTo": "\n    public Duration toDurationTo(ReadableInstant endInstant) {\n        long endMillis = DateTimeUtils.getInstantMillis(endInstant);\n        Chronology chrono = DateTimeUtils.getInstantChronology(endInstant);\n        long startMillis = chrono.add(this, endMillis, -1);\n        return new Duration(startMillis, endMillis);\n    }", "checkAndUpdate": "\n    private void checkAndUpdate(DurationFieldType type, int[] values, int newValue) {\n        int index = indexOf(type);\n        if (index == -1) {\n            if (newValue != 0) {\n                throw new IllegalArgumentException(\n                    \"Period does not support field '\" + type.getName() + \"'\");\n            }\n        } else {\n            values[index] = newValue;\n        }\n    }", "setPeriod": "\n    protected void setPeriod(ReadablePeriod period) {\n        if (period == null) {\n            setValues(new int[size()]);\n        } else {\n            setPeriodInternal(period);\n        }\n    }", "setPeriodInternal": "\n    private void setPeriodInternal(ReadablePeriod period) {\n        int[] newValues = new int[size()];\n        for (int i = 0, isize = period.size(); i < isize; i++) {\n            DurationFieldType type = period.getFieldType(i);\n            int value = period.getValue(i);\n            checkAndUpdate(type, newValues, value);\n        }\n        iValues = newValues;\n    }", "setField": "\n    protected void setField(DurationFieldType field, int value) {\n        setFieldInto(iValues, field, value);\n    }", "setFieldInto": "\n    protected void setFieldInto(int[] values, DurationFieldType field, int value) {\n        int index = indexOf(field);\n        if (index == -1) {\n            if (value != 0 || field == null) {\n                throw new IllegalArgumentException(\n                    \"Period does not support field '\" + field + \"'\");\n            }\n        } else {\n            values[index] = value;\n        }\n    }", "addField": "\n    protected void addField(DurationFieldType field, int value) {\n        addFieldInto(iValues, field, value);\n    }", "addFieldInto": "\n    protected void addFieldInto(int[] values, DurationFieldType field, int value) {\n        int index = indexOf(field);\n        if (index == -1) {\n            if (value != 0 || field == null) {\n                throw new IllegalArgumentException(\n                    \"Period does not support field '\" + field + \"'\");\n            }\n        } else {\n            values[index] = FieldUtils.safeAdd(values[index], value);\n        }\n    }", "mergePeriod": "\n    protected void mergePeriod(ReadablePeriod period) {\n        if (period != null) {\n            iValues = mergePeriodInto(getValues(), period);\n        }\n    }", "mergePeriodInto": "\n    protected int[] mergePeriodInto(int[] values, ReadablePeriod period) {\n         for (int i = 0, isize = period.size(); i < isize; i++) {\n             DurationFieldType type = period.getFieldType(i);\n             int value = period.getValue(i);\n             checkAndUpdate(type, values, value);\n         }\n         return values;\n    }", "addPeriod": "\n    protected void addPeriod(ReadablePeriod period) {\n        if (period != null) {\n            iValues = addPeriodInto(getValues(), period);\n        }\n    }", "addPeriodInto": "\n    protected int[] addPeriodInto(int[] values, ReadablePeriod period) {\n         for (int i = 0, isize = period.size(); i < isize; i++) {\n             DurationFieldType type = period.getFieldType(i);\n             int value = period.getValue(i);\n             if (value != 0) {\n                 int index = indexOf(type);\n                 if (index == -1) {\n                     throw new IllegalArgumentException(\n                         \"Period does not support field '\" + type.getName() + \"'\");\n                 } else {\n                     values[index] = FieldUtils.safeAdd(getValue(index), value);\n                 }\n             }\n         }\n         return values;\n    }", "setValue": "\n    protected void setValue(int index, int value) {\n        iValues[index] = value;\n    }", "setValues": "\n    protected void setValues(int[] values) {\n        iValues = values;\n    }"}