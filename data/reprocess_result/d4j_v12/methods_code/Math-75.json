{"toString": "\n    public String toString() {\n        NumberFormat nf = NumberFormat.getPercentInstance();\n        StringBuffer outBuffer = new StringBuffer();\n        outBuffer.append(\"Value \\t Freq. \\t Pct. \\t Cum Pct. \\n\");\n        Iterator<Comparable<?>> iter = freqTable.keySet().iterator();\n        while (iter.hasNext()) {\n            Comparable<?> value = iter.next();\n            outBuffer.append(value);\n            outBuffer.append('\\t');\n            outBuffer.append(getCount(value));\n            outBuffer.append('\\t');\n            outBuffer.append(nf.format(getPct(value)));\n            outBuffer.append('\\t');\n            outBuffer.append(nf.format(getCumPct(value)));\n            outBuffer.append('\\n');\n        }\n        return outBuffer.toString();\n    }", "addValue": "\n    public void addValue(Object v) {\n        if (v instanceof Comparable<?>){\n            addValue((Comparable<?>) v);\n        } else {\n            throw MathRuntimeException.createIllegalArgumentException(\n                  \"class ({0}) does not implement Comparable\",\n                  v.getClass().getName());\n        }\n    }", "clear": "\n    public void clear() {\n        freqTable.clear();\n    }", "valuesIterator": "\n    public Iterator<Comparable<?>> valuesIterator() {\n        return freqTable.keySet().iterator();\n    }", "getSumFreq": "\n    public long getSumFreq() {\n        long result = 0;\n        Iterator<Long> iterator = freqTable.values().iterator();\n        while (iterator.hasNext())  {\n            result += iterator.next().longValue();\n        }\n        return result;\n    }", "getCount": "\n    public long getCount(Object v) {\n        return getCount((Comparable<?>) v);\n    }", "getPct": "\n    public double getPct(Object v) {\n        return getCumPct((Comparable<?>) v);\n    }", "getCumFreq": "\n    public long getCumFreq(Object v) {\n        return getCumFreq((Comparable<?>) v);\n    }", "getCumPct": "\n    public double getCumPct(Object v) {\n        return getCumPct((Comparable<?>) v);\n\n    }", "compare": "\n        public int compare(Comparable<T> o1, Comparable<T> o2) {\n            return o1.compareTo((T) o2);\n        }", "hashCode": "\n    public int hashCode() {\n        final int prime = 31;\n        int result = 1;\n        result = prime * result +\n                 ((freqTable == null) ? 0 : freqTable.hashCode());\n        return result;\n    }", "equals": "\n    public boolean equals(Object obj) {\n        if (this == obj)\n            return true;\n        if (obj == null)\n            return false;\n        if (!(obj instanceof Frequency))\n            return false;\n        Frequency other = (Frequency) obj;\n        if (freqTable == null) {\n            if (other.freqTable != null)\n                return false;\n        } else if (!freqTable.equals(other.freqTable))\n            return false;\n        return true;\n    }"}