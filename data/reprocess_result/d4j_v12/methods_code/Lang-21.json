{"isSameDay": "\n    public static boolean isSameDay(Date date1, Date date2) {\n        if (date1 == null || date2 == null) {\n            throw new IllegalArgumentException(\"The date must not be null\");\n        }\n        Calendar cal1 = Calendar.getInstance();\n        cal1.setTime(date1);\n        Calendar cal2 = Calendar.getInstance();\n        cal2.setTime(date2);\n        return isSameDay(cal1, cal2);\n    }", "isSameInstant": "\n    public static boolean isSameInstant(Date date1, Date date2) {\n        if (date1 == null || date2 == null) {\n            throw new IllegalArgumentException(\"The date must not be null\");\n        }\n        return date1.getTime() == date2.getTime();\n    }", "isSameLocalTime": "\n    public static boolean isSameLocalTime(Calendar cal1, Calendar cal2) {\n        if (cal1 == null || cal2 == null) {\n            throw new IllegalArgumentException(\"The date must not be null\");\n        }\n        return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) &&\n                cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) &&\n                cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) &&\n                cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) &&\n                cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) &&\n                cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) &&\n                cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) &&\n                cal1.getClass() == cal2.getClass());\n    }", "parseDate": "\n    public static Date parseDate(String str, String... parsePatterns) throws ParseException {\n        return parseDateWithLeniency(str, parsePatterns, true);\n    }", "parseDateStrictly": "\n    public static Date parseDateStrictly(String str, String... parsePatterns) throws ParseException {\n        return parseDateWithLeniency(str, parsePatterns, false);\n    }", "parseDateWithLeniency": "\n    private static Date parseDateWithLeniency(String str, String[] parsePatterns,\n            boolean lenient) throws ParseException {\n        if (str == null || parsePatterns == null) {\n            throw new IllegalArgumentException(\"Date and Patterns must not be null\");\n        }\n        \n        SimpleDateFormat parser = new SimpleDateFormat();\n        parser.setLenient(lenient);\n        ParsePosition pos = new ParsePosition(0);\n        for (int i = 0; i < parsePatterns.length; i++) {\n\n            String pattern = parsePatterns[i];\n\n            // LANG-530 - need to make sure 'ZZ' output doesn't get passed to SimpleDateFormat\n            if (parsePatterns[i].endsWith(\"ZZ\")) {\n                pattern = pattern.substring(0, pattern.length() - 1);\n            }\n            \n            parser.applyPattern(pattern);\n            pos.setIndex(0);\n\n            String str2 = str;\n            // LANG-530 - need to make sure 'ZZ' output doesn't hit SimpleDateFormat as it will ParseException\n            if (parsePatterns[i].endsWith(\"ZZ\")) {\n                str2 = str.replaceAll(\"([-+][0-9][0-9]):([0-9][0-9])$\", \"$1$2\"); \n            }\n\n            Date date = parser.parse(str2, pos);\n            if (date != null && pos.getIndex() == str2.length()) {\n                return date;\n            }\n        }\n        throw new ParseException(\"Unable to parse the date: \" + str, -1);\n    }", "addYears": "\n    public static Date addYears(Date date, int amount) {\n        return add(date, Calendar.YEAR, amount);\n    }", "addMonths": "\n    public static Date addMonths(Date date, int amount) {\n        return add(date, Calendar.MONTH, amount);\n    }", "addWeeks": "\n    public static Date addWeeks(Date date, int amount) {\n        return add(date, Calendar.WEEK_OF_YEAR, amount);\n    }", "addDays": "\n    public static Date addDays(Date date, int amount) {\n        return add(date, Calendar.DAY_OF_MONTH, amount);\n    }", "addHours": "\n    public static Date addHours(Date date, int amount) {\n        return add(date, Calendar.HOUR_OF_DAY, amount);\n    }", "addMinutes": "\n    public static Date addMinutes(Date date, int amount) {\n        return add(date, Calendar.MINUTE, amount);\n    }", "addSeconds": "\n    public static Date addSeconds(Date date, int amount) {\n        return add(date, Calendar.SECOND, amount);\n    }", "addMilliseconds": "\n    public static Date addMilliseconds(Date date, int amount) {\n        return add(date, Calendar.MILLISECOND, amount);\n    }", "add": "\n    private static Date add(Date date, int calendarField, int amount) {\n        if (date == null) {\n            throw new IllegalArgumentException(\"The date must not be null\");\n        }\n        Calendar c = Calendar.getInstance();\n        c.setTime(date);\n        c.add(calendarField, amount);\n        return c.getTime();\n    }", "setYears": "\n    public static Date setYears(Date date, int amount) {\n        return set(date, Calendar.YEAR, amount);\n    }", "setMonths": "\n    public static Date setMonths(Date date, int amount) {\n        return set(date, Calendar.MONTH, amount);\n    }", "setDays": "\n    public static Date setDays(Date date, int amount) {\n        return set(date, Calendar.DAY_OF_MONTH, amount);\n    }", "setHours": "\n    public static Date setHours(Date date, int amount) {\n        return set(date, Calendar.HOUR_OF_DAY, amount);\n    }", "setMinutes": "\n    public static Date setMinutes(Date date, int amount) {\n        return set(date, Calendar.MINUTE, amount);\n    }", "setSeconds": "\n    public static Date setSeconds(Date date, int amount) {\n        return set(date, Calendar.SECOND, amount);\n    }", "setMilliseconds": "\n    public static Date setMilliseconds(Date date, int amount) {\n        return set(date, Calendar.MILLISECOND, amount);\n    } ", "set": "\n    private static Date set(Date date, int calendarField, int amount) {\n        if (date == null) {\n            throw new IllegalArgumentException(\"The date must not be null\");\n        }\n        // getInstance() returns a new object, so this method is thread safe.\n        Calendar c = Calendar.getInstance();\n        c.setLenient(false);\n        c.setTime(date);\n        c.set(calendarField, amount);\n        return c.getTime();\n    }   ", "toCalendar": "\n    public static Calendar toCalendar(Date date) {\n        Calendar c = Calendar.getInstance();\n        c.setTime(date);\n        return c;\n    }", "round": "\n    public static Date round(Date date, int field) {\n        if (date == null) {\n            throw new IllegalArgumentException(\"The date must not be null\");\n        }\n        Calendar gval = Calendar.getInstance();\n        gval.setTime(date);\n        modify(gval, field, MODIFY_ROUND);\n        return gval.getTime();\n    }", "truncate": "\n    public static Date truncate(Date date, int field) {\n        if (date == null) {\n            throw new IllegalArgumentException(\"The date must not be null\");\n        }\n        Calendar gval = Calendar.getInstance();\n        gval.setTime(date);\n        modify(gval, field, MODIFY_TRUNCATE);\n        return gval.getTime();\n    }", "ceiling": "\n    public static Date ceiling(Date date, int field) {\n        if (date == null) {\n            throw new IllegalArgumentException(\"The date must not be null\");\n        }\n        Calendar gval = Calendar.getInstance();\n        gval.setTime(date);\n        modify(gval, field, MODIFY_CEILING);\n        return gval.getTime();\n    }", "modify": "\n    private static void modify(Calendar val, int field, int modType) {\n        if (val.get(Calendar.YEAR) > 280000000) {\n            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n        }\n        \n        if (field == Calendar.MILLISECOND) {\n            return;\n        }\n\n        // ----------------- Fix for LANG-59 ---------------------- START ---------------\n        // see http://issues.apache.org/jira/browse/LANG-59\n        //\n        // Manually truncate milliseconds, seconds and minutes, rather than using\n        // Calendar methods.\n\n        Date date = val.getTime();\n        long time = date.getTime();\n        boolean done = false;\n\n        // truncate milliseconds\n        int millisecs = val.get(Calendar.MILLISECOND);\n        if (MODIFY_TRUNCATE == modType || millisecs < 500) {\n            time = time - millisecs;\n        }\n        if (field == Calendar.SECOND) {\n            done = true;\n        }\n\n        // truncate seconds\n        int seconds = val.get(Calendar.SECOND);\n        if (!done && (MODIFY_TRUNCATE == modType || seconds < 30)) {\n            time = time - (seconds * 1000L);\n        }\n        if (field == Calendar.MINUTE) {\n            done = true;\n        }\n\n        // truncate minutes\n        int minutes = val.get(Calendar.MINUTE);\n        if (!done && (MODIFY_TRUNCATE == modType || minutes < 30)) {\n            time = time - (minutes * 60000L);\n        }\n\n        // reset time\n        if (date.getTime() != time) {\n            date.setTime(time);\n            val.setTime(date);\n        }\n        // ----------------- Fix for LANG-59 ----------------------- END ----------------\n\n        boolean roundUp = false;\n        for (int i = 0; i < fields.length; i++) {\n            for (int j = 0; j < fields[i].length; j++) {\n                if (fields[i][j] == field) {\n                    //This is our field... we stop looping\n                    if (modType == MODIFY_CEILING || (modType == MODIFY_ROUND && roundUp)) {\n                        if (field == DateUtils.SEMI_MONTH) {\n                            //This is a special case that's hard to generalize\n                            //If the date is 1, we round up to 16, otherwise\n                            //  we subtract 15 days and add 1 month\n                            if (val.get(Calendar.DATE) == 1) {\n                                val.add(Calendar.DATE, 15);\n                            } else {\n                                val.add(Calendar.DATE, -15);\n                                val.add(Calendar.MONTH, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- START ---------------\n                        } else if (field == Calendar.AM_PM) {\n                            // This is a special case\n                            // If the time is 0, we round up to 12, otherwise\n                            //  we subtract 12 hours and add 1 day\n                            if (val.get(Calendar.HOUR_OF_DAY) == 0) {\n                                val.add(Calendar.HOUR_OF_DAY, 12);\n                            } else {\n                                val.add(Calendar.HOUR_OF_DAY, -12);\n                                val.add(Calendar.DATE, 1);\n                            }\n// ----------------- Fix for LANG-440 ---------------------- END ---------------\n                        } else {\n                            //We need at add one to this field since the\n                            //  last number causes us to round up\n                            val.add(fields[i][0], 1);\n                        }\n                    }\n                    return;\n                }\n            }\n            //We have various fields that are not easy roundings\n            int offset = 0;\n            boolean offsetSet = false;\n            //These are special types of fields that require different rounding rules\n            switch (field) {\n                case DateUtils.SEMI_MONTH:\n                    if (fields[i][0] == Calendar.DATE) {\n                        //If we're going to drop the DATE field's value,\n                        //  we want to do this our own way.\n                        //We need to subtrace 1 since the date has a minimum of 1\n                        offset = val.get(Calendar.DATE) - 1;\n                        //If we're above 15 days adjustment, that means we're in the\n                        //  bottom half of the month and should stay accordingly.\n                        if (offset >= 15) {\n                            offset -= 15;\n                        }\n                        //Record whether we're in the top or bottom half of that range\n                        roundUp = offset > 7;\n                        offsetSet = true;\n                    }\n                    break;\n                case Calendar.AM_PM:\n                    if (fields[i][0] == Calendar.HOUR_OF_DAY) {\n                        //If we're going to drop the HOUR field's value,\n                        //  we want to do this our own way.\n                        offset = val.get(Calendar.HOUR_OF_DAY);\n                        if (offset >= 12) {\n                            offset -= 12;\n                        }\n                        roundUp = offset >= 6;\n                        offsetSet = true;\n                    }\n                    break;\n            }\n            if (!offsetSet) {\n                int min = val.getActualMinimum(fields[i][0]);\n                int max = val.getActualMaximum(fields[i][0]);\n                //Calculate the offset from the minimum allowed value\n                offset = val.get(fields[i][0]) - min;\n                //Set roundUp if this is more than half way between the minimum and maximum\n                roundUp = offset > ((max - min) / 2);\n            }\n            //We need to remove this field\n            if (offset != 0) {\n                val.set(fields[i][0], val.get(fields[i][0]) - offset);\n            }\n        }\n        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n\n    }", "iterator": "\n    public static Iterator<Calendar> iterator(Date focus, int rangeStyle) {\n        if (focus == null) {\n            throw new IllegalArgumentException(\"The date must not be null\");\n        }\n        Calendar gval = Calendar.getInstance();\n        gval.setTime(focus);\n        return iterator(gval, rangeStyle);\n    }", "getFragmentInMilliseconds": "\n    public static long getFragmentInMilliseconds(Date date, int fragment) {\n        return getFragment(date, fragment, Calendar.MILLISECOND);    \n    }", "getFragmentInSeconds": "\n    public static long getFragmentInSeconds(Date date, int fragment) {\n        return getFragment(date, fragment, Calendar.SECOND);\n    }", "getFragmentInMinutes": "\n    public static long getFragmentInMinutes(Date date, int fragment) {\n        return getFragment(date, fragment, Calendar.MINUTE);\n    }", "getFragmentInHours": "\n    public static long getFragmentInHours(Date date, int fragment) {\n        return getFragment(date, fragment, Calendar.HOUR_OF_DAY);\n    }", "getFragmentInDays": "\n    public static long getFragmentInDays(Date date, int fragment) {\n        return getFragment(date, fragment, Calendar.DAY_OF_YEAR);\n    }", "getFragment": "\n    private static long getFragment(Date date, int fragment, int unit) {\n        if(date == null) {\n            throw  new IllegalArgumentException(\"The date must not be null\");\n        }\n        Calendar calendar = Calendar.getInstance();\n        calendar.setTime(date);\n        return getFragment(calendar, fragment, unit);\n    }", "truncatedEquals": "\n    public static boolean truncatedEquals(Calendar cal1, Calendar cal2, int field) {\n        return truncatedCompareTo(cal1, cal2, field) == 0;\n    }", "truncatedCompareTo": "\n    public static int truncatedCompareTo(Calendar cal1, Calendar cal2, int field) {\n        Calendar truncatedCal1 = truncate(cal1, field);\n        Calendar truncatedCal2 = truncate(cal2, field);\n        return truncatedCal1.compareTo(truncatedCal2);\n    }", "getMillisPerUnit": "\n    private static long getMillisPerUnit(int unit) {\n        long result = Long.MAX_VALUE;\n        switch (unit) {\n            case Calendar.DAY_OF_YEAR:\n            case Calendar.DATE:\n                result = MILLIS_PER_DAY;\n                break;\n            case Calendar.HOUR_OF_DAY:\n                result = MILLIS_PER_HOUR;\n                break;\n            case Calendar.MINUTE:\n                result = MILLIS_PER_MINUTE;\n                break;\n            case Calendar.SECOND:\n                result = MILLIS_PER_SECOND;\n                break;\n            case Calendar.MILLISECOND:\n                result = 1;\n                break;\n            default: throw new IllegalArgumentException(\"The unit \" + unit + \" cannot be represented is milleseconds\");\n        }\n        return result;\n    }", "hasNext": "\n        public boolean hasNext() {\n            return spot.before(endFinal);\n        }", "next": "\n        public Calendar next() {\n            if (spot.equals(endFinal)) {\n                throw new NoSuchElementException();\n            }\n            spot.add(Calendar.DATE, 1);\n            return (Calendar) spot.clone();\n        }", "remove": "\n        public void remove() {\n            throw new UnsupportedOperationException();\n        }"}