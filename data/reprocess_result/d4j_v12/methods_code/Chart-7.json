{"getDomainDescription": "\n    public String getDomainDescription() {\n        return this.domain;\n    }", "setDomainDescription": "\n    public void setDomainDescription(String description) {\n        String old = this.domain;\n        this.domain = description;\n        firePropertyChange(\"Domain\", old, description);\n    }", "getRangeDescription": "\n    public String getRangeDescription() {\n        return this.range;\n    }", "setRangeDescription": "\n    public void setRangeDescription(String description) {\n        String old = this.range;\n        this.range = description;\n        firePropertyChange(\"Range\", old, description);\n    }", "getItemCount": "\n    public int getItemCount() {\n        return this.data.size();\n    }", "getDataItem": "\n    public TimePeriodValue getDataItem(int index) {\n        return (TimePeriodValue) this.data.get(index);\n    }", "getTimePeriod": "\n    public TimePeriod getTimePeriod(int index) {\n        return getDataItem(index).getPeriod();\n    }", "getValue": "\n    public Number getValue(int index) {\n        return getDataItem(index).getValue();\n    }", "add": "\n    public void add(TimePeriodValue item) {\n        if (item == null) {\n            throw new IllegalArgumentException(\"Null item not allowed.\");\n        }\n        this.data.add(item);\n        updateBounds(item.getPeriod(), this.data.size() - 1);\n        fireSeriesChanged();\n    }", "updateBounds": "\n    private void updateBounds(TimePeriod period, int index) {\n        \n        long start = period.getStart().getTime();\n        long end = period.getEnd().getTime();\n        long middle = start + ((end - start) / 2);\n\n        if (this.minStartIndex >= 0) {\n            long minStart = getDataItem(this.minStartIndex).getPeriod()\n                .getStart().getTime();\n            if (start < minStart) {\n                this.minStartIndex = index;           \n            }\n        }\n        else {\n            this.minStartIndex = index;\n        }\n        \n        if (this.maxStartIndex >= 0) {\n            long maxStart = getDataItem(this.maxStartIndex).getPeriod()\n                .getStart().getTime();\n            if (start > maxStart) {\n                this.maxStartIndex = index;           \n            }\n        }\n        else {\n            this.maxStartIndex = index;\n        }\n        \n        if (this.minMiddleIndex >= 0) {\n            long s = getDataItem(this.minMiddleIndex).getPeriod().getStart()\n                .getTime();\n            long e = getDataItem(this.minMiddleIndex).getPeriod().getEnd()\n                .getTime();\n            long minMiddle = s + (e - s) / 2;\n            if (middle < minMiddle) {\n                this.minMiddleIndex = index;           \n            }\n        }\n        else {\n            this.minMiddleIndex = index;\n        }\n        \n        if (this.maxMiddleIndex >= 0) {\n            long s = getDataItem(this.minMiddleIndex).getPeriod().getStart()\n                .getTime();\n            long e = getDataItem(this.minMiddleIndex).getPeriod().getEnd()\n                .getTime();\n            long maxMiddle = s + (e - s) / 2;\n            if (middle > maxMiddle) {\n                this.maxMiddleIndex = index;           \n            }\n        }\n        else {\n            this.maxMiddleIndex = index;\n        }\n        \n        if (this.minEndIndex >= 0) {\n            long minEnd = getDataItem(this.minEndIndex).getPeriod().getEnd()\n                .getTime();\n            if (end < minEnd) {\n                this.minEndIndex = index;           \n            }\n        }\n        else {\n            this.minEndIndex = index;\n        }\n       \n        if (this.maxEndIndex >= 0) {\n            long maxEnd = getDataItem(this.maxEndIndex).getPeriod().getEnd()\n                .getTime();\n            if (end > maxEnd) {\n                this.maxEndIndex = index;           \n            }\n        }\n        else {\n            this.maxEndIndex = index;\n        }\n        \n    }", "recalculateBounds": "\n    private void recalculateBounds() {\n        this.minStartIndex = -1;\n        this.minMiddleIndex = -1;\n        this.minEndIndex = -1;\n        this.maxStartIndex = -1;\n        this.maxMiddleIndex = -1;\n        this.maxEndIndex = -1;\n        for (int i = 0; i < this.data.size(); i++) {\n            TimePeriodValue tpv = (TimePeriodValue) this.data.get(i);\n            updateBounds(tpv.getPeriod(), i);\n        }\n    }", "update": "\n    public void update(int index, Number value) {\n        TimePeriodValue item = getDataItem(index);\n        item.setValue(value);\n        fireSeriesChanged();\n    }", "delete": "\n    public void delete(int start, int end) {\n        for (int i = 0; i <= (end - start); i++) {\n            this.data.remove(start);\n        }\n        recalculateBounds();\n        fireSeriesChanged();\n    }", "equals": "\n    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof TimePeriodValues)) {\n            return false;\n        }\n        if (!super.equals(obj)) {\n            return false;\n        }\n        TimePeriodValues that = (TimePeriodValues) obj;\n        if (!ObjectUtilities.equal(this.getDomainDescription(), \n                that.getDomainDescription())) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.getRangeDescription(), \n                that.getRangeDescription())) {\n            return false;\n        }\n        int count = getItemCount();\n        if (count != that.getItemCount()) {\n            return false;\n        }\n        for (int i = 0; i < count; i++) {\n            if (!getDataItem(i).equals(that.getDataItem(i))) {\n                return false;\n            }\n        }\n        return true;\n    }", "hashCode": "\n    public int hashCode() {\n        int result;\n        result = (this.domain != null ? this.domain.hashCode() : 0);\n        result = 29 * result + (this.range != null ? this.range.hashCode() : 0);\n        result = 29 * result + this.data.hashCode();\n        result = 29 * result + this.minStartIndex;\n        result = 29 * result + this.maxStartIndex;\n        result = 29 * result + this.minMiddleIndex;\n        result = 29 * result + this.maxMiddleIndex;\n        result = 29 * result + this.minEndIndex;\n        result = 29 * result + this.maxEndIndex;\n        return result;\n    }", "clone": "\n    public Object clone() throws CloneNotSupportedException {\n        Object clone = createCopy(0, getItemCount() - 1);\n        return clone;\n    }", "createCopy": "\n    public TimePeriodValues createCopy(int start, int end) \n        throws CloneNotSupportedException {\n\n        TimePeriodValues copy = (TimePeriodValues) super.clone();\n\n        copy.data = new ArrayList();\n        if (this.data.size() > 0) {\n            for (int index = start; index <= end; index++) {\n                TimePeriodValue item = (TimePeriodValue) this.data.get(index);\n                TimePeriodValue clone = (TimePeriodValue) item.clone();\n                try {\n                    copy.add(clone);\n                }\n                catch (SeriesException e) {\n                    System.err.println(\"Failed to add cloned item.\");\n                }\n            }\n        }\n        return copy;\n\n    }", "getMinStartIndex": "\n    public int getMinStartIndex() {\n        return this.minStartIndex;\n    }", "getMaxStartIndex": "\n    public int getMaxStartIndex() {\n        return this.maxStartIndex;\n    }", "getMinMiddleIndex": "\n    public int getMinMiddleIndex() {\n        return this.minMiddleIndex;\n    }", "getMaxMiddleIndex": "\n    public int getMaxMiddleIndex() {\n        return this.maxMiddleIndex;\n    }", "getMinEndIndex": "\n    public int getMinEndIndex() {\n        return this.minEndIndex;\n    }", "getMaxEndIndex": "\n    public int getMaxEndIndex() {\n        return this.maxEndIndex;\n    }"}