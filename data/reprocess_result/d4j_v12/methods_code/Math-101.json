{"formatComplex": "\n    public static String formatComplex( Complex c ) {\n        return getInstance().format( c );\n    }", "format": "\n    public StringBuffer format(Complex complex, StringBuffer toAppendTo,\n            FieldPosition pos) {\n        \n        pos.setBeginIndex(0);\n        pos.setEndIndex(0);\n\n        // format real\n        double re = complex.getReal();\n        formatDouble(re, getRealFormat(), toAppendTo, pos);\n        \n        // format sign and imaginary\n        double im = complex.getImaginary();\n        if (im < 0.0) {\n            toAppendTo.append(\" - \");\n            formatDouble(-im, getImaginaryFormat(), toAppendTo, pos);\n            toAppendTo.append(getImaginaryCharacter());\n        } else if (im > 0.0 || Double.isNaN(im)) {\n            toAppendTo.append(\" + \");\n            formatDouble(im, getImaginaryFormat(), toAppendTo, pos);\n            toAppendTo.append(getImaginaryCharacter());\n        }\n        \n        return toAppendTo;\n    }", "formatDouble": "\n    private StringBuffer formatDouble(double value, NumberFormat format,\n            StringBuffer toAppendTo, FieldPosition pos) {\n        if( Double.isNaN(value) || Double.isInfinite(value) ) {\n            toAppendTo.append('(');\n            toAppendTo.append(value);\n            toAppendTo.append(')');\n        } else {\n            format.format(value, toAppendTo, pos);\n        }\n        return toAppendTo;\n    }", "getAvailableLocales": "\n    public static Locale[] getAvailableLocales() {\n        return NumberFormat.getAvailableLocales();\n    }", "getDefaultNumberFormat": "\n    private static NumberFormat getDefaultNumberFormat() {\n        return getDefaultNumberFormat(Locale.getDefault());\n    }", "getImaginaryCharacter": "\n    public String getImaginaryCharacter() {\n        return imaginaryCharacter;\n    }", "getImaginaryFormat": "\n    public NumberFormat getImaginaryFormat() {\n        return imaginaryFormat;\n    }", "getInstance": "\n    public static ComplexFormat getInstance() {\n        return getInstance(Locale.getDefault());\n    }", "getRealFormat": "\n    public NumberFormat getRealFormat() {\n        return realFormat;\n    }", "parse": "\n    public Complex parse(String source) throws ParseException {\n        ParsePosition parsePosition = new ParsePosition(0);\n        Complex result = parse(source, parsePosition);\n        if (parsePosition.getIndex() == 0) {\n            throw new ParseException(\"Unparseable complex number: \\\"\" + source +\n                \"\\\"\", parsePosition.getErrorIndex());\n        }\n        return result;\n    }", "parseAndIgnoreWhitespace": "\n    private void parseAndIgnoreWhitespace(String source, ParsePosition pos) {\n        parseNextCharacter(source, pos);\n        pos.setIndex(pos.getIndex() - 1);\n    }", "parseNextCharacter": "\n    private char parseNextCharacter(String source, ParsePosition pos) {\n         int index = pos.getIndex();\n         int n = source.length();\n         char ret = 0;\n\n         if (index < n) {\n             char c;\n             do {\n                 c = source.charAt(index++);\n             } while (Character.isWhitespace(c) && index < n);\n             pos.setIndex(index);\n         \n             if (index < n) {\n                 ret = c;\n             }\n         }\n         \n         return ret;\n    }", "parseNumber": "\n    private Number parseNumber(String source, double value, ParsePosition pos) {\n        Number ret = null;\n        \n        StringBuffer sb = new StringBuffer();\n        sb.append('(');\n        sb.append(value);\n        sb.append(')');\n        \n        int n = sb.length();\n        int startIndex = pos.getIndex();\n        int endIndex = startIndex + n;\n        if (endIndex < source.length()) {\n            if (source.substring(startIndex, endIndex).compareTo(sb.toString()) == 0) {\n                ret = new Double(value);\n                pos.setIndex(endIndex);\n            }\n        }\n        \n        return ret;\n    }", "parseObject": "\n    public Object parseObject(String source, ParsePosition pos) {\n        return parse(source, pos);\n    }", "setImaginaryCharacter": "\n    public void setImaginaryCharacter(String imaginaryCharacter) {\n        if (imaginaryCharacter == null || imaginaryCharacter.length() == 0) {\n            throw new IllegalArgumentException(\n                \"imaginaryCharacter must be a non-empty string.\");\n        }\n        this.imaginaryCharacter = imaginaryCharacter;\n    }", "setImaginaryFormat": "\n    public void setImaginaryFormat(NumberFormat imaginaryFormat) {\n        if (imaginaryFormat == null) {\n            throw new IllegalArgumentException(\n                \"imaginaryFormat can not be null.\");\n        }\n        this.imaginaryFormat = imaginaryFormat;\n    }", "setRealFormat": "\n    public void setRealFormat(NumberFormat realFormat) {\n        if (realFormat == null) {\n            throw new IllegalArgumentException(\n                \"realFormat can not be null.\");\n        }\n        this.realFormat = realFormat;\n    }"}