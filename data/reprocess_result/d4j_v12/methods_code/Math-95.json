{"cumulativeProbability": "\n    public double cumulativeProbability(double x) throws MathException {\n        double ret;\n        if (x <= 0.0) {\n            ret = 0.0;\n        } else {\n            double n = getNumeratorDegreesOfFreedom();\n            double m = getDenominatorDegreesOfFreedom();\n            \n            ret = Beta.regularizedBeta((n * x) / (m + n * x),\n                0.5 * n,\n                0.5 * m);\n        }\n        return ret;\n    }", "inverseCumulativeProbability": "\n    public double inverseCumulativeProbability(final double p) \n        throws MathException {\n        if (p == 0) {\n            return 0d;\n        }\n        if (p == 1) {\n            return Double.POSITIVE_INFINITY;\n        }\n        return super.inverseCumulativeProbability(p);\n    }", "getDomainLowerBound": "\n    protected double getDomainLowerBound(double p) {\n        return 0.0;\n    }", "getDomainUpperBound": "\n    protected double getDomainUpperBound(double p) {\n        return Double.MAX_VALUE;\n    }", "getInitialDomain": "\n    protected double getInitialDomain(double p) {\n        double ret;\n        double d = getDenominatorDegreesOfFreedom();\n            // use mean\n            ret = d / (d - 2.0);\n        return ret;\n    }", "setNumeratorDegreesOfFreedom": "\n    public void setNumeratorDegreesOfFreedom(double degreesOfFreedom) {\n        if (degreesOfFreedom <= 0.0) {\n            throw new IllegalArgumentException(\n                \"degrees of freedom must be positive.\");\n        }\n        this.numeratorDegreesOfFreedom = degreesOfFreedom;\n    }", "getNumeratorDegreesOfFreedom": "\n    public double getNumeratorDegreesOfFreedom() {\n        return numeratorDegreesOfFreedom;\n    }", "setDenominatorDegreesOfFreedom": "\n    public void setDenominatorDegreesOfFreedom(double degreesOfFreedom) {\n        if (degreesOfFreedom <= 0.0) {\n            throw new IllegalArgumentException(\n                \"degrees of freedom must be positive.\");\n        }\n        this.denominatorDegreesOfFreedom = degreesOfFreedom;\n    }", "getDenominatorDegreesOfFreedom": "\n    public double getDenominatorDegreesOfFreedom() {\n        return denominatorDegreesOfFreedom;\n    }"}