{"toString": "\n    public String toString() {\n        NumberFormat nf = NumberFormat.getPercentInstance();\n        StringBuffer outBuffer = new StringBuffer();\n        outBuffer.append(\"Value \\t Freq. \\t Pct. \\t Cum Pct. \\n\");\n        Iterator iter = freqTable.keySet().iterator();\n        while (iter.hasNext()) {\n            Object value = iter.next();\n            outBuffer.append(value);\n            outBuffer.append('\\t');\n            outBuffer.append(getCount(value));\n            outBuffer.append('\\t');\n            outBuffer.append(nf.format(getPct(value)));\n            outBuffer.append('\\t');\n            outBuffer.append(nf.format(getCumPct(value)));\n            outBuffer.append('\\n');\n        }\n        return outBuffer.toString();\n    }", "addValue": "\n    public void addValue(Object v) {\n            addValue((Comparable<?>) v);            \n    }", "clear": "\n    public void clear() {\n        freqTable.clear();\n    }", "valuesIterator": "\n    public Iterator valuesIterator() {\n        return freqTable.keySet().iterator();\n    }", "getSumFreq": "\n    public long getSumFreq() {\n        long result = 0;\n        Iterator iterator = freqTable.values().iterator();\n        while (iterator.hasNext())  {\n            result += ((Long) iterator.next()).longValue();\n        }\n        return result;\n    }", "getCount": "\n    public long getCount(Object v) {\n        if (v instanceof Integer) {\n            return getCount(((Integer) v).longValue());\n        }\n        long result = 0;\n        try { \n            Long count =  (Long) freqTable.get(v);\n            if (count != null) {\n                result = count.longValue();\n            }\n        } catch (ClassCastException ex) {\n            // ignore and return 0 -- ClassCastException will be thrown if value is not comparable\n        }\n        return result;\n    }", "getPct": "\n    public double getPct(Object v) {\n        final long sumFreq = getSumFreq();\n        if (sumFreq == 0) {\n            return Double.NaN;\n        }\n        return (double) getCount(v) / (double) sumFreq;        \n    }", "getCumFreq": "\n    public long getCumFreq(Object v) {\n        if (getSumFreq() == 0) {\n            return 0;\n        }\n        if (v instanceof Integer) {\n            return getCumFreq(((Integer) v).longValue());\n        }\n        Comparator c = freqTable.comparator();\n        if (c == null) {\n            c = new NaturalComparator();\n        }\n        long result = 0;\n        \n        try {\n            Long value = (Long) freqTable.get(v);\n            if (value != null) {\n                result = value.longValue();\n            }\n        } catch (ClassCastException ex) {\n            return result;   // v is not comparable\n        }\n        \n        if (c.compare(v, freqTable.firstKey()) < 0) {\n            return 0;  // v is comparable, but less than first value\n        }\n        \n        if (c.compare(v, freqTable.lastKey()) >= 0) {\n            return getSumFreq();    // v is comparable, but greater than the last value\n        }\n        \n        Iterator values = valuesIterator();\n        while (values.hasNext()) {\n            Object nextValue = values.next();\n            if (c.compare(v, nextValue) > 0) {\n                result += getCount(nextValue);\n            } else {\n                return result;\n            }\n        }\n        return result;\n    }", "getCumPct": "\n    public double getCumPct(Object v) {\n        final long sumFreq = getSumFreq();\n        if (sumFreq == 0) {\n            return Double.NaN;\n        }\n        return (double) getCumFreq(v) / (double) sumFreq;        \n    }", "compare": "\n        public int compare(Object o1, Object o2) {\n            return ((Comparable)o1).compareTo(o2);\n        }"}