{"setChromosomes": "\n    public void setChromosomes(final List<Chromosome> chromosomes) {\n        if (chromosomes == null) {\n            throw new NullArgumentException();\n        }\n        if (chromosomes.size() > populationLimit) {\n            throw new NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,\n                                                chromosomes.size(), populationLimit, false);\n        }\n        this.chromosomes.clear();\n        this.chromosomes.addAll(chromosomes);\n    }", "addChromosomes": "\n    public void addChromosomes(final Collection<Chromosome> chromosomeColl) {\n        if (chromosomes.size() + chromosomeColl.size() > populationLimit) {\n            throw new NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,\n                                                chromosomes.size(), populationLimit, false);\n        }\n        this.chromosomes.addAll(chromosomeColl);\n    }", "getChromosomes": "\n    public List<Chromosome> getChromosomes() {\n        return Collections.unmodifiableList(chromosomes);\n    }", "getChromosomeList": "\n    protected List<Chromosome> getChromosomeList() {\n        return chromosomes;\n    }", "addChromosome": "\n    public void addChromosome(final Chromosome chromosome) {\n        if (chromosomes.size() >= populationLimit) {\n            throw new NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,\n                                                chromosomes.size(), populationLimit, false);\n        }\n        this.chromosomes.add(chromosome);\n    }", "getFittestChromosome": "\n    public Chromosome getFittestChromosome() {\n        // best so far\n        Chromosome bestChromosome = this.chromosomes.get(0);\n        for (Chromosome chromosome : this.chromosomes) {\n            if (chromosome.compareTo(bestChromosome) > 0) {\n                // better chromosome found\n                bestChromosome = chromosome;\n            }\n        }\n        return bestChromosome;\n    }", "getPopulationLimit": "\n    public int getPopulationLimit() {\n        return this.populationLimit;\n    }", "setPopulationLimit": "\n    public void setPopulationLimit(final int populationLimit) {\n        if (populationLimit <= 0) {\n            throw new NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE, populationLimit);\n        }\n        if (populationLimit < chromosomes.size()) {\n            throw new NumberIsTooSmallException(populationLimit, chromosomes.size(), true);\n        }\n        this.populationLimit = populationLimit;\n    }", "getPopulationSize": "\n    public int getPopulationSize() {\n        return this.chromosomes.size();\n    }", "toString": "\n    public String toString() {\n        return this.chromosomes.toString();\n    }", "iterator": "\n    public Iterator<Chromosome> iterator() {\n        return chromosomes.iterator();\n    }"}