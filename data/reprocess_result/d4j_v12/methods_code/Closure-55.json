{"process": "\n  public void process(Node externs, Node root) {\n    List<Reducer> reducers = ImmutableList.of(new ReturnConstantReducer(),\n                                              new GetterReducer(),\n                                              new SetterReducer(),\n                                              new EmptyFunctionReducer(),\n                                              new IdentityReducer());\n\n    Multimap<Reducer, Reduction> reductionMap = HashMultimap.create();\n\n    // Accumulate possible reductions in the reduction multi map.  They\n    // will be applied in the loop below.\n    NodeTraversal.traverse(compiler, root,\n                           new ReductionGatherer(reducers, reductionMap));\n\n    // Apply reductions iff they will provide some savings.\n    for (Reducer reducer : reducers) {\n      Collection<Reduction> reductions = reductionMap.get(reducer);\n      if (reductions.isEmpty()) {\n        continue;\n      }\n\n      Node helperCode = parseHelperCode(reducer);\n      if (helperCode == null) {\n        continue;\n      }\n\n      int helperCodeCost = InlineCostEstimator.getCost(helperCode);\n\n      // Estimate savings\n      int savings = 0;\n      for (Reduction reduction : reductions) {\n        savings += reduction.estimateSavings();\n      }\n\n      // Compare estimated savings against the helper cost.  Apply\n      // reductions if doing so will result in some savings.\n      if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n        for (Reduction reduction : reductions) {\n          reduction.apply();\n        }\n\n        Node addingRoot = compiler.getNodeForCodeInsertion(null);\n        addingRoot.addChildrenToFront(helperCode);\n        compiler.reportCodeChange();\n      }\n    }\n  }", "parseHelperCode": "\n  public Node parseHelperCode(Reducer reducer) {\n    Node root = compiler.parseSyntheticCode(\n        reducer.getClass().toString() + \":helper\", reducer.getHelperSource());\n    return (root != null) ? root.removeFirstChild() : null;\n  }", "isReduceableFunctionExpression": "\n  private static boolean isReduceableFunctionExpression(Node n) {\n    return NodeUtil.isFunctionExpression(n);\n  }", "apply": "\n    void apply() {\n      parent.replaceChild(oldChild, newChild);\n      compiler.reportCodeChange();\n    }", "estimateSavings": "\n    int estimateSavings() {\n      return InlineCostEstimator.getCost(oldChild) -\n          InlineCostEstimator.getCost(newChild);\n    }", "shouldTraverse": "\n    public boolean shouldTraverse(NodeTraversal raversal,\n                                  Node node,\n                                  Node parent) {\n      for (Reducer reducer : reducers) {\n        Node replacement = reducer.reduce(node);\n        if (replacement != node) {\n          reductions.put(reducer, new Reduction(parent, node, replacement));\n          return false;\n        }\n      }\n      return true;\n    }", "visit": "\n    public void visit(NodeTraversal traversal, Node node, Node parent) {\n    }", "getHelperSource": "\n    abstract String getHelperSource();\n\n    /**\n     * @return root of the reduced subtree if a reduction was applied;\n     *         otherwise returns the node argument.\n     */\n    abstract Node reduce(Node node);\n\n    /**\n     * Builds a method call based on the the given method name,\n     * argument and history.\n     *\n     * @param methodName Method to call.\n     * @param argumentNode Method argument.\n     * @param lineno line number in original source.\n     * @param charno character offset in original line.\n     */\n    protected final Node buildCallNode(String methodName, Node argumentNode,\n                                       int lineno, int charno) {\n      Node call = new Node(Token.CALL, lineno, charno);\n      call.putBooleanProp(Node.FREE_CALL, true);\n      call.addChildToBack(Node.newString(Token.NAME, methodName));\n      if (argumentNode != null) {\n        call.addChildToBack(argumentNode.cloneTree());\n      }\n      return call;\n    }", "reduce": "\n    abstract Node reduce(Node node);\n\n    /**\n     * Builds a method call based on the the given method name,\n     * argument and history.\n     *\n     * @param methodName Method to call.\n     * @param argumentNode Method argument.\n     * @param lineno line number in original source.\n     * @param charno character offset in original line.\n     */\n    protected final Node buildCallNode(String methodName, Node argumentNode,\n                                       int lineno, int charno) {\n      Node call = new Node(Token.CALL, lineno, charno);\n      call.putBooleanProp(Node.FREE_CALL, true);\n      call.addChildToBack(Node.newString(Token.NAME, methodName));\n      if (argumentNode != null) {\n        call.addChildToBack(argumentNode.cloneTree());\n      }\n      return call;\n    }", "buildCallNode": "\n    protected final Node buildCallNode(String methodName, Node argumentNode,\n                                       int lineno, int charno) {\n      Node call = new Node(Token.CALL, lineno, charno);\n      call.putBooleanProp(Node.FREE_CALL, true);\n      call.addChildToBack(Node.newString(Token.NAME, methodName));\n      if (argumentNode != null) {\n        call.addChildToBack(argumentNode.cloneTree());\n      }\n      return call;\n    }", "maybeGetSingleReturnRValue": "\n    protected final Node maybeGetSingleReturnRValue(Node functionNode) {\n      Node body = functionNode.getLastChild();\n      if (!body.hasOneChild()) {\n        return null;\n      }\n\n      Node statement = body.getFirstChild();\n      if (statement.getType() == Token.RETURN) {\n        return statement.getFirstChild();\n      }\n      return null;\n    }", "isIdentityFunction": "\n    private boolean isIdentityFunction(Node functionNode) {\n      Node argList = functionNode.getFirstChild().getNext();\n      Node paramNode = argList.getFirstChild();\n      if (paramNode == null) {\n        return false;\n      }\n\n      Node value = maybeGetSingleReturnRValue(functionNode);\n      if (value != null &&\n          NodeUtil.isName(value) &&\n          value.getString().equals(paramNode.getString())) {\n        return true;\n      }\n      return false;\n    }", "getValueNode": "\n    private Node getValueNode(Node functionNode) {\n      Node value = maybeGetSingleReturnRValue(functionNode);\n      if (value != null &&\n          NodeUtil.isImmutableValue(value)) {\n        return value;\n      }\n      return null;\n    }", "getGetPropertyName": "\n    private Node getGetPropertyName(Node functionNode) {\n      Node value = maybeGetSingleReturnRValue(functionNode);\n      if (value != null &&\n          NodeUtil.isGetProp(value) &&\n          NodeUtil.isThis(value.getFirstChild())) {\n        return value.getLastChild();\n      }\n      return null;\n    }", "getSetPropertyName": "\n    private Node getSetPropertyName(Node functionNode) {\n      Node body = functionNode.getLastChild();\n      if (!body.hasOneChild()) {\n        return null;\n      }\n\n      Node argList = functionNode.getFirstChild().getNext();\n      Node paramNode = argList.getFirstChild();\n      if (paramNode == null) {\n        return null;\n      }\n\n      Node statement = body.getFirstChild();\n      if (!NodeUtil.isExprAssign(statement)) {\n        return null;\n      }\n\n      Node assign = statement.getFirstChild();\n      Node lhs = assign.getFirstChild();\n      if (NodeUtil.isGetProp(lhs) && NodeUtil.isThis(lhs.getFirstChild())) {\n        Node rhs = assign.getLastChild();\n        if (NodeUtil.isName(rhs) &&\n            rhs.getString().equals(paramNode.getString())) {\n          Node propertyName = lhs.getLastChild();\n          return propertyName;\n        }\n      }\n      return null;\n    }"}