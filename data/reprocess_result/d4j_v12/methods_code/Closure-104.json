{"getAlternates": "\n  public Iterable<JSType> getAlternates() {\n    return alternates;\n  }", "forgiveUnknownNames": "\n  public void forgiveUnknownNames() {\n    for (JSType type : getAlternates()) {\n      type.forgiveUnknownNames();\n    }\n  }", "matchesNumberContext": "\n  public boolean matchesNumberContext() {\n    // TODO(user): Reverse this logic to make it correct instead of generous.\n    for (JSType t : alternates) {\n      if (t.matchesNumberContext()) {\n        return true;\n      }\n    }\n    return false;\n  }", "matchesStringContext": "\n  public boolean matchesStringContext() {\n    // TODO(user): Reverse this logic to make it correct instead of generous.\n    for (JSType t : alternates) {\n      if (t.matchesStringContext()) {\n        return true;\n      }\n    }\n    return false;\n  }", "matchesObjectContext": "\n  public boolean matchesObjectContext() {\n    // TODO(user): Reverse this logic to make it correct instead of generous.\n    for (JSType t : alternates) {\n      if (t.matchesObjectContext()) {\n        return true;\n      }\n    }\n    return false;\n  }", "findPropertyType": "\n  public JSType findPropertyType(String propertyName) {\n    JSType propertyType = null;\n\n    for (JSType alternate : getAlternates()) {\n      // Filter out the null/undefined type.\n      if (alternate.isNullType() || alternate.isVoidType()) {\n        continue;\n      }\n\n      JSType altPropertyType = alternate.findPropertyType(propertyName);\n      if (altPropertyType == null) {\n        continue;\n      }\n\n      if (propertyType == null) {\n        propertyType = altPropertyType;\n      } else {\n        propertyType = propertyType.getLeastSupertype(altPropertyType);\n      }\n    }\n\n    return propertyType;\n  }", "canAssignTo": "\n  public boolean canAssignTo(JSType that) {\n    boolean canAssign = true;\n    for (JSType t : alternates) {\n      if (t.isUnknownType()) {\n        return true;\n      }\n      canAssign &= t.canAssignTo(that);\n    }\n    return canAssign;\n  }", "canBeCalled": "\n  public boolean canBeCalled() {\n    for (JSType t : alternates) {\n      if (!t.canBeCalled()) {\n        return false;\n      }\n    }\n    return true;\n  }", "restrictByNotNullOrUndefined": "\n  public JSType restrictByNotNullOrUndefined() {\n    UnionTypeBuilder restricted = new UnionTypeBuilder(registry);\n    for (JSType t : alternates) {\n      restricted.addAlternate(t.restrictByNotNullOrUndefined());\n    }\n    return restricted.build();\n  }", "testForEquality": "\n  public TernaryValue testForEquality(JSType that) {\n    TernaryValue result = null;\n    for (JSType t : alternates) {\n      TernaryValue test = t.testForEquality(that);\n      if (result == null) {\n        result = test;\n      } else if (!result.equals(test)) {\n        return UNKNOWN;\n      }\n    }\n    return result;\n  }", "isNullable": "\n  public boolean isNullable() {\n    for (JSType t : alternates) {\n      if (t.isNullable()) {\n        return true;\n      }\n    }\n    return false;\n  }", "isUnknownType": "\n  public boolean isUnknownType() {\n    for (JSType t : alternates) {\n      if (t.isUnknownType()) {\n        return true;\n      }\n    }\n    return false;\n  }", "getLeastSupertype": "\n  public JSType getLeastSupertype(JSType that) {\n    if (!that.isUnknownType()) {\n      for (JSType alternate : alternates) {\n        if (!alternate.isUnknownType() && that.isSubtype(alternate)) {\n          return this;\n        }\n      }\n    }\n\n    return getLeastSupertype(this, that);\n  }", "meet": "\n  JSType meet(JSType that) {\n    UnionTypeBuilder builder = new UnionTypeBuilder(registry);\n    for (JSType alternate : alternates) {\n      if (alternate.isSubtype(that)) {\n        builder.addAlternate(alternate);\n      }\n    }\n\n    if (that instanceof UnionType) {\n      for (JSType otherAlternate : ((UnionType) that).alternates) {\n        if (otherAlternate.isSubtype(this)) {\n          builder.addAlternate(otherAlternate);\n        }\n      }\n    } else if (that.isSubtype(this)) {\n      builder.addAlternate(that);\n    }\n    JSType result = builder.build();\n    if (result != null) {\n      return result;\n    } else if (this.isObject() && that.isObject()) {\n      return getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n    } else {\n      return getNativeType(JSTypeNative.NO_TYPE);\n    }\n  }", "equals": "\n  public boolean equals(Object object) {\n    if (object instanceof UnionType) {\n      UnionType that = (UnionType) object;\n      return alternates.equals(that.alternates);\n    } else {\n      return false;\n    }\n  }", "hashCode": "\n  public int hashCode() {\n    return alternates.hashCode();\n  }", "isUnionType": "\n  public boolean isUnionType() {\n    return true;\n  }", "isObject": "\n  public boolean isObject() {\n    for (JSType alternate : alternates) {\n      if (!alternate.isObject()) {\n        return false;\n      }\n    }\n    return true;\n  }", "contains": "\n  public boolean contains(JSType alternate) {\n    return alternates.contains(alternate);\n  }", "getRestrictedUnion": "\n  public JSType getRestrictedUnion(JSType type) {\n    UnionTypeBuilder restricted = new UnionTypeBuilder(registry);\n    for (JSType t : alternates) {\n      if (t.isUnknownType() || !t.isSubtype(type)) {\n        restricted.addAlternate(t);\n      }\n    }\n    return restricted.build();\n  }", "toString": "\n  @Override public String toString() {\n    StringBuilder result = new StringBuilder();\n    boolean firstAlternate = true;\n\n    result.append(\"(\");\n    SortedSet<JSType> sorted = new TreeSet<JSType>(ALPHA);\n    sorted.addAll(alternates);\n    for (JSType t : sorted) {\n      if (!firstAlternate) {\n        result.append(\"|\");\n      }\n      result.append(t.toString());\n      firstAlternate = false;\n    }\n    result.append(\")\");\n    return result.toString();\n  }", "isSubtype": "\n  public boolean isSubtype(JSType that) {\n    for (JSType element : alternates) {\n      if (!element.isSubtype(that)) {\n        return false;\n      }\n    }\n    return true;\n  }", "getRestrictedTypeGivenToBooleanOutcome": "\n  public JSType getRestrictedTypeGivenToBooleanOutcome(boolean outcome) {\n    // gather elements after restriction\n    UnionTypeBuilder restricted = new UnionTypeBuilder(registry);\n    for (JSType element : alternates) {\n      restricted.addAlternate(\n          element.getRestrictedTypeGivenToBooleanOutcome(outcome));\n    }\n    return restricted.build();\n  }", "getPossibleToBooleanOutcomes": "\n  public BooleanLiteralSet getPossibleToBooleanOutcomes() {\n    BooleanLiteralSet literals = BooleanLiteralSet.EMPTY;\n    for (JSType element : alternates) {\n      literals = literals.union(element.getPossibleToBooleanOutcomes());\n      if (literals == BooleanLiteralSet.BOTH) {\n        break;\n      }\n    }\n    return literals;\n  }", "getTypesUnderEquality": "\n  public TypePair getTypesUnderEquality(JSType that) {\n    UnionTypeBuilder thisRestricted = new UnionTypeBuilder(registry);\n    UnionTypeBuilder thatRestricted = new UnionTypeBuilder(registry);\n    for (JSType element : alternates) {\n      TypePair p = element.getTypesUnderEquality(that);\n      if (p.typeA != null) {\n        thisRestricted.addAlternate(p.typeA);\n      }\n      if (p.typeB != null) {\n        thatRestricted.addAlternate(p.typeB);\n      }\n    }\n    return new TypePair(\n        thisRestricted.build(),\n        thatRestricted.build());\n  }", "getTypesUnderInequality": "\n  public TypePair getTypesUnderInequality(JSType that) {\n    UnionTypeBuilder thisRestricted = new UnionTypeBuilder(registry);\n    UnionTypeBuilder thatRestricted = new UnionTypeBuilder(registry);\n    for (JSType element : alternates) {\n      TypePair p = element.getTypesUnderInequality(that);\n      if (p.typeA != null) {\n        thisRestricted.addAlternate(p.typeA);\n      }\n      if (p.typeB != null) {\n        thatRestricted.addAlternate(p.typeB);\n      }\n    }\n    return new TypePair(\n        thisRestricted.build(),\n        thatRestricted.build());\n  }", "getTypesUnderShallowInequality": "\n  public TypePair getTypesUnderShallowInequality(JSType that) {\n    UnionTypeBuilder thisRestricted = new UnionTypeBuilder(registry);\n    UnionTypeBuilder thatRestricted = new UnionTypeBuilder(registry);\n    for (JSType element : alternates) {\n      TypePair p = element.getTypesUnderShallowInequality(that);\n      if (p.typeA != null) {\n        thisRestricted.addAlternate(p.typeA);\n      }\n      if (p.typeB != null) {\n        thatRestricted.addAlternate(p.typeB);\n      }\n    }\n    return new TypePair(\n        thisRestricted.build(),\n        thatRestricted.build());\n  }", "visit": "\n  public <T> T visit(Visitor<T> visitor) {\n    return visitor.caseUnionType(this);\n  }", "resolveInternal": "\n  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {\n    setResolvedTypeInternal(this); // for circularly defined types.\n\n    boolean changed = false;\n    ImmutableSet.Builder<JSType> resolvedTypes = ImmutableSet.builder();\n    for (JSType alternate : alternates) {\n      JSType newAlternate = alternate.resolve(t, scope);\n      changed |= (alternate != newAlternate);\n      resolvedTypes.add(alternate);\n    }\n    if (changed) {\n      alternates = resolvedTypes.build();\n    }\n    return this;\n  }"}