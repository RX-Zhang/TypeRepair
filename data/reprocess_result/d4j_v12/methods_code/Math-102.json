{"chiSquare": "\n    public double chiSquare(double[] expected, long[] observed)\n        throws IllegalArgumentException {\n        if ((expected.length < 2) || (expected.length != observed.length)) {\n            throw new IllegalArgumentException(\n                    \"observed, expected array lengths incorrect\");\n        }\n        if (!isPositive(expected) || !isNonNegative(observed)) {\n            throw new IllegalArgumentException(\n                \"observed counts must be non-negative and expected counts must be postive\");\n        }\n        double sumSq = 0.0d;\n        double dev = 0.0d;\n        for (int i = 0; i < observed.length; i++) {\n                dev = ((double) observed[i] - expected[i]);\n                sumSq += dev * dev / expected[i];\n        }\n        return sumSq;\n    }", "chiSquareTest": "\n    public double chiSquareTest(double[] expected, long[] observed)\n        throws IllegalArgumentException, MathException {\n        distribution.setDegreesOfFreedom(expected.length - 1.0);\n        return 1.0 - distribution.cumulativeProbability(\n            chiSquare(expected, observed));\n    }", "chiSquareDataSetsComparison": "\n    public double chiSquareDataSetsComparison(long[] observed1, long[] observed2)\n        throws IllegalArgumentException {\n        \n        // Make sure lengths are same\n        if ((observed1.length < 2) || (observed1.length != observed2.length)) {\n            throw new IllegalArgumentException(\n                    \"oberved1, observed2 array lengths incorrect\");\n        }\n        // Ensure non-negative counts\n        if (!isNonNegative(observed1) || !isNonNegative(observed2)) {\n            throw new IllegalArgumentException(\n                \"observed counts must be non-negative\");\n        }\n        // Compute and compare count sums\n        long countSum1 = 0;\n        long countSum2 = 0;\n        boolean unequalCounts = false;\n        double weight = 0.0;\n        for (int i = 0; i < observed1.length; i++) {\n            countSum1 += observed1[i];\n            countSum2 += observed2[i];   \n        }\n        // Ensure neither sample is uniformly 0\n        if (countSum1 * countSum2 == 0) {\n            throw new IllegalArgumentException(\n             \"observed counts cannot all be 0\"); \n        }\n        // Compare and compute weight only if different\n        unequalCounts = (countSum1 != countSum2);\n        if (unequalCounts) {\n            weight = Math.sqrt((double) countSum1 / (double) countSum2);\n        }\n        // Compute ChiSquare statistic\n        double sumSq = 0.0d;\n        double dev = 0.0d;\n        double obs1 = 0.0d;\n        double obs2 = 0.0d;\n        for (int i = 0; i < observed1.length; i++) {\n            if (observed1[i] == 0 && observed2[i] == 0) {\n                throw new IllegalArgumentException(\n                        \"observed counts must not both be zero\");\n            } else {\n                obs1 = (double) observed1[i];\n                obs2 = (double) observed2[i];\n                if (unequalCounts) { // apply weights\n                    dev = obs1/weight - obs2 * weight;\n                } else {\n                    dev = obs1 - obs2;\n                }\n                sumSq += (dev * dev) / (obs1 + obs2);\n            }\n        }\n        return sumSq;\n    }", "chiSquareTestDataSetsComparison": "\n    public double chiSquareTestDataSetsComparison(long[] observed1, long[] observed2)\n        throws IllegalArgumentException, MathException {\n        distribution.setDegreesOfFreedom((double) observed1.length - 1);\n        return 1 - distribution.cumulativeProbability(\n                chiSquareDataSetsComparison(observed1, observed2));\n    }", "checkArray": "\n    private void checkArray(long[][] in) throws IllegalArgumentException {\n        \n        if (in.length < 2) {\n            throw new IllegalArgumentException(\"Input table must have at least two rows\");\n        }\n        \n        if (in[0].length < 2) {\n            throw new IllegalArgumentException(\"Input table must have at least two columns\");\n        }    \n        \n        if (!isRectangular(in)) {\n            throw new IllegalArgumentException(\"Input table must be rectangular\");\n        }\n        \n        if (!isNonNegative(in)) {\n            throw new IllegalArgumentException(\"All entries in input 2-way table must be non-negative\");\n        }\n        \n    }", "getDistributionFactory": "\n    protected DistributionFactory getDistributionFactory() {\n        return DistributionFactory.newInstance();\n    }", "isRectangular": "\n    private boolean isRectangular(long[][] in) {\n        for (int i = 1; i < in.length; i++) {\n            if (in[i].length != in[0].length) {\n                return false;\n            }\n        }  \n        return true;\n    }", "isPositive": "\n    private boolean isPositive(double[] in) {\n        for (int i = 0; i < in.length; i ++) {\n            if (in[i] <= 0) {\n                return false;\n            }\n        }\n        return true;\n    }", "isNonNegative": "\n    private boolean isNonNegative(long[] in) {\n        for (int i = 0; i < in.length; i ++) {\n            if (in[i] < 0) {\n                return false;\n            }\n        }\n        return true;\n    }", "setDistribution": "\n    public void setDistribution(ChiSquaredDistribution value) {\n        distribution = value;\n    }"}