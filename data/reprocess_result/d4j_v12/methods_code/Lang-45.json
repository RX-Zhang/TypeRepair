{"wrap": "\n    public static String wrap(String str, int wrapLength) {\n        return wrap(str, wrapLength, null, false);\n    }", "capitalize": "\n    public static String capitalize(String str) {\n        return capitalize(str, null);\n    }", "capitalizeFully": "\n    public static String capitalizeFully(String str) {\n        return capitalizeFully(str, null);\n    }", "uncapitalize": "\n    public static String uncapitalize(String str) {\n        return uncapitalize(str, null);\n    }", "swapCase": "\n    public static String swapCase(String str) {\n        int strLen;\n        if (str == null || (strLen = str.length()) == 0) {\n            return str;\n        }\n        StringBuffer buffer = new StringBuffer(strLen);\n\n        boolean whitespace = true;\n        char ch = 0;\n        char tmp = 0;\n\n        for (int i = 0; i < strLen; i++) {\n            ch = str.charAt(i);\n            if (Character.isUpperCase(ch)) {\n                tmp = Character.toLowerCase(ch);\n            } else if (Character.isTitleCase(ch)) {\n                tmp = Character.toLowerCase(ch);\n            } else if (Character.isLowerCase(ch)) {\n                if (whitespace) {\n                    tmp = Character.toTitleCase(ch);\n                } else {\n                    tmp = Character.toUpperCase(ch);\n                }\n            } else {\n                tmp = ch;\n            }\n            buffer.append(tmp);\n            whitespace = Character.isWhitespace(ch);\n        }\n        return buffer.toString();\n    }", "initials": "\n    public static String initials(String str) {\n        return initials(str, null);\n    }", "isDelimiter": "\n    private static boolean isDelimiter(char ch, char[] delimiters) {\n        if (delimiters == null) {\n            return Character.isWhitespace(ch);\n        }\n        for (int i = 0, isize = delimiters.length; i < isize; i++) {\n            if (ch == delimiters[i]) {\n                return true;\n            }\n        }\n        return false;\n    }", "abbreviate": "\n    public static String abbreviate(String str, int lower, int upper, String appendToEnd) {\n        // initial parameter checks\n        if (str == null) {\n            return null;\n        }\n        if (str.length() == 0) {\n            return StringUtils.EMPTY;\n        }\n\n        // if the lower value is greater than the length of the string,\n        // set to the length of the string\n        // if the upper value is -1 (i.e. no limit) or is greater\n        // than the length of the string, set to the length of the string\n        if (upper == -1 || upper > str.length()) {\n            upper = str.length();\n        }\n        // if upper is less than lower, raise it to lower\n        if (upper < lower) {\n            upper = lower;\n        }\n\n        StringBuffer result = new StringBuffer();\n        int index = StringUtils.indexOf(str, \" \", lower);\n        if (index == -1) {\n            result.append(str.substring(0, upper));\n            // only if abbreviation has occured do we append the appendToEnd value\n            if (upper != str.length()) {\n                result.append(StringUtils.defaultString(appendToEnd));\n            }\n        } else if (index > upper) {\n            result.append(str.substring(0, upper));\n            result.append(StringUtils.defaultString(appendToEnd));\n        } else {\n            result.append(str.substring(0, index));\n            result.append(StringUtils.defaultString(appendToEnd));\n        }\n        return result.toString();\n    }"}