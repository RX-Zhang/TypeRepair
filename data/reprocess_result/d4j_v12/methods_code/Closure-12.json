{"equals": "\n    public boolean equals(Object other) {\n      return (other instanceof ReachingUses) &&\n          ((ReachingUses) other).mayUseMap.equals(this.mayUseMap);\n    }", "hashCode": "\n    public int hashCode() {\n      return mayUseMap.hashCode();\n    }", "apply": "\n    public ReachingUses apply(List<ReachingUses> from) {\n      ReachingUses result = new ReachingUses();\n      for (ReachingUses uses : from) {\n        result.mayUseMap.putAll(uses.mayUseMap);\n      }\n      return result;\n    }", "isForward": "\n  boolean isForward() {\n    return false;\n  }", "createEntryLattice": "\n  ReachingUses createEntryLattice() {\n    return new ReachingUses();\n  }", "createInitialEstimateLattice": "\n  ReachingUses createInitialEstimateLattice() {\n    return new ReachingUses();\n  }", "flowThrough": "\n  ReachingUses flowThrough(Node n, ReachingUses input) {\n    ReachingUses output = new ReachingUses(input);\n\n    // If there's an ON_EX edge, this cfgNode may or may not get executed.\n    // We can express this concisely by just pretending this happens in\n    // a conditional.\n    boolean conditional = hasExceptionHandler(n);\n    computeMayUse(n, n, output, conditional);\n\n    return output;\n  }", "hasExceptionHandler": "\n  private boolean hasExceptionHandler(Node cfgNode) {\n    return false;\n  }", "computeMayUse": "\n  private void computeMayUse(\n      Node n, Node cfgNode, ReachingUses output, boolean conditional) {\n    switch (n.getType()) {\n\n      case Token.BLOCK:\n      case Token.FUNCTION:\n        return;\n\n      case Token.NAME:\n        addToUseIfLocal(n.getString(), cfgNode, output);\n        return;\n\n      case Token.WHILE:\n      case Token.DO:\n      case Token.IF:\n        computeMayUse(\n            NodeUtil.getConditionExpression(n), cfgNode, output, conditional);\n        return;\n\n      case Token.FOR:\n        if (!NodeUtil.isForIn(n)) {\n          computeMayUse(\n              NodeUtil.getConditionExpression(n), cfgNode, output, conditional);\n        } else {\n          // for(x in y) {...}\n          Node lhs = n.getFirstChild();\n          Node rhs = lhs.getNext();\n          if (lhs.isVar()) {\n            lhs = lhs.getLastChild(); // for(var x in y) {...}\n          }\n          if (lhs.isName() && !conditional) {\n            removeFromUseIfLocal(lhs.getString(), output);\n          }\n          computeMayUse(rhs, cfgNode, output, conditional);\n        }\n        return;\n\n      case Token.AND:\n      case Token.OR:\n        computeMayUse(n.getLastChild(), cfgNode, output, true);\n        computeMayUse(n.getFirstChild(), cfgNode, output, conditional);\n        return;\n\n      case Token.HOOK:\n        computeMayUse(n.getLastChild(), cfgNode, output, true);\n        computeMayUse(n.getFirstChild().getNext(), cfgNode, output, true);\n        computeMayUse(n.getFirstChild(), cfgNode, output, conditional);\n        return;\n\n      case Token.VAR:\n        Node varName = n.getFirstChild();\n        Preconditions.checkState(n.hasChildren(), \"AST should be normalized\");\n\n        if (varName.hasChildren()) {\n          computeMayUse(varName.getFirstChild(), cfgNode, output, conditional);\n          if (!conditional) {\n            removeFromUseIfLocal(varName.getString(), output);\n          }\n        }\n        return;\n\n      default:\n        if (NodeUtil.isAssignmentOp(n) && n.getFirstChild().isName()) {\n          Node name = n.getFirstChild();\n          if (!conditional) {\n            removeFromUseIfLocal(name.getString(), output);\n          }\n\n          // In case of a += \"Hello\". There is a read of a.\n          if (!n.isAssign()) {\n            addToUseIfLocal(name.getString(), cfgNode, output);\n          }\n\n          computeMayUse(name.getNext(), cfgNode, output, conditional);\n        } else {\n          /*\n           * We want to traverse in reverse order because we want the LAST\n           * definition in the sub-tree....\n           * But we have no better way to traverse in reverse other :'(\n           */\n          for (Node c = n.getLastChild(); c != null; c = n.getChildBefore(c)) {\n            computeMayUse(c, cfgNode, output, conditional);\n          }\n        }\n    }\n  }", "addToUseIfLocal": "\n  private void addToUseIfLocal(String name, Node node, ReachingUses use) {\n    Var var = jsScope.getVar(name);\n    if (var == null || var.scope != jsScope) {\n      return;\n    }\n    if (!escaped.contains(var)) {\n      use.mayUseMap.put(var, node);\n    }\n  }", "removeFromUseIfLocal": "\n  private void removeFromUseIfLocal(String name, ReachingUses use) {\n    Var var = jsScope.getVar(name);\n    if (var == null || var.scope != jsScope) {\n      return;\n    }\n    if (!escaped.contains(var)) {\n      use.mayUseMap.removeAll(var);\n    }\n  }", "getUses": "\n  Collection<Node> getUses(String name, Node defNode) {\n    GraphNode<Node, Branch> n = getCfg().getNode(defNode);\n    Preconditions.checkNotNull(n);\n    FlowState<ReachingUses> state = n.getAnnotation();\n    return state.getOut().mayUseMap.get(jsScope.getVar(name));\n  }"}