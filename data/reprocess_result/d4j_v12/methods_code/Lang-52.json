{"escapeJava": "\n    public static String escapeJava(String str) {\n        return escapeJavaStyleString(str, false);\n    }", "escapeJavaScript": "\n    public static String escapeJavaScript(String str) {\n        return escapeJavaStyleString(str, true);\n    }", "escapeJavaStyleString": "\n    private static String escapeJavaStyleString(String str, boolean escapeSingleQuotes) {\n        if (str == null) {\n            return null;\n        }\n        try {\n            StringWriter writer = new StringWriter(str.length() * 2);\n            escapeJavaStyleString(writer, str, escapeSingleQuotes);\n            return writer.toString();\n        } catch (IOException ioe) {\n            // this should never ever happen while writing to a StringWriter\n            ioe.printStackTrace();\n            return null;\n        }\n    }", "hex": "\n    private static String hex(char ch) {\n        return Integer.toHexString(ch).toUpperCase();\n    }", "unescapeJava": "\n    public static String unescapeJava(String str) {\n        if (str == null) {\n            return null;\n        }\n        try {\n            StringWriter writer = new StringWriter(str.length());\n            unescapeJava(writer, str);\n            return writer.toString();\n        } catch (IOException ioe) {\n            // this should never ever happen while writing to a StringWriter\n            ioe.printStackTrace();\n            return null;\n        }\n    }", "unescapeJavaScript": "\n    public static String unescapeJavaScript(String str) {\n        return unescapeJava(str);\n    }", "escapeHtml": "\n    public static String escapeHtml(String str) {\n        if (str == null) {\n            return null;\n        }\n        try {\n            StringWriter writer = new StringWriter ((int)(str.length() * 1.5));\n            escapeHtml(writer, str);\n            return writer.toString();\n        } catch (IOException e) {\n            //assert false;\n            //should be impossible\n            e.printStackTrace();\n            return null;\n        }\n    }", "unescapeHtml": "\n    public static String unescapeHtml(String str) {\n        if (str == null) {\n            return null;\n        }\n        try {\n            StringWriter writer = new StringWriter ((int)(str.length() * 1.5));\n            unescapeHtml(writer, str);\n            return writer.toString();\n        } catch (IOException e) {\n            //assert false;\n            //should be impossible\n            e.printStackTrace();\n            return null;\n        }\n    }", "escapeXml": "\n    public static void escapeXml(Writer writer, String str) throws IOException {\n        if (writer == null ) {\n            throw new IllegalArgumentException (\"The Writer must not be null.\");\n        }\n        if (str == null) {\n            return;\n        }\n        Entities.XML.escape(writer, str);\n    }", "unescapeXml": "\n    public static void unescapeXml(Writer writer, String str) throws IOException {\n        if (writer == null ) {\n            throw new IllegalArgumentException (\"The Writer must not be null.\");\n        }\n        if (str == null) {\n            return;\n        }\n        Entities.XML.unescape(writer, str);\n    }", "escapeSql": "\n    public static String escapeSql(String str) {\n        if (str == null) {\n            return null;\n        }\n        return StringUtils.replace(str, \"'\", \"''\");\n    }"}