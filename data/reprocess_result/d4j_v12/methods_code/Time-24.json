{"getChronology": "\n    public Chronology getChronology() {\n        return iChrono;\n    }", "getLocale": "\n    public Locale getLocale() {\n        return iLocale;\n    }", "getZone": "\n    public DateTimeZone getZone() {\n        return iZone;\n    }", "setZone": "\n    public void setZone(DateTimeZone zone) {\n        iSavedState = null;\n        iZone = zone == DateTimeZone.UTC ? null : zone;\n        iOffset = 0;\n    }", "getOffset": "\n    public int getOffset() {\n        return iOffset;\n    }", "setOffset": "\n    public void setOffset(int offset) {\n        iSavedState = null;\n        iOffset = offset;\n        iZone = null;\n    }", "getPivotYear": "\n    public Integer getPivotYear() {\n        return iPivotYear;\n    }", "setPivotYear": "\n    public void setPivotYear(Integer pivotYear) {\n        iPivotYear = pivotYear;\n    }", "saveField": "\n    public void saveField(DateTimeField field, int value) {\n        saveField(new SavedField(field, value));\n    }", "saveState": "\n    public Object saveState() {\n        if (iSavedState == null) {\n            iSavedState = new SavedState();\n        }\n        return iSavedState;\n    }", "restoreState": "\n    public boolean restoreState(Object savedState) {\n        if (savedState instanceof SavedState) {\n            if (((SavedState) savedState).restoreState(this)) {\n                iSavedState = savedState;\n                return true;\n            }\n        }\n        return false;\n    }", "computeMillis": "\n    public long computeMillis() {\n        return computeMillis(false, null);\n    }", "sort": "\n    private static void sort(SavedField[] array, int high) {\n        if (high > 10) {\n            Arrays.sort(array, 0, high);\n        } else {\n            for (int i=0; i<high; i++) {\n                for (int j=i; j>0 && (array[j-1]).compareTo(array[j])>0; j--) {\n                    SavedField t = array[j];\n                    array[j] = array[j-1];\n                    array[j-1] = t;\n                }\n            }\n        }\n    }", "set": "\n        long set(long millis, boolean reset) {\n            if (iText == null) {\n                millis = iField.set(millis, iValue);\n            } else {\n                millis = iField.set(millis, iText, iLocale);\n            }\n            if (reset) {\n                millis = iField.roundFloor(millis);\n            }\n            return millis;\n        }", "compareTo": "\n        public int compareTo(SavedField obj) {\n            DateTimeField other = obj.iField;\n            int result = compareReverse\n                (iField.getRangeDurationField(), other.getRangeDurationField());\n            if (result != 0) {\n                return result;\n            }\n            return compareReverse\n                (iField.getDurationField(), other.getDurationField());\n        }", "compareReverse": "\n    static int compareReverse(DurationField a, DurationField b) {\n        if (a == null || !a.isSupported()) {\n            if (b == null || !b.isSupported()) {\n                return 0;\n            }\n            return -1;\n        }\n        if (b == null || !b.isSupported()) {\n            return 1;\n        }\n        return -a.compareTo(b);\n    }"}