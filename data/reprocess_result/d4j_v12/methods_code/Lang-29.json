{"getJavaHome": "\n    public static File getJavaHome() {\n        return new File(System.getProperty(JAVA_HOME_KEY));\n    }", "getJavaIoTmpDir": "\n    public static File getJavaIoTmpDir() {\n        return new File(System.getProperty(JAVA_IO_TMPDIR_KEY));\n    }", "getJavaVersionAsFloat": "\n    private static float getJavaVersionAsFloat() {\n        return toVersionFloat(toJavaVersionIntArray(SystemUtils.JAVA_VERSION, JAVA_VERSION_TRIM_SIZE));\n    }", "getJavaVersionAsInt": "\n    private static int getJavaVersionAsInt() {\n        return toVersionInt(toJavaVersionIntArray(SystemUtils.JAVA_VERSION, JAVA_VERSION_TRIM_SIZE));\n    }", "getJavaVersionMatches": "\n    private static boolean getJavaVersionMatches(String versionPrefix) {\n        return isJavaVersionMatch(JAVA_VERSION_TRIMMED, versionPrefix);\n    }", "getJavaVersionTrimmed": "\n    private static String getJavaVersionTrimmed() {\n        if (JAVA_VERSION != null) {\n            for (int i = 0; i < JAVA_VERSION.length(); i++) {\n                char ch = JAVA_VERSION.charAt(i);\n                if (ch >= '0' && ch <= '9') {\n                    return JAVA_VERSION.substring(i);\n                }\n            }\n        }\n        return null;\n    }", "getOSMatches": "\n    private static boolean getOSMatches(String osNamePrefix, String osVersionPrefix) {\n        return isOSMatch(OS_NAME, OS_VERSION, osNamePrefix, osVersionPrefix);\n    }", "getOSMatchesName": "\n    private static boolean getOSMatchesName(String osNamePrefix) {\n        return isOSNameMatch(OS_NAME, osNamePrefix);\n    }", "getSystemProperty": "\n    private static String getSystemProperty(String property) {\n        try {\n            return System.getProperty(property);\n        } catch (SecurityException ex) {\n            // we are not allowed to look at this property\n            System.err.println(\"Caught a SecurityException reading the system property '\" + property\n                    + \"'; the SystemUtils property value will default to null.\");\n            return null;\n        }\n    }", "getUserDir": "\n    public static File getUserDir() {\n        return new File(System.getProperty(USER_DIR_KEY));\n    }", "getUserHome": "\n    public static File getUserHome() {\n        return new File(System.getProperty(USER_HOME_KEY));\n    }", "isJavaAwtHeadless": "\n    public static boolean isJavaAwtHeadless() {\n        return JAVA_AWT_HEADLESS != null ? JAVA_AWT_HEADLESS.equals(Boolean.TRUE.toString()) : false;\n    }", "isJavaVersionAtLeast": "\n    public static boolean isJavaVersionAtLeast(float requiredVersion) {\n        return JAVA_VERSION_FLOAT >= requiredVersion;\n    }", "isJavaVersionMatch": "\n    static boolean isJavaVersionMatch(String version, String versionPrefix) {\n        if (version == null) {\n            return false;\n        }\n        return version.startsWith(versionPrefix);\n    }", "isOSMatch": "\n    static boolean isOSMatch(String osName, String osVersion, String osNamePrefix, String osVersionPrefix) {\n        if (osName == null || osVersion == null) {\n            return false;\n        }\n        return osName.startsWith(osNamePrefix) && osVersion.startsWith(osVersionPrefix);\n    }", "isOSNameMatch": "\n    static boolean isOSNameMatch(String osName, String osNamePrefix) {\n        if (osName == null) {\n            return false;\n        }\n        return osName.startsWith(osNamePrefix);\n    }", "toJavaVersionFloat": "\n    static float toJavaVersionFloat(String version) {\n        return toVersionFloat(toJavaVersionIntArray(version, JAVA_VERSION_TRIM_SIZE));\n    }", "toJavaVersionInt": "\n    static float toJavaVersionInt(String version) {\n        return toVersionInt(toJavaVersionIntArray(version, JAVA_VERSION_TRIM_SIZE));\n    }", "toJavaVersionIntArray": "\n    static int[] toJavaVersionIntArray(String version) {\n        return toJavaVersionIntArray(version, Integer.MAX_VALUE);\n    }", "toVersionFloat": "\n    private static float toVersionFloat(int[] javaVersions) {\n        if (javaVersions == null || javaVersions.length == 0) {\n            return 0f;\n        }\n        if (javaVersions.length == 1) {\n            return javaVersions[0];\n        }\n        StringBuilder builder = new StringBuilder();\n        builder.append(javaVersions[0]);\n        builder.append('.');\n        for (int i = 1; i < javaVersions.length; i++) {\n            builder.append(javaVersions[i]);\n        }\n        try {\n            return Float.parseFloat(builder.toString());\n        } catch (Exception ex) {\n            return 0f;\n        }\n    }", "toVersionInt": "\n    private static int toVersionInt(int[] javaVersions) {\n        if (javaVersions == null) {\n            return 0;\n        }\n        int intVersion = 0;\n        int len = javaVersions.length;\n        if (len >= 1) {\n            intVersion = javaVersions[0] * 100;\n        }\n        if (len >= 2) {\n            intVersion += javaVersions[1] * 10;\n        }\n        if (len >= 3) {\n            intVersion += javaVersions[2];\n        }\n        return intVersion;\n    }"}