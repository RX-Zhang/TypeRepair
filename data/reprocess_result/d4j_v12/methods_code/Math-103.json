{"getMean": "\n    public double getMean() {\n        return mean;\n    }", "setMean": "\n    public void setMean(double mean) {\n        this.mean = mean;\n    }", "getStandardDeviation": "\n    public double getStandardDeviation() {\n        return standardDeviation;\n    }", "setStandardDeviation": "\n    public void setStandardDeviation(double sd) {\n        if (sd <= 0.0) {\n            throw new IllegalArgumentException(\n                \"Standard deviation must be positive.\");\n        }       \n        standardDeviation = sd;\n    }", "cumulativeProbability": "\n    public double cumulativeProbability(double x) throws MathException {\n            return 0.5 * (1.0 + Erf.erf((x - mean) /\n                    (standardDeviation * Math.sqrt(2.0))));\n    }", "inverseCumulativeProbability": "\n    public double inverseCumulativeProbability(final double p) \n    throws MathException {\n        if (p == 0) {\n            return Double.NEGATIVE_INFINITY;\n        }\n        if (p == 1) {\n            return Double.POSITIVE_INFINITY;\n        }\n        return super.inverseCumulativeProbability(p);\n    }", "getDomainLowerBound": "\n    protected double getDomainLowerBound(double p) {\n        double ret;\n\n        if (p < .5) {\n            ret = -Double.MAX_VALUE;\n        } else {\n            ret = getMean();\n        }\n        \n        return ret;\n    }", "getDomainUpperBound": "\n    protected double getDomainUpperBound(double p) {\n        double ret;\n\n        if (p < .5) {\n            ret = getMean();\n        } else {\n            ret = Double.MAX_VALUE;\n        }\n        \n        return ret;\n    }", "getInitialDomain": "\n    protected double getInitialDomain(double p) {\n        double ret;\n\n        if (p < .5) {\n            ret = getMean() - getStandardDeviation();\n        } else if (p > .5) {\n            ret = getMean() + getStandardDeviation();\n        } else {\n            ret = getMean();\n        }\n        \n        return ret;\n    }"}