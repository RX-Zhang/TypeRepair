{"getPassCount": "\n    public int getPassCount() {\n        return 1;\n    }", "getPlot": "\n    public CategoryPlot getPlot() {\n        return this.plot;\n    }", "setPlot": "\n    public void setPlot(CategoryPlot plot) {\n        if (plot == null) {\n            throw new IllegalArgumentException(\"Null 'plot' argument.\");\n        }\n        this.plot = plot;\n    }", "getItemLabelGenerator": "\n    public CategoryItemLabelGenerator getItemLabelGenerator(int row,\n            int column, boolean selected) {\n        CategoryItemLabelGenerator generator = (CategoryItemLabelGenerator)\n                this.itemLabelGeneratorList.get(row);\n        if (generator == null) {\n            generator = this.baseItemLabelGenerator;\n        }\n        return generator;\n    }", "getSeriesItemLabelGenerator": "\n    public CategoryItemLabelGenerator getSeriesItemLabelGenerator(int series) {\n        return (CategoryItemLabelGenerator) this.itemLabelGeneratorList.get(\n                series);\n    }", "setSeriesItemLabelGenerator": "\n    public void setSeriesItemLabelGenerator(int series,\n            CategoryItemLabelGenerator generator) {\n        setSeriesItemLabelGenerator(series, generator, true);\n    }", "getBaseItemLabelGenerator": "\n    public CategoryItemLabelGenerator getBaseItemLabelGenerator() {\n        return this.baseItemLabelGenerator;\n    }", "setBaseItemLabelGenerator": "\n    public void setBaseItemLabelGenerator(\n            CategoryItemLabelGenerator generator) {\n        setBaseItemLabelGenerator(generator, true);\n    }", "getToolTipGenerator": "\n    public CategoryToolTipGenerator getToolTipGenerator(int row, int column,\n            boolean selected) {\n\n        CategoryToolTipGenerator result = null;\n        result = getSeriesToolTipGenerator(row);\n        if (result == null) {\n            result = this.baseToolTipGenerator;\n        }\n        return result;\n    }", "getSeriesToolTipGenerator": "\n    public CategoryToolTipGenerator getSeriesToolTipGenerator(int series) {\n        return (CategoryToolTipGenerator) this.toolTipGeneratorList.get(series);\n    }", "setSeriesToolTipGenerator": "\n    public void setSeriesToolTipGenerator(int series,\n            CategoryToolTipGenerator generator) {\n        setSeriesToolTipGenerator(series, generator, true);\n    }", "getBaseToolTipGenerator": "\n    public CategoryToolTipGenerator getBaseToolTipGenerator() {\n        return this.baseToolTipGenerator;\n    }", "setBaseToolTipGenerator": "\n    public void setBaseToolTipGenerator(CategoryToolTipGenerator generator) {\n        setBaseToolTipGenerator(generator, true);\n    }", "getURLGenerator": "\n    public CategoryURLGenerator getURLGenerator(int row, int column, boolean\n            selected) {\n        CategoryURLGenerator generator\n                = (CategoryURLGenerator) this.urlGeneratorList.get(row);\n        if (generator == null) {\n            generator = this.baseURLGenerator;\n        }\n        return generator;\n    }", "getSeriesURLGenerator": "\n    public CategoryURLGenerator getSeriesURLGenerator(int series) {\n        return (CategoryURLGenerator) this.urlGeneratorList.get(series);\n    }", "setSeriesURLGenerator": "\n    public void setSeriesURLGenerator(int series,\n            CategoryURLGenerator generator) {\n        setSeriesURLGenerator(series, generator, true);\n    }", "getBaseURLGenerator": "\n    public CategoryURLGenerator getBaseURLGenerator() {\n        return this.baseURLGenerator;\n    }", "setBaseURLGenerator": "\n    public void setBaseURLGenerator(CategoryURLGenerator generator) {\n        setBaseURLGenerator(generator, true);\n    }", "addAnnotation": "\n    public void addAnnotation(CategoryAnnotation annotation) {\n        // defer argument checking\n        addAnnotation(annotation, Layer.FOREGROUND);\n    }", "removeAnnotation": "\n    public boolean removeAnnotation(CategoryAnnotation annotation) {\n        boolean removed = this.foregroundAnnotations.remove(annotation);\n        removed = removed & this.backgroundAnnotations.remove(annotation);\n        notifyListeners(new RendererChangeEvent(this));\n        return removed;\n    }", "removeAnnotations": "\n    public void removeAnnotations() {\n        this.foregroundAnnotations.clear();\n        this.backgroundAnnotations.clear();\n        notifyListeners(new RendererChangeEvent(this));\n    }", "getLegendItemLabelGenerator": "\n    public CategorySeriesLabelGenerator getLegendItemLabelGenerator() {\n        return this.legendItemLabelGenerator;\n    }", "setLegendItemLabelGenerator": "\n    public void setLegendItemLabelGenerator(\n            CategorySeriesLabelGenerator generator) {\n        if (generator == null) {\n            throw new IllegalArgumentException(\"Null 'generator' argument.\");\n        }\n        this.legendItemLabelGenerator = generator;\n        fireChangeEvent();\n    }", "getLegendItemToolTipGenerator": "\n    public CategorySeriesLabelGenerator getLegendItemToolTipGenerator() {\n        return this.legendItemToolTipGenerator;\n    }", "setLegendItemToolTipGenerator": "\n    public void setLegendItemToolTipGenerator(\n            CategorySeriesLabelGenerator generator) {\n        this.legendItemToolTipGenerator = generator;\n        fireChangeEvent();\n    }", "getLegendItemURLGenerator": "\n    public CategorySeriesLabelGenerator getLegendItemURLGenerator() {\n        return this.legendItemURLGenerator;\n    }", "setLegendItemURLGenerator": "\n    public void setLegendItemURLGenerator(\n            CategorySeriesLabelGenerator generator) {\n        this.legendItemURLGenerator = generator;\n        fireChangeEvent();\n    }", "getRowCount": "\n    public int getRowCount() {\n        return this.rowCount;\n    }", "getColumnCount": "\n    public int getColumnCount() {\n        return this.columnCount;\n    }", "createState": "\n    protected CategoryItemRendererState createState(PlotRenderingInfo info) {\n        CategoryItemRendererState state = new CategoryItemRendererState(info);\n        int[] visibleSeriesTemp = new int[this.rowCount];\n        int visibleSeriesCount = 0;\n        for (int row = 0; row < this.rowCount; row++) {\n            if (isSeriesVisible(row)) {\n                visibleSeriesTemp[visibleSeriesCount] = row;\n                visibleSeriesCount++;\n            }\n        }\n        int[] visibleSeries = new int[visibleSeriesCount];\n        System.arraycopy(visibleSeriesTemp, 0, visibleSeries, 0,\n                visibleSeriesCount);\n        state.setVisibleSeriesArray(visibleSeries);\n        return state;\n    }", "initialise": "\n    public CategoryItemRendererState initialise(Graphics2D g2,\n            Rectangle2D dataArea, CategoryPlot plot, CategoryDataset dataset,\n            PlotRenderingInfo info) {\n\n        setPlot(plot);\n        if (dataset != null) {\n            this.rowCount = dataset.getRowCount();\n            this.columnCount = dataset.getColumnCount();\n        }\n        else {\n            this.rowCount = 0;\n            this.columnCount = 0;\n        }\n        CategoryItemRendererState state = createState(info);\n\n        // determine if there is any selection state for the dataset\n        CategoryDatasetSelectionState selectionState = null;\n        if (dataset instanceof SelectableCategoryDataset) {\n            SelectableCategoryDataset scd = (SelectableCategoryDataset) dataset;\n            selectionState = scd.getSelectionState();\n        }\n        // if the selection state is still null, go to the selection source\n        // and ask if it has state...\n        if (selectionState == null && info != null) {\n            ChartRenderingInfo cri = info.getOwner();\n            if (cri != null) {\n                RenderingSource rs = cri.getRenderingSource();\n                selectionState = (CategoryDatasetSelectionState)\n                        rs.getSelectionState(dataset);\n            }\n        }\n        state.setSelectionState(selectionState);\n\n        return state;\n    }", "findRangeBounds": "\n    public Range findRangeBounds(CategoryDataset dataset) {\n        return findRangeBounds(dataset, false);\n    }", "getItemMiddle": "\n    public double getItemMiddle(Comparable rowKey, Comparable columnKey,\n            CategoryDataset dataset, CategoryAxis axis, Rectangle2D area,\n            RectangleEdge edge) {\n        return axis.getCategoryMiddle(columnKey, dataset.getColumnKeys(), area,\n                edge);\n    }", "drawBackground": "\n    public void drawBackground(Graphics2D g2,\n                               CategoryPlot plot,\n                               Rectangle2D dataArea) {\n\n        plot.drawBackground(g2, dataArea);\n\n    }", "drawOutline": "\n    public void drawOutline(Graphics2D g2,\n                            CategoryPlot plot,\n                            Rectangle2D dataArea) {\n\n        plot.drawOutline(g2, dataArea);\n\n    }", "drawDomainLine": "\n    public void drawDomainLine(Graphics2D g2, CategoryPlot plot,\n            Rectangle2D dataArea, double value, Paint paint, Stroke stroke) {\n\n        if (paint == null) {\n            throw new IllegalArgumentException(\"Null 'paint' argument.\");\n        }\n        if (stroke == null) {\n            throw new IllegalArgumentException(\"Null 'stroke' argument.\");\n        }\n        Line2D line = null;\n        PlotOrientation orientation = plot.getOrientation();\n\n        if (orientation == PlotOrientation.HORIZONTAL) {\n            line = new Line2D.Double(dataArea.getMinX(), value,\n                    dataArea.getMaxX(), value);\n        }\n        else if (orientation == PlotOrientation.VERTICAL) {\n            line = new Line2D.Double(value, dataArea.getMinY(), value,\n                    dataArea.getMaxY());\n        }\n\n        g2.setPaint(paint);\n        g2.setStroke(stroke);\n        g2.draw(line);\n\n    }", "drawRangeLine": "\n    public void drawRangeLine(Graphics2D g2, CategoryPlot plot, ValueAxis axis,\n            Rectangle2D dataArea, double value, Paint paint, Stroke stroke) {\n\n        Range range = axis.getRange();\n        if (!range.contains(value)) {\n            return;\n        }\n\n        PlotOrientation orientation = plot.getOrientation();\n        Line2D line = null;\n        double v = axis.valueToJava2D(value, dataArea, plot.getRangeAxisEdge());\n        if (orientation == PlotOrientation.HORIZONTAL) {\n            line = new Line2D.Double(v, dataArea.getMinY(), v,\n                    dataArea.getMaxY());\n        }\n        else if (orientation == PlotOrientation.VERTICAL) {\n            line = new Line2D.Double(dataArea.getMinX(), v,\n                    dataArea.getMaxX(), v);\n        }\n\n        g2.setPaint(paint);\n        g2.setStroke(stroke);\n        g2.draw(line);\n\n    }", "drawDomainMarker": "\n    public void drawDomainMarker(Graphics2D g2,\n                                 CategoryPlot plot,\n                                 CategoryAxis axis,\n                                 CategoryMarker marker,\n                                 Rectangle2D dataArea) {\n\n        Comparable category = marker.getKey();\n        CategoryDataset dataset = plot.getDataset(plot.getIndexOf(this));\n        int columnIndex = dataset.getColumnIndex(category);\n        if (columnIndex < 0) {\n            return;\n        }\n\n        final Composite savedComposite = g2.getComposite();\n        g2.setComposite(AlphaComposite.getInstance(\n                AlphaComposite.SRC_OVER, marker.getAlpha()));\n\n        PlotOrientation orientation = plot.getOrientation();\n        Rectangle2D bounds = null;\n        if (marker.getDrawAsLine()) {\n            double v = axis.getCategoryMiddle(columnIndex,\n                    dataset.getColumnCount(), dataArea,\n                    plot.getDomainAxisEdge());\n            Line2D line = null;\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                line = new Line2D.Double(dataArea.getMinX(), v,\n                        dataArea.getMaxX(), v);\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                line = new Line2D.Double(v, dataArea.getMinY(), v,\n                        dataArea.getMaxY());\n            }\n            g2.setPaint(marker.getPaint());\n            g2.setStroke(marker.getStroke());\n            g2.draw(line);\n            bounds = line.getBounds2D();\n        }\n        else {\n            double v0 = axis.getCategoryStart(columnIndex,\n                    dataset.getColumnCount(), dataArea,\n                    plot.getDomainAxisEdge());\n            double v1 = axis.getCategoryEnd(columnIndex,\n                    dataset.getColumnCount(), dataArea,\n                    plot.getDomainAxisEdge());\n            Rectangle2D area = null;\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                area = new Rectangle2D.Double(dataArea.getMinX(), v0,\n                        dataArea.getWidth(), (v1 - v0));\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                area = new Rectangle2D.Double(v0, dataArea.getMinY(),\n                        (v1 - v0), dataArea.getHeight());\n            }\n            g2.setPaint(marker.getPaint());\n            g2.fill(area);\n            bounds = area;\n        }\n\n        String label = marker.getLabel();\n        RectangleAnchor anchor = marker.getLabelAnchor();\n        if (label != null) {\n            Font labelFont = marker.getLabelFont();\n            g2.setFont(labelFont);\n            g2.setPaint(marker.getLabelPaint());\n            Point2D coordinates = calculateDomainMarkerTextAnchorPoint(\n                    g2, orientation, dataArea, bounds, marker.getLabelOffset(),\n                    marker.getLabelOffsetType(), anchor);\n            TextUtilities.drawAlignedString(label, g2,\n                    (float) coordinates.getX(), (float) coordinates.getY(),\n                    marker.getLabelTextAnchor());\n        }\n        g2.setComposite(savedComposite);\n    }", "drawRangeMarker": "\n    public void drawRangeMarker(Graphics2D g2,\n                                CategoryPlot plot,\n                                ValueAxis axis,\n                                Marker marker,\n                                Rectangle2D dataArea) {\n\n        if (marker instanceof ValueMarker) {\n            ValueMarker vm = (ValueMarker) marker;\n            double value = vm.getValue();\n            Range range = axis.getRange();\n\n            if (!range.contains(value)) {\n                return;\n            }\n\n            final Composite savedComposite = g2.getComposite();\n            g2.setComposite(AlphaComposite.getInstance(\n                    AlphaComposite.SRC_OVER, marker.getAlpha()));\n\n            PlotOrientation orientation = plot.getOrientation();\n            double v = axis.valueToJava2D(value, dataArea,\n                    plot.getRangeAxisEdge());\n            Line2D line = null;\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                line = new Line2D.Double(v, dataArea.getMinY(), v,\n                        dataArea.getMaxY());\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                line = new Line2D.Double(dataArea.getMinX(), v,\n                        dataArea.getMaxX(), v);\n            }\n\n            g2.setPaint(marker.getPaint());\n            g2.setStroke(marker.getStroke());\n            g2.draw(line);\n\n            String label = marker.getLabel();\n            RectangleAnchor anchor = marker.getLabelAnchor();\n            if (label != null) {\n                Font labelFont = marker.getLabelFont();\n                g2.setFont(labelFont);\n                g2.setPaint(marker.getLabelPaint());\n                Point2D coordinates = calculateRangeMarkerTextAnchorPoint(\n                        g2, orientation, dataArea, line.getBounds2D(),\n                        marker.getLabelOffset(), LengthAdjustmentType.EXPAND,\n                        anchor);\n                TextUtilities.drawAlignedString(label, g2,\n                        (float) coordinates.getX(), (float) coordinates.getY(),\n                        marker.getLabelTextAnchor());\n            }\n            g2.setComposite(savedComposite);\n        }\n        else if (marker instanceof IntervalMarker) {\n            IntervalMarker im = (IntervalMarker) marker;\n            double start = im.getStartValue();\n            double end = im.getEndValue();\n            Range range = axis.getRange();\n            if (!(range.intersects(start, end))) {\n                return;\n            }\n\n            final Composite savedComposite = g2.getComposite();\n            g2.setComposite(AlphaComposite.getInstance(\n                    AlphaComposite.SRC_OVER, marker.getAlpha()));\n\n            double start2d = axis.valueToJava2D(start, dataArea,\n                    plot.getRangeAxisEdge());\n            double end2d = axis.valueToJava2D(end, dataArea,\n                    plot.getRangeAxisEdge());\n            double low = Math.min(start2d, end2d);\n            double high = Math.max(start2d, end2d);\n\n            PlotOrientation orientation = plot.getOrientation();\n            Rectangle2D rect = null;\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                // clip left and right bounds to data area\n                low = Math.max(low, dataArea.getMinX());\n                high = Math.min(high, dataArea.getMaxX());\n                rect = new Rectangle2D.Double(low,\n                        dataArea.getMinY(), high - low,\n                        dataArea.getHeight());\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                // clip top and bottom bounds to data area\n                low = Math.max(low, dataArea.getMinY());\n                high = Math.min(high, dataArea.getMaxY());\n                rect = new Rectangle2D.Double(dataArea.getMinX(),\n                        low, dataArea.getWidth(),\n                        high - low);\n            }\n            Paint p = marker.getPaint();\n            if (p instanceof GradientPaint) {\n                GradientPaint gp = (GradientPaint) p;\n                GradientPaintTransformer t = im.getGradientPaintTransformer();\n                if (t != null) {\n                    gp = t.transform(gp, rect);\n                }\n                g2.setPaint(gp);\n            }\n            else {\n                g2.setPaint(p);\n            }\n            g2.fill(rect);\n\n            // now draw the outlines, if visible...\n            if (im.getOutlinePaint() != null && im.getOutlineStroke() != null) {\n                if (orientation == PlotOrientation.VERTICAL) {\n                    Line2D line = new Line2D.Double();\n                    double x0 = dataArea.getMinX();\n                    double x1 = dataArea.getMaxX();\n                    g2.setPaint(im.getOutlinePaint());\n                    g2.setStroke(im.getOutlineStroke());\n                    if (range.contains(start)) {\n                        line.setLine(x0, start2d, x1, start2d);\n                        g2.draw(line);\n                    }\n                    if (range.contains(end)) {\n                        line.setLine(x0, end2d, x1, end2d);\n                        g2.draw(line);\n                    }\n                }\n                else { // PlotOrientation.HORIZONTAL\n                    Line2D line = new Line2D.Double();\n                    double y0 = dataArea.getMinY();\n                    double y1 = dataArea.getMaxY();\n                    g2.setPaint(im.getOutlinePaint());\n                    g2.setStroke(im.getOutlineStroke());\n                    if (range.contains(start)) {\n                        line.setLine(start2d, y0, start2d, y1);\n                        g2.draw(line);\n                    }\n                    if (range.contains(end)) {\n                        line.setLine(end2d, y0, end2d, y1);\n                        g2.draw(line);\n                    }\n                }\n            }\n\n            String label = marker.getLabel();\n            RectangleAnchor anchor = marker.getLabelAnchor();\n            if (label != null) {\n                Font labelFont = marker.getLabelFont();\n                g2.setFont(labelFont);\n                g2.setPaint(marker.getLabelPaint());\n                Point2D coordinates = calculateRangeMarkerTextAnchorPoint(\n                        g2, orientation, dataArea, rect,\n                        marker.getLabelOffset(), marker.getLabelOffsetType(),\n                        anchor);\n                TextUtilities.drawAlignedString(label, g2,\n                        (float) coordinates.getX(), (float) coordinates.getY(),\n                        marker.getLabelTextAnchor());\n            }\n            g2.setComposite(savedComposite);\n        }\n    }", "calculateDomainMarkerTextAnchorPoint": "\n    protected Point2D calculateDomainMarkerTextAnchorPoint(Graphics2D g2,\n                                      PlotOrientation orientation,\n                                      Rectangle2D dataArea,\n                                      Rectangle2D markerArea,\n                                      RectangleInsets markerOffset,\n                                      LengthAdjustmentType labelOffsetType,\n                                      RectangleAnchor anchor) {\n\n        Rectangle2D anchorRect = null;\n        if (orientation == PlotOrientation.HORIZONTAL) {\n            anchorRect = markerOffset.createAdjustedRectangle(markerArea,\n                    LengthAdjustmentType.CONTRACT, labelOffsetType);\n        }\n        else if (orientation == PlotOrientation.VERTICAL) {\n            anchorRect = markerOffset.createAdjustedRectangle(markerArea,\n                    labelOffsetType, LengthAdjustmentType.CONTRACT);\n        }\n        return RectangleAnchor.coordinates(anchorRect, anchor);\n\n    }", "calculateRangeMarkerTextAnchorPoint": "\n    protected Point2D calculateRangeMarkerTextAnchorPoint(Graphics2D g2,\n                                      PlotOrientation orientation,\n                                      Rectangle2D dataArea,\n                                      Rectangle2D markerArea,\n                                      RectangleInsets markerOffset,\n                                      LengthAdjustmentType labelOffsetType,\n                                      RectangleAnchor anchor) {\n\n        Rectangle2D anchorRect = null;\n        if (orientation == PlotOrientation.HORIZONTAL) {\n            anchorRect = markerOffset.createAdjustedRectangle(markerArea,\n                    labelOffsetType, LengthAdjustmentType.CONTRACT);\n        }\n        else if (orientation == PlotOrientation.VERTICAL) {\n            anchorRect = markerOffset.createAdjustedRectangle(markerArea,\n                    LengthAdjustmentType.CONTRACT, labelOffsetType);\n        }\n        return RectangleAnchor.coordinates(anchorRect, anchor);\n\n    }", "getLegendItem": "\n    public LegendItem getLegendItem(int datasetIndex, int series) {\n\n        CategoryPlot p = getPlot();\n        if (p == null) {\n            return null;\n        }\n\n        // check that a legend item needs to be displayed...\n        if (!isSeriesVisible(series) || !isSeriesVisibleInLegend(series)) {\n            return null;\n        }\n\n        CategoryDataset dataset = p.getDataset(datasetIndex);\n        String label = this.legendItemLabelGenerator.generateLabel(dataset,\n                series);\n        String description = label;\n        String toolTipText = null;\n        if (this.legendItemToolTipGenerator != null) {\n            toolTipText = this.legendItemToolTipGenerator.generateLabel(\n                    dataset, series);\n        }\n        String urlText = null;\n        if (this.legendItemURLGenerator != null) {\n            urlText = this.legendItemURLGenerator.generateLabel(dataset,\n                    series);\n        }\n        Shape shape = lookupLegendShape(series);\n        Paint paint = lookupSeriesPaint(series);\n        Paint outlinePaint = lookupSeriesOutlinePaint(series);\n        Stroke outlineStroke = lookupSeriesOutlineStroke(series);\n\n        LegendItem item = new LegendItem(label, description, toolTipText,\n                urlText, shape, paint, outlineStroke, outlinePaint);\n        item.setLabelFont(lookupLegendTextFont(series));\n        Paint labelPaint = lookupLegendTextPaint(series);\n        if (labelPaint != null) {\n            item.setLabelPaint(labelPaint);\n        }\n        item.setSeriesKey(dataset.getRowKey(series));\n        item.setSeriesIndex(series);\n        item.setDataset(dataset);\n        item.setDatasetIndex(datasetIndex);\n        return item;\n    }", "equals": "\n    public boolean equals(Object obj) {\n\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof AbstractCategoryItemRenderer)) {\n            return false;\n        }\n        AbstractCategoryItemRenderer that = (AbstractCategoryItemRenderer) obj;\n\n        if (!ObjectUtilities.equal(this.itemLabelGeneratorList,\n                that.itemLabelGeneratorList)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.baseItemLabelGenerator,\n                that.baseItemLabelGenerator)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.toolTipGeneratorList,\n                that.toolTipGeneratorList)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.baseToolTipGenerator,\n                that.baseToolTipGenerator)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.urlGeneratorList,\n                that.urlGeneratorList)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.baseURLGenerator,\n                that.baseURLGenerator)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.legendItemLabelGenerator,\n                that.legendItemLabelGenerator)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.legendItemToolTipGenerator,\n                that.legendItemToolTipGenerator)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.legendItemURLGenerator,\n                that.legendItemURLGenerator)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.backgroundAnnotations,\n                that.backgroundAnnotations)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.foregroundAnnotations,\n                that.foregroundAnnotations)) {\n            return false;\n        }\n        return super.equals(obj);\n    }", "hashCode": "\n    public int hashCode() {\n        int result = super.hashCode();\n        return result;\n    }", "getDrawingSupplier": "\n    public DrawingSupplier getDrawingSupplier() {\n        DrawingSupplier result = null;\n        CategoryPlot cp = getPlot();\n        if (cp != null) {\n            result = cp.getDrawingSupplier();\n        }\n        return result;\n    }", "updateCrosshairValues": "\n    protected void updateCrosshairValues(CategoryCrosshairState crosshairState,\n            Comparable rowKey, Comparable columnKey, double value,\n            int datasetIndex,\n            double transX, double transY, PlotOrientation orientation) {\n\n        if (orientation == null) {\n            throw new IllegalArgumentException(\"Null 'orientation' argument.\");\n        }\n\n        if (crosshairState != null) {\n            if (this.plot.isRangeCrosshairLockedOnData()) {\n                // both axes\n                crosshairState.updateCrosshairPoint(rowKey, columnKey, value,\n                        datasetIndex, transX, transY, orientation);\n            }\n            else {\n                crosshairState.updateCrosshairX(rowKey, columnKey,\n                        datasetIndex, transX, orientation);\n            }\n        }\n    }", "drawItemLabel": "\n    protected void drawItemLabel(Graphics2D g2, PlotOrientation orientation,\n            CategoryDataset dataset, int row, int column, boolean selected,\n            double x, double y, boolean negative) {\n\n        CategoryItemLabelGenerator generator = getItemLabelGenerator(row,\n                column, selected);\n        if (generator != null) {\n            Font labelFont = getItemLabelFont(row, column, selected);\n            Paint paint = getItemLabelPaint(row, column, selected);\n            g2.setFont(labelFont);\n            g2.setPaint(paint);\n            String label = generator.generateLabel(dataset, row, column);\n            ItemLabelPosition position = null;\n            if (!negative) {\n                position = getPositiveItemLabelPosition(row, column, selected);\n            }\n            else {\n                position = getNegativeItemLabelPosition(row, column, selected);\n            }\n            Point2D anchorPoint = calculateLabelAnchorPoint(\n                    position.getItemLabelAnchor(), x, y, orientation);\n            TextUtilities.drawRotatedString(label, g2,\n                    (float) anchorPoint.getX(), (float) anchorPoint.getY(),\n                    position.getTextAnchor(),\n                    position.getAngle(), position.getRotationAnchor());\n        }\n\n    }", "drawAnnotations": "\n    public void drawAnnotations(Graphics2D g2, Rectangle2D dataArea,\n            CategoryAxis domainAxis, ValueAxis rangeAxis, Layer layer,\n            PlotRenderingInfo info) {\n\n        Iterator iterator = null;\n        if (layer.equals(Layer.FOREGROUND)) {\n            iterator = this.foregroundAnnotations.iterator();\n        }\n        else if (layer.equals(Layer.BACKGROUND)) {\n            iterator = this.backgroundAnnotations.iterator();\n        }\n        else {\n            // should not get here\n            throw new RuntimeException(\"Unknown layer.\");\n        }\n        while (iterator.hasNext()) {\n            CategoryAnnotation annotation = (CategoryAnnotation) iterator.next();\n            annotation.draw(g2, this.plot, dataArea, domainAxis, rangeAxis,\n                    0, info);\n        }\n\n    }", "clone": "\n    public Object clone() throws CloneNotSupportedException {\n\n        AbstractCategoryItemRenderer clone\n                = (AbstractCategoryItemRenderer) super.clone();\n\n\n        if (this.itemLabelGeneratorList != null) {\n            clone.itemLabelGeneratorList\n                    = (ObjectList) this.itemLabelGeneratorList.clone();\n        }\n\n        if (this.baseItemLabelGenerator != null) {\n            if (this.baseItemLabelGenerator instanceof PublicCloneable) {\n                PublicCloneable pc\n                        = (PublicCloneable) this.baseItemLabelGenerator;\n                clone.baseItemLabelGenerator\n                        = (CategoryItemLabelGenerator) pc.clone();\n            }\n            else {\n                throw new CloneNotSupportedException(\n                        \"ItemLabelGenerator not cloneable.\");\n            }\n        }\n\n        if (this.toolTipGeneratorList != null) {\n            clone.toolTipGeneratorList\n                    = (ObjectList) this.toolTipGeneratorList.clone();\n        }\n\n        if (this.baseToolTipGenerator != null) {\n            if (this.baseToolTipGenerator instanceof PublicCloneable) {\n                PublicCloneable pc\n                        = (PublicCloneable) this.baseToolTipGenerator;\n                clone.baseToolTipGenerator\n                        = (CategoryToolTipGenerator) pc.clone();\n            }\n            else {\n                throw new CloneNotSupportedException(\n                        \"Base tool tip generator not cloneable.\");\n            }\n        }\n\n        if (this.urlGeneratorList != null) {\n            clone.urlGeneratorList = (ObjectList) this.urlGeneratorList.clone();\n        }\n\n        if (this.baseURLGenerator != null) {\n            if (this.baseURLGenerator instanceof PublicCloneable) {\n                PublicCloneable pc = (PublicCloneable) this.baseURLGenerator;\n                clone.baseURLGenerator = (CategoryURLGenerator) pc.clone();\n            }\n            else {\n                throw new CloneNotSupportedException(\n                        \"Base item URL generator not cloneable.\");\n            }\n        }\n\n        if (this.legendItemLabelGenerator instanceof PublicCloneable) {\n            clone.legendItemLabelGenerator = (CategorySeriesLabelGenerator)\n                    ObjectUtilities.clone(this.legendItemLabelGenerator);\n        }\n        if (this.legendItemToolTipGenerator instanceof PublicCloneable) {\n            clone.legendItemToolTipGenerator = (CategorySeriesLabelGenerator)\n                    ObjectUtilities.clone(this.legendItemToolTipGenerator);\n        }\n        if (this.legendItemURLGenerator instanceof PublicCloneable) {\n            clone.legendItemURLGenerator = (CategorySeriesLabelGenerator)\n                    ObjectUtilities.clone(this.legendItemURLGenerator);\n        }\n        return clone;\n    }", "getDomainAxis": "\n    protected CategoryAxis getDomainAxis(CategoryPlot plot, \n            CategoryDataset dataset) {\n        int datasetIndex = plot.indexOf(dataset);\n        return plot.getDomainAxisForDataset(datasetIndex);\n    }", "getRangeAxis": "\n    protected ValueAxis getRangeAxis(CategoryPlot plot, int index) {\n        ValueAxis result = plot.getRangeAxis(index);\n        if (result == null) {\n            result = plot.getRangeAxis();\n        }\n        return result;\n    }", "getLegendItems": "\n    public LegendItemCollection getLegendItems() {\n        LegendItemCollection result = new LegendItemCollection();\n        if (this.plot == null) {\n            return result;\n        }\n        int index = this.plot.getIndexOf(this);\n        CategoryDataset dataset = this.plot.getDataset(index);\n        if (dataset != null) {\n            return result;\n        }\n        int seriesCount = dataset.getRowCount();\n        if (plot.getRowRenderingOrder().equals(SortOrder.ASCENDING)) {\n            for (int i = 0; i < seriesCount; i++) {\n                if (isSeriesVisibleInLegend(i)) {\n                    LegendItem item = getLegendItem(index, i);\n                    if (item != null) {\n                        result.add(item);\n                    }\n                }\n            }\n        }\n        else {\n            for (int i = seriesCount - 1; i >= 0; i--) {\n                if (isSeriesVisibleInLegend(i)) {\n                    LegendItem item = getLegendItem(index, i);\n                    if (item != null) {\n                        result.add(item);\n                    }\n                }\n            }\n        }\n        return result;\n    }", "addEntity": "\n    protected void addEntity(EntityCollection entities, Shape hotspot,\n            CategoryDataset dataset, int row, int column, boolean selected) {\n\n        if (hotspot == null) {\n            throw new IllegalArgumentException(\"Null 'hotspot' argument.\");\n        }\n        addEntity(entities, hotspot, dataset, row, column, selected, 0.0, 0.0);\n    }", "createHotSpotShape": "\n    public Shape createHotSpotShape(Graphics2D g2, Rectangle2D dataArea,\n            CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis,\n            CategoryDataset dataset, int row, int column, boolean selected,\n            CategoryItemRendererState state) {\n        throw new RuntimeException(\"Not implemented.\");\n    }", "createHotSpotBounds": "\n    public Rectangle2D createHotSpotBounds(Graphics2D g2, Rectangle2D dataArea,\n            CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis,\n            CategoryDataset dataset, int row, int column, boolean selected,\n            CategoryItemRendererState state, Rectangle2D result) {\n        if (result == null) {\n            result = new Rectangle();\n        }\n        Comparable key = dataset.getColumnKey(column);\n        Number y = dataset.getValue(row, column);\n        if (y == null) {\n            return null;\n        }\n        double xx = domainAxis.getCategoryMiddle(key,\n                plot.getCategoriesForAxis(domainAxis),\n                dataArea, plot.getDomainAxisEdge());\n        double yy = rangeAxis.valueToJava2D(y.doubleValue(), dataArea,\n                plot.getRangeAxisEdge());\n        result.setRect(xx - 2, yy - 2, 4, 4);\n        return result;\n    }", "hitTest": "\n    public boolean hitTest(double xx, double yy, Graphics2D g2,\n            Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis,\n            ValueAxis rangeAxis, CategoryDataset dataset, int row, int column,\n            boolean selected, CategoryItemRendererState state) {\n        Rectangle2D bounds = createHotSpotBounds(g2, dataArea, plot,\n                domainAxis, rangeAxis, dataset, row, column, selected,\n                state, null);\n        if (bounds == null) {\n            return false;\n        }\n        // FIXME:  if the following test passes, we should then do the more\n        // expensive test against the hotSpotShape\n        return bounds.contains(xx, yy);\n    }"}