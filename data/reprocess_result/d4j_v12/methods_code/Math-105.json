{"addData": "\n    public void addData(double x, double y) {\n        if (n == 0) {\n            xbar = x;\n            ybar = y;\n        } else {\n            double dx = x - xbar;\n            double dy = y - ybar;\n            sumXX += dx * dx * (double) n / (double) (n + 1.0);\n            sumYY += dy * dy * (double) n / (double) (n + 1.0);\n            sumXY += dx * dy * (double) n / (double) (n + 1.0);\n            xbar += dx / (double) (n + 1.0);\n            ybar += dy / (double) (n + 1.0);\n        }\n        sumX += x;\n        sumY += y;\n        n++;\n    }", "clear": "\n    public void clear() {\n        sumX = 0d;\n        sumXX = 0d;\n        sumY = 0d;\n        sumYY = 0d;\n        sumXY = 0d;\n        n = 0;\n    }", "getN": "\n    public long getN() {\n        return n;\n    }", "predict": "\n    public double predict(double x) {\n        double b1 = getSlope();\n        return getIntercept(b1) + b1 * x;\n    }", "getIntercept": "\n    public double getIntercept() {\n        return getIntercept(getSlope());\n    }", "getSlope": "\n    public double getSlope() {\n        if (n < 2) {\n            return Double.NaN; //not enough data \n        }\n        if (Math.abs(sumXX) < 10 * Double.MIN_VALUE) {\n            return Double.NaN; //not enough variation in x\n        }\n        return sumXY / sumXX;\n    }", "getSumSquaredErrors": "\n    public double getSumSquaredErrors() {\n        return sumYY - sumXY * sumXY / sumXX;\n    }", "getTotalSumSquares": "\n    public double getTotalSumSquares() {\n        if (n < 2) {\n            return Double.NaN;\n        }\n        return sumYY;\n    }", "getRegressionSumSquares": "\n    public double getRegressionSumSquares() {\n        return getRegressionSumSquares(getSlope());\n    }", "getMeanSquareError": "\n    public double getMeanSquareError() {\n        if (n < 3) {\n            return Double.NaN;\n        }\n        return getSumSquaredErrors() / (double) (n - 2);\n    }", "getR": "\n    public double getR() {\n        double b1 = getSlope();\n        double result = Math.sqrt(getRSquare());\n        if (b1 < 0) {\n            result = -result;\n        }\n        return result;\n    }", "getRSquare": "\n    public double getRSquare() {\n        double ssto = getTotalSumSquares();\n        return (ssto - getSumSquaredErrors()) / ssto;\n    }", "getInterceptStdErr": "\n    public double getInterceptStdErr() {\n        return Math.sqrt(\n            getMeanSquareError() * ((1d / (double) n) + (xbar * xbar) / sumXX));\n    }", "getSlopeStdErr": "\n    public double getSlopeStdErr() {\n        return Math.sqrt(getMeanSquareError() / sumXX);\n    }", "getSlopeConfidenceInterval": "\n    public double getSlopeConfidenceInterval() throws MathException {\n        return getSlopeConfidenceInterval(0.05d);\n    }", "getSignificance": "\n    public double getSignificance() throws MathException {\n        return 2d* (1.0 - getTDistribution().cumulativeProbability(\n                    Math.abs(getSlope()) / getSlopeStdErr()));\n    }", "getTDistribution": "\n    private TDistribution getTDistribution() {\n        return DistributionFactory.newInstance().createTDistribution(n - 2);\n    }"}