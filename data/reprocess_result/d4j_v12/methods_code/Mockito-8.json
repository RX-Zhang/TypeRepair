{"registerTypeVariablesOn": "\n    protected void registerTypeVariablesOn(Type classType) {\n        if (!(classType instanceof ParameterizedType)) {\n            return;\n        }\n        ParameterizedType parameterizedType = (ParameterizedType) classType;\n        TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();\n        Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n        for (int i = 0; i < actualTypeArguments.length; i++) {\n            TypeVariable typeParameter = typeParameters[i];\n            Type actualTypeArgument = actualTypeArguments[i];\n\n            if (actualTypeArgument instanceof WildcardType) {\n                contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n            } else {\n                contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n            }\n            // logger.log(\"For '\" + parameterizedType + \"' found type variable : { '\" + typeParameter + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' : '\" + actualTypeArgument + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' }\");\n        }\n    }", "registerTypeParametersOn": "\n    protected void registerTypeParametersOn(TypeVariable[] typeParameters) {\n        for (TypeVariable typeVariable : typeParameters) {\n            registerTypeVariableIfNotPresent(typeVariable);\n        }\n    }", "registerTypeVariableIfNotPresent": "\n    private void registerTypeVariableIfNotPresent(TypeVariable typeVariable) {\n        if (!contextualActualTypeParameters.containsKey(typeVariable)) {\n            contextualActualTypeParameters.put(typeVariable, boundsOf(typeVariable));\n            // logger.log(\"For '\" + typeVariable.getGenericDeclaration() + \"' found type variable : { '\" + typeVariable + \"(\" + System.identityHashCode(typeVariable) + \")\" + \"' : '\" + boundsOf(typeVariable) + \"' }\");\n        }\n    }", "boundsOf": "\n    private BoundedType boundsOf(TypeVariable typeParameter) {\n        if (typeParameter.getBounds()[0] instanceof TypeVariable) {\n            return boundsOf((TypeVariable) typeParameter.getBounds()[0]);\n        }\n        return new TypeVarBoundedType(typeParameter);\n    }", "rawType": "\n    public abstract Class<?> rawType();\n\n\n\n    /**\n     * @return Returns extra interfaces <strong>if relevant</strong>, otherwise empty List.\n     */\n    public List<Type> extraInterfaces() {\n        return Collections.emptyList();\n    }", "extraInterfaces": "\n    public List<Type> extraInterfaces() {\n        return Collections.emptyList();\n    }", "rawExtraInterfaces": "\n    public Class<?>[] rawExtraInterfaces() {\n        return new Class[0];\n    }", "hasRawExtraInterfaces": "\n    public boolean hasRawExtraInterfaces() {\n        return rawExtraInterfaces().length > 0;\n    }", "actualTypeArguments": "\n    public Map<TypeVariable, Type> actualTypeArguments() {\n        TypeVariable[] typeParameters = rawType().getTypeParameters();\n        LinkedHashMap<TypeVariable, Type> actualTypeArguments = new LinkedHashMap<TypeVariable, Type>();\n\n        for (TypeVariable typeParameter : typeParameters) {\n\n            Type actualType = getActualTypeArgumentFor(typeParameter);\n\n            actualTypeArguments.put(typeParameter, actualType);\n            // logger.log(\"For '\" + rawType().getCanonicalName() + \"' returning explicit TypeVariable : { '\" + typeParameter + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' : '\" + actualType +\"' }\");\n        }\n\n        return actualTypeArguments;\n    }", "getActualTypeArgumentFor": "\n    protected Type getActualTypeArgumentFor(TypeVariable typeParameter) {\n        Type type = this.contextualActualTypeParameters.get(typeParameter);\n        if (type instanceof TypeVariable) {\n            TypeVariable typeVariable = (TypeVariable) type;\n            return getActualTypeArgumentFor(typeVariable);\n        }\n\n        return type;\n    }", "resolveGenericReturnType": "\n    public GenericMetadataSupport resolveGenericReturnType(Method method) {\n        Type genericReturnType = method.getGenericReturnType();\n        // logger.log(\"Method '\" + method.toGenericString() + \"' has return type : \" + genericReturnType.getClass().getInterfaces()[0].getSimpleName() + \" : \" + genericReturnType);\n\n        if (genericReturnType instanceof Class) {\n            return new NotGenericReturnTypeSupport(genericReturnType);\n        }\n        if (genericReturnType instanceof ParameterizedType) {\n            return new ParameterizedReturnType(this, method.getTypeParameters(), (ParameterizedType) method.getGenericReturnType());\n        }\n        if (genericReturnType instanceof TypeVariable) {\n            return new TypeVariableReturnType(this, method.getTypeParameters(), (TypeVariable) genericReturnType);\n        }\n\n        throw new MockitoException(\"Ouch, it shouldn't happen, type '\" + genericReturnType.getClass().getCanonicalName() + \"' on method : '\" + method.toGenericString() + \"' is not supported : \" + genericReturnType);\n    }", "inferFrom": "\n    public static GenericMetadataSupport inferFrom(Type type) {\n        Checks.checkNotNull(type, \"type\");\n        if (type instanceof Class) {\n            return new FromClassGenericMetadataSupport((Class<?>) type);\n        }\n        if (type instanceof ParameterizedType) {\n            return new FromParameterizedTypeGenericMetadataSupport((ParameterizedType) type);\n        }\n\n        throw new MockitoException(\"Type meta-data for this Type (\" + type.getClass().getCanonicalName() + \") is not supported : \" + type);\n    }", "superClassOf": "\n        private Class superClassOf(Class currentExploredClass) {\n            Type genericSuperclass = currentExploredClass.getGenericSuperclass();\n            if (genericSuperclass instanceof ParameterizedType) {\n                Type rawType = ((ParameterizedType) genericSuperclass).getRawType();\n                return (Class) rawType;\n            }\n            return (Class) genericSuperclass;\n        }", "readActualTypeParametersOnDeclaringClass": "\n        private void readActualTypeParametersOnDeclaringClass(Class<?> clazz) {\n            registerTypeParametersOn(clazz.getTypeParameters());\n            registerTypeVariablesOn(clazz.getGenericSuperclass());\n            for (Type genericInterface : clazz.getGenericInterfaces()) {\n                registerTypeVariablesOn(genericInterface);\n            }\n        }", "readActualTypeParameters": "\n        private void readActualTypeParameters() {\n            registerTypeVariablesOn(parameterizedType.getRawType());\n            registerTypeVariablesOn(parameterizedType);\n        }", "readTypeParameters": "\n        private void readTypeParameters() {\n            registerTypeParametersOn(typeParameters);\n        }", "readTypeVariables": "\n        private void readTypeVariables() {\n            registerTypeVariablesOn(parameterizedType);\n        }", "extractRawTypeOf": "\n        private Class<?> extractRawTypeOf(Type type) {\n            if (type instanceof Class) {\n                return (Class<?>) type;\n            }\n            if (type instanceof ParameterizedType) {\n                return (Class<?>) ((ParameterizedType) type).getRawType();\n            }\n            if (type instanceof BoundedType) {\n                return extractRawTypeOf(((BoundedType) type).firstBound());\n            }\n            if (type instanceof TypeVariable) {\n                /*\n                 * If type is a TypeVariable, then it is needed to gather data elsewhere. Usually TypeVariables are declared\n                 * on the class definition, such as such as List<E>.\n                 */\n                return extractRawTypeOf(contextualActualTypeParameters.get(type));\n            }\n            throw new MockitoException(\"Raw extraction not supported for : '\" + type + \"'\");\n        }", "extractActualBoundedTypeOf": "\n        private Type extractActualBoundedTypeOf(Type type) {\n            if (type instanceof TypeVariable) {\n                /*\n                If type is a TypeVariable, then it is needed to gather data elsewhere. Usually TypeVariables are declared\n                on the class definition, such as such as List<E>.\n                */\n                return extractActualBoundedTypeOf(contextualActualTypeParameters.get(type));\n            }\n            if (type instanceof BoundedType) {\n                Type actualFirstBound = extractActualBoundedTypeOf(((BoundedType) type).firstBound());\n                if (!(actualFirstBound instanceof BoundedType)) {\n                    return type; // avoid going one step further, ie avoid : O(TypeVar) -> K(TypeVar) -> Some ParamType\n                }\n                return actualFirstBound;\n            }\n            return type; // irrelevant, we don't manage other types as they are not bounded.\n        }", "firstBound": "\n        public Type firstBound() {\n            return typeVariable.getBounds()[0]; //\n        }", "interfaceBounds": "\n        public Type[] interfaceBounds() {\n            Type[] interfaceBounds = new Type[typeVariable.getBounds().length - 1];\n            System.arraycopy(typeVariable.getBounds(), 1, interfaceBounds, 0, typeVariable.getBounds().length - 1);\n            return interfaceBounds;\n        }", "equals": "\n        public boolean equals(Object o) {\n            if (this == o) return true;\n            if (o == null || getClass() != o.getClass()) return false;\n\n            return typeVariable.equals(((TypeVarBoundedType) o).typeVariable);\n\n        }", "hashCode": "\n        public int hashCode() {\n            return typeVariable.hashCode();\n        }", "toString": "\n        public String toString() {\n            return \"{firstBound=\" + firstBound() + \", interfaceBounds=\" + Arrays.deepToString(interfaceBounds()) + '}';\n        }", "typeVariable": "\n        public TypeVariable typeVariable() {\n            return typeVariable;\n        }", "wildCard": "\n        public WildcardType wildCard() {\n            return wildcard;\n        }"}