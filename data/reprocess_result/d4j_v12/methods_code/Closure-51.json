{"startSourceMapping": "\n  void startSourceMapping(Node node) {\n  }", "endSourceMapping": "\n  void endSourceMapping(Node node) {\n  }", "continueProcessing": "\n  boolean continueProcessing() {\n    return true;\n  }", "getLastChar": "\n  abstract char getLastChar();\n\n  void addIdentifier(String identifier) {\n    add(identifier);\n  }", "addIdentifier": "\n  void addIdentifier(String identifier) {\n    add(identifier);\n  }", "append": "\n  abstract void append(String str);\n\n  void appendBlockStart() {\n    append(\"{\");\n  }\n\n  void appendBlockEnd() {\n    append(\"}\");\n  }", "appendBlockStart": "\n  void appendBlockStart() {\n    append(\"{\");\n  }\n\n  void appendBlockEnd() {\n    append(\"}\");\n  }", "appendBlockEnd": "\n  void appendBlockEnd() {\n    append(\"}\");", "startNewLine": "\n  void startNewLine() {\n  }", "maybeLineBreak": "\n  void maybeLineBreak() {\n    maybeCutLine();\n  }", "maybeCutLine": "\n  void maybeCutLine() {\n  }", "endLine": "\n  void endLine() {\n  }", "notePreferredLineBreak": "\n  void notePreferredLineBreak() {\n  }", "beginBlock": "\n  void beginBlock() {\n    if (statementNeedsEnded) {\n      append(\";\");\n      maybeLineBreak();\n    }\n    appendBlockStart();\n\n    endLine();\n    statementNeedsEnded = false;\n  }", "endBlock": "\n  void endBlock() {\n    endBlock(false);\n  }", "listSeparator": "\n  void listSeparator() {\n    add(\",\");\n    maybeLineBreak();\n  }", "endStatement": "\n  void endStatement() {\n    endStatement(false);\n  }", "maybeEndStatement": "\n  void maybeEndStatement() {\n    // Add a ';' if we need to.\n    if (statementNeedsEnded) {\n      append(\";\");\n      maybeLineBreak();\n      endLine();\n      statementNeedsEnded = false;\n    }\n    statementStarted = true;\n  }", "endFunction": "\n  void endFunction() {\n    endFunction(false);\n  }", "beginCaseBody": "\n  void beginCaseBody() {\n    append(\":\");\n  }", "endCaseBody": "\n  void endCaseBody() {\n  }", "add": "\n  void add(String newcode) {\n    maybeEndStatement();\n\n    if (newcode.length() == 0) {\n      return;\n    }\n\n    char c = newcode.charAt(0);\n    if ((isWordChar(c) || c == '\\\\') &&\n        isWordChar(getLastChar())) {\n      // need space to separate. This is not pretty printing.\n      // For example: \"return foo;\"\n      append(\" \");\n    }\n\n    append(newcode);\n  }", "appendOp": "\n  void appendOp(String op, boolean binOp) {\n    append(op);\n  }", "addOp": "\n  void addOp(String op, boolean binOp) {\n    maybeEndStatement();\n\n    char first = op.charAt(0);\n    char prev = getLastChar();\n\n    if ((first == '+' || first == '-') && prev == first) {\n      // This is not pretty printing. This is to prevent misparsing of\n      // things like \"x + ++y\" or \"x++ + ++y\"\n      append(\" \");\n    } else if (Character.isLetter(first) &&\n               isWordChar(prev)) {\n      // Make sure there is a space after e.g. instanceof , typeof\n      append(\" \");\n    } else if (prev == '-' && first == '>') {\n      // Make sure that we don't emit -->\n      append(\" \");\n    }\n\n    // Allow formating around the operator.\n    appendOp(op, binOp);\n\n    // Line breaking after an operator is always safe. Line breaking before an\n    // operator on the other hand is not. We only line break after a bin op\n    // because it looks strange.\n    if (binOp) {\n      maybeCutLine();\n    }\n  }", "addNumber": "\n  void addNumber(double x) {\n    // This is not pretty printing. This is to prevent misparsing of x- -4 as\n    // x--4 (which is a syntax error).\n    char prev = getLastChar();\n    if (x < 0 && prev == '-') {\n      add(\" \");\n    }\n\n    if ((long) x == x) {\n      long value = (long) x;\n      long mantissa = value;\n      int exp = 0;\n      if (Math.abs(x) >= 100) {\n        while (mantissa / 10 * Math.pow(10, exp + 1) == value) {\n          mantissa /= 10;\n          exp++;\n        }\n      }\n      if (exp > 2) {\n        add(Long.toString(mantissa) + \"E\" + Integer.toString(exp));\n      } else {\n        add(Long.toString(value));\n      }\n    } else {\n      add(String.valueOf(x));\n    }\n\n  }", "isWordChar": "\n  static boolean isWordChar(char ch) {\n    return (ch == '_' ||\n            ch == '$' ||\n            Character.isLetterOrDigit(ch));\n  }", "shouldPreserveExtraBlocks": "\n  boolean shouldPreserveExtraBlocks() {\n    return false;\n  }", "breakAfterBlockFor": "\n  boolean breakAfterBlockFor(Node n, boolean statementContext) {\n    return statementContext;\n  }", "endFile": "\n  void endFile() {}"}