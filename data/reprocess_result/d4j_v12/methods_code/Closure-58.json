{"apply": "\n    public LiveVariableLattice apply(List<LiveVariableLattice> in) {\n      LiveVariableLattice result = new LiveVariableLattice(in.get(0));\n      for (int i = 1; i < in.size(); i++) {\n        result.liveSet.or(in.get(i).liveSet);\n      }\n      return result;\n    }", "equals": "\n    public boolean equals(Object other) {\n      Preconditions.checkNotNull(other);\n      return (other instanceof LiveVariableLattice) &&\n          this.liveSet.equals(((LiveVariableLattice) other).liveSet);\n    }", "isLive": "\n    public boolean isLive(Var v) {\n      Preconditions.checkNotNull(v);\n      return liveSet.get(v.index);\n    }", "toString": "\n    public String toString() {\n      return liveSet.toString();\n    }", "hashCode": "\n    public int hashCode() {\n      return liveSet.hashCode();\n    }", "getEscapedLocals": "\n  public Set<Var> getEscapedLocals() {\n    return escaped;\n  }", "getVarIndex": "\n  public int getVarIndex(String var) {\n    return jsScope.getVar(var).index;\n  }", "isForward": "\n  boolean isForward() {\n    return false;\n  }", "createEntryLattice": "\n  LiveVariableLattice createEntryLattice() {\n    return new LiveVariableLattice(jsScope.getVarCount());\n  }", "createInitialEstimateLattice": "\n  LiveVariableLattice createInitialEstimateLattice() {\n    return new LiveVariableLattice(jsScope.getVarCount());\n  }", "flowThrough": "\n  LiveVariableLattice flowThrough(Node node, LiveVariableLattice input) {\n    final BitSet gen = new BitSet(input.liveSet.size());\n    final BitSet kill = new BitSet(input.liveSet.size());\n\n    // Make kills conditional if the node can end abruptly by an exception.\n    boolean conditional = false;\n    List<DiGraphEdge<Node, Branch>> edgeList = getCfg().getOutEdges(node);\n    for (DiGraphEdge<Node, Branch> edge : edgeList) {\n      if (Branch.ON_EX.equals(edge.getValue())) {\n        conditional = true;\n      }\n    }\n    computeGenKill(node, gen, kill, conditional);\n    LiveVariableLattice result = new LiveVariableLattice(input);\n    // L_in = L_out - Kill + Gen\n    result.liveSet.andNot(kill);\n    result.liveSet.or(gen);\n    return result;\n  }", "computeGenKill": "\n  private void computeGenKill(Node n, BitSet gen, BitSet kill,\n      boolean conditional) {\n\n    switch (n.getType()) {\n      case Token.SCRIPT:\n      case Token.BLOCK:\n      case Token.FUNCTION:\n        return;\n\n      case Token.WHILE:\n      case Token.DO:\n      case Token.IF:\n        computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,\n            conditional);\n        return;\n\n      case Token.FOR:\n        if (!NodeUtil.isForIn(n)) {\n          computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,\n              conditional);\n        } else {\n          // for(x in y) {...}\n          Node lhs = n.getFirstChild();\n          Node rhs = lhs.getNext();\n          if (NodeUtil.isVar(lhs)) {\n            // for(var x in y) {...}\n            lhs = lhs.getLastChild();\n          }\n            addToSetIfLocal(lhs, kill);\n            addToSetIfLocal(lhs, gen);\n          computeGenKill(rhs, gen, kill, conditional);\n        }\n        return;\n\n      case Token.VAR:\n        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n          if (c.hasChildren()) {\n            computeGenKill(c.getFirstChild(), gen, kill, conditional);\n            if (!conditional) {\n              addToSetIfLocal(c, kill);\n            }\n          }\n        }\n        return;\n\n      case Token.AND:\n      case Token.OR:\n        computeGenKill(n.getFirstChild(), gen, kill, conditional);\n        // May short circuit.\n        computeGenKill(n.getLastChild(), gen, kill, true);\n        return;\n\n      case Token.HOOK:\n        computeGenKill(n.getFirstChild(), gen, kill, conditional);\n        // Assume both sides are conditional.\n        computeGenKill(n.getFirstChild().getNext(), gen, kill, true);\n        computeGenKill(n.getLastChild(), gen, kill, true);\n        return;\n\n      case Token.NAME:\n        if (isArgumentsName(n)) {\n          markAllParametersEscaped();\n        } else {\n          addToSetIfLocal(n, gen);\n        }\n        return;\n\n      default:\n        if (NodeUtil.isAssignmentOp(n) && NodeUtil.isName(n.getFirstChild())) {\n          Node lhs = n.getFirstChild();\n          if (!conditional) {\n            addToSetIfLocal(lhs, kill);\n          }\n          if (!NodeUtil.isAssign(n)) {\n            // assignments such as a += 1 reads a.\n            addToSetIfLocal(lhs, gen);\n          }\n          computeGenKill(lhs.getNext(), gen, kill, conditional);\n        } else {\n          for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n            computeGenKill(c, gen, kill, conditional);\n          }\n        }\n        return;\n    }\n  }", "addToSetIfLocal": "\n  private void addToSetIfLocal(Node node, BitSet set) {\n    Preconditions.checkState(NodeUtil.isName(node));\n    String name = node.getString();\n    if (!jsScope.isDeclared(name, false)) {\n      return;\n    }\n    Var var = jsScope.getVar(name);\n    if (!escaped.contains(var)) {\n      set.set(var.index);\n    }\n  }", "markAllParametersEscaped": "\n  void markAllParametersEscaped() {\n    Node lp = jsScope.getRootNode().getFirstChild().getNext();\n    for(Node arg = lp.getFirstChild(); arg != null; arg = arg.getNext()) {\n      escaped.add(jsScope.getVar(arg.getString()));\n    }\n  }", "isArgumentsName": "\n  private boolean isArgumentsName(Node n) {\n    if (n.getType() != Token.NAME ||\n        !n.getString().equals(ARGUMENT_ARRAY_ALIAS) ||\n        jsScope.isDeclared(ARGUMENT_ARRAY_ALIAS, false)) {\n      return false;\n    } else {\n      return true;\n    }\n  }"}