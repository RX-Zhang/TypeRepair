{"getMean": "\n    public double getMean() {\n        return mean;\n    }", "getStandardDeviation": "\n    public double getStandardDeviation() {\n        return standardDeviation;\n    }", "density": "\n    public double density(double x) {\n        final double x0 = x - mean;\n        final double x1 = x0 / standardDeviation;\n        return FastMath.exp(-0.5 * x1 * x1) / (standardDeviation * SQRT2PI);\n    }", "cumulativeProbability": "\n    public double cumulativeProbability(double x) throws MathException {\n        final double dev = x - mean;\n        try {\n        return 0.5 * (1.0 + Erf.erf((dev) /\n                    (standardDeviation * FastMath.sqrt(2.0))));\n        } catch (MaxIterationsExceededException ex) {\n            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38\n                return 0;\n            } else if (x > (mean + 20 * standardDeviation)) {\n                return 1;\n            } else {\n                throw ex;\n            }\n        }\n    }", "getSolverAbsoluteAccuracy": "\n    protected double getSolverAbsoluteAccuracy() {\n        return solverAbsoluteAccuracy;\n    }", "inverseCumulativeProbability": "\n    public double inverseCumulativeProbability(final double p)\n    throws MathException {\n        if (p == 0) {\n            return Double.NEGATIVE_INFINITY;\n        }\n        if (p == 1) {\n            return Double.POSITIVE_INFINITY;\n        }\n        return super.inverseCumulativeProbability(p);\n    }", "sample": "\n    public double sample() throws MathException {\n        return randomData.nextGaussian(mean, standardDeviation);\n    }", "getDomainLowerBound": "\n    protected double getDomainLowerBound(double p) {\n        double ret;\n\n        if (p < 0.5) {\n            ret = -Double.MAX_VALUE;\n        } else {\n            ret = mean;\n        }\n\n        return ret;\n    }", "getDomainUpperBound": "\n    protected double getDomainUpperBound(double p) {\n        double ret;\n\n        if (p < 0.5) {\n            ret = mean;\n        } else {\n            ret = Double.MAX_VALUE;\n        }\n\n        return ret;\n    }", "getInitialDomain": "\n    protected double getInitialDomain(double p) {\n        double ret;\n\n        if (p < 0.5) {\n            ret = mean - standardDeviation;\n        } else if (p > 0.5) {\n            ret = mean + standardDeviation;\n        } else {\n            ret = mean;\n        }\n\n        return ret;\n    }"}