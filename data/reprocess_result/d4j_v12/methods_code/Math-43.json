{"getSummary": "\n    public StatisticalSummary getSummary() {\n        return new StatisticalSummaryValues(getMean(), getVariance(), getN(),\n                getMax(), getMin(), getSum());\n    }", "addValue": "\n    public void addValue(double value) {\n        sumImpl.increment(value);\n        sumsqImpl.increment(value);\n        minImpl.increment(value);\n        maxImpl.increment(value);\n        sumLogImpl.increment(value);\n        secondMoment.increment(value);\n        // If mean, variance or geomean have been overridden,\n        // need to increment these\n        if (!(meanImpl instanceof Mean)) {\n            meanImpl.increment(value);\n        }\n        if (!(varianceImpl instanceof Variance)) {\n            varianceImpl.increment(value);\n        }\n        if (!(geoMeanImpl instanceof GeometricMean)) {\n            geoMeanImpl.increment(value);\n        }\n        n++;\n    }", "getN": "\n    public long getN() {\n        return n;\n    }", "getSum": "\n    public double getSum() {\n        return sumImpl.getResult();\n    }", "getSumsq": "\n    public double getSumsq() {\n        return sumsqImpl.getResult();\n    }", "getMean": "\n    public double getMean() {\n        return meanImpl.getResult();\n    }", "getStandardDeviation": "\n    public double getStandardDeviation() {\n        double stdDev = Double.NaN;\n        if (getN() > 0) {\n            if (getN() > 1) {\n                stdDev = FastMath.sqrt(getVariance());\n            } else {\n                stdDev = 0.0;\n            }\n        }\n        return stdDev;\n    }", "getVariance": "\n    public double getVariance() {\n        return varianceImpl.getResult();\n    }", "getPopulationVariance": "\n    public double getPopulationVariance() {\n        Variance populationVariance = new Variance(secondMoment);\n        populationVariance.setBiasCorrected(false);\n        return populationVariance.getResult();\n    }", "getMax": "\n    public double getMax() {\n        return maxImpl.getResult();\n    }", "getMin": "\n    public double getMin() {\n        return minImpl.getResult();\n    }", "getGeometricMean": "\n    public double getGeometricMean() {\n        return geoMeanImpl.getResult();\n    }", "getSumOfLogs": "\n    public double getSumOfLogs() {\n        return sumLogImpl.getResult();\n    }", "getSecondMoment": "\n    public double getSecondMoment() {\n        return secondMoment.getResult();\n    }", "toString": "\n    public String toString() {\n        StringBuilder outBuffer = new StringBuilder();\n        String endl = \"\\n\";\n        outBuffer.append(\"SummaryStatistics:\").append(endl);\n        outBuffer.append(\"n: \").append(getN()).append(endl);\n        outBuffer.append(\"min: \").append(getMin()).append(endl);\n        outBuffer.append(\"max: \").append(getMax()).append(endl);\n        outBuffer.append(\"mean: \").append(getMean()).append(endl);\n        outBuffer.append(\"geometric mean: \").append(getGeometricMean())\n            .append(endl);\n        outBuffer.append(\"variance: \").append(getVariance()).append(endl);\n        outBuffer.append(\"sum of squares: \").append(getSumsq()).append(endl);\n        outBuffer.append(\"standard deviation: \").append(getStandardDeviation())\n            .append(endl);\n        outBuffer.append(\"sum of logs: \").append(getSumOfLogs()).append(endl);\n        return outBuffer.toString();\n    }", "clear": "\n    public void clear() {\n        this.n = 0;\n        minImpl.clear();\n        maxImpl.clear();\n        sumImpl.clear();\n        sumLogImpl.clear();\n        sumsqImpl.clear();\n        geoMeanImpl.clear();\n        secondMoment.clear();\n        if (meanImpl != mean) {\n            meanImpl.clear();\n        }\n        if (varianceImpl != variance) {\n            varianceImpl.clear();\n        }\n    }", "equals": "\n    public boolean equals(Object object) {\n        if (object == this) {\n            return true;\n        }\n        if (object instanceof SummaryStatistics == false) {\n            return false;\n        }\n        SummaryStatistics stat = (SummaryStatistics)object;\n        return Precision.equalsIncludingNaN(stat.getGeometricMean(), getGeometricMean()) &&\n               Precision.equalsIncludingNaN(stat.getMax(),           getMax())           &&\n               Precision.equalsIncludingNaN(stat.getMean(),          getMean())          &&\n               Precision.equalsIncludingNaN(stat.getMin(),           getMin())           &&\n               Precision.equalsIncludingNaN(stat.getN(),             getN())             &&\n               Precision.equalsIncludingNaN(stat.getSum(),           getSum())           &&\n               Precision.equalsIncludingNaN(stat.getSumsq(),         getSumsq())         &&\n               Precision.equalsIncludingNaN(stat.getVariance(),      getVariance());\n    }", "hashCode": "\n    public int hashCode() {\n        int result = 31 + MathUtils.hash(getGeometricMean());\n        result = result * 31 + MathUtils.hash(getGeometricMean());\n        result = result * 31 + MathUtils.hash(getMax());\n        result = result * 31 + MathUtils.hash(getMean());\n        result = result * 31 + MathUtils.hash(getMin());\n        result = result * 31 + MathUtils.hash(getN());\n        result = result * 31 + MathUtils.hash(getSum());\n        result = result * 31 + MathUtils.hash(getSumsq());\n        result = result * 31 + MathUtils.hash(getVariance());\n        return result;\n    }", "getSumImpl": "\n    public StorelessUnivariateStatistic getSumImpl() {\n        return sumImpl;\n    }", "setSumImpl": "\n    public void setSumImpl(StorelessUnivariateStatistic sumImpl) {\n        checkEmpty();\n        this.sumImpl = sumImpl;\n    }", "getSumsqImpl": "\n    public StorelessUnivariateStatistic getSumsqImpl() {\n        return sumsqImpl;\n    }", "setSumsqImpl": "\n    public void setSumsqImpl(StorelessUnivariateStatistic sumsqImpl) {\n        checkEmpty();\n        this.sumsqImpl = sumsqImpl;\n    }", "getMinImpl": "\n    public StorelessUnivariateStatistic getMinImpl() {\n        return minImpl;\n    }", "setMinImpl": "\n    public void setMinImpl(StorelessUnivariateStatistic minImpl) {\n        checkEmpty();\n        this.minImpl = minImpl;\n    }", "getMaxImpl": "\n    public StorelessUnivariateStatistic getMaxImpl() {\n        return maxImpl;\n    }", "setMaxImpl": "\n    public void setMaxImpl(StorelessUnivariateStatistic maxImpl) {\n        checkEmpty();\n        this.maxImpl = maxImpl;\n    }", "getSumLogImpl": "\n    public StorelessUnivariateStatistic getSumLogImpl() {\n        return sumLogImpl;\n    }", "setSumLogImpl": "\n    public void setSumLogImpl(StorelessUnivariateStatistic sumLogImpl) {\n        checkEmpty();\n        this.sumLogImpl = sumLogImpl;\n        geoMean.setSumLogImpl(sumLogImpl);\n    }", "getGeoMeanImpl": "\n    public StorelessUnivariateStatistic getGeoMeanImpl() {\n        return geoMeanImpl;\n    }", "setGeoMeanImpl": "\n    public void setGeoMeanImpl(StorelessUnivariateStatistic geoMeanImpl) {\n        checkEmpty();\n        this.geoMeanImpl = geoMeanImpl;\n    }", "getMeanImpl": "\n    public StorelessUnivariateStatistic getMeanImpl() {\n        return meanImpl;\n    }", "setMeanImpl": "\n    public void setMeanImpl(StorelessUnivariateStatistic meanImpl) {\n        checkEmpty();\n        this.meanImpl = meanImpl;\n    }", "getVarianceImpl": "\n    public StorelessUnivariateStatistic getVarianceImpl() {\n        return varianceImpl;\n    }", "setVarianceImpl": "\n    public void setVarianceImpl(StorelessUnivariateStatistic varianceImpl) {\n        checkEmpty();\n        this.varianceImpl = varianceImpl;\n    }", "checkEmpty": "\n    private void checkEmpty() {\n        if (n > 0) {\n            throw new MathIllegalStateException(\n                LocalizedFormats.VALUES_ADDED_BEFORE_CONFIGURING_STATISTIC, n);\n        }\n    }", "copy": "\n    public SummaryStatistics copy() {\n        SummaryStatistics result = new SummaryStatistics();\n        copy(this, result);\n        return result;\n    }"}