{"fillWithHtml40Entities": "\n    static void fillWithHtml40Entities(Entities entities) {\n        entities.addEntities(BASIC_ARRAY);\n        entities.addEntities(ISO8859_1_ARRAY);\n        entities.addEntities(HTML40_ARRAY);\n    }", "add": "\n        public void add(String name, int value) {\n            mapNameToValue.put(name, new Integer(value));\n            mapValueToName.put(value, name);\n        }", "name": "\n        public String name(int value) {\n            return (String) mapValueToName.get(value);\n        }", "value": "\n        public int value(String name) {\n            Object value = mapNameToValue.get(name);\n            if (value == null) {\n                return -1;\n            }\n            return ((Integer) value).intValue();\n        }", "lookupTable": "\n        private String[] lookupTable() {\n            if (lookupTable == null) {\n                createLookupTable();\n            }\n            return lookupTable;\n        }", "createLookupTable": "\n        private void createLookupTable() {\n            lookupTable = new String[LOOKUP_TABLE_SIZE];\n            for (int i = 0; i < LOOKUP_TABLE_SIZE; ++i) {\n                lookupTable[i] = super.name(i);\n            }\n        }", "ensureCapacity": "\n        protected void ensureCapacity(int capacity) {\n            if (capacity > names.length) {\n                int newSize = Math.max(capacity, size + growBy);\n                String[] newNames = new String[newSize];\n                System.arraycopy(names, 0, newNames, 0, size);\n                names = newNames;\n                int[] newValues = new int[newSize];\n                System.arraycopy(values, 0, newValues, 0, size);\n                values = newValues;\n            }\n        }", "binarySearch": "\n        private int binarySearch(int key) {\n            int low = 0;\n            int high = size - 1;\n\n            while (low <= high) {\n                int mid = (low + high) >>> 1;\n                int midVal = values[mid];\n\n                if (midVal < key) {\n                    low = mid + 1;\n                } else if (midVal > key) {\n                    high = mid - 1;\n                } else {\n                    return mid; // key found\n                }\n            }\n            return -(low + 1); // key not found.\n        }", "addEntities": "\n    public void addEntities(String[][] entityArray) {\n        for (int i = 0; i < entityArray.length; ++i) {\n            addEntity(entityArray[i][0], Integer.parseInt(entityArray[i][1]));\n        }\n    }", "addEntity": "\n    public void addEntity(String name, int value) {\n        map.add(name, value);\n    }", "entityName": "\n    public String entityName(int value) {\n        return map.name(value);\n    }", "entityValue": "\n    public int entityValue(String name) {\n        return map.value(name);\n    }", "escape": "\n    public String escape(String str) {\n        StringWriter stringWriter = createStringWriter(str);\n        try {\n            this.escape(stringWriter, str);\n        } catch (IOException e) {\n            // This should never happen because ALL the StringWriter methods called by #escape(Writer, String) do not\n            // throw IOExceptions.\n            throw new UnhandledException(e);\n        }\n        return stringWriter.toString();\n    }", "unescape": "\n    public String unescape(String str) {\n        int firstAmp = str.indexOf('&');\n        if (firstAmp < 0) {\n            return str;\n        } else {\n            StringWriter stringWriter = createStringWriter(str);\n            try {\n                this.doUnescape(stringWriter, str, firstAmp);\n            } catch (IOException e) {\n                // This should never happen because ALL the StringWriter methods called by #escape(Writer, String) \n                // do not throw IOExceptions.\n                throw new UnhandledException(e);\n            }\n            return stringWriter.toString();\n        }\n    }", "createStringWriter": "\n    private StringWriter createStringWriter(String str) {\n        return new StringWriter((int) (str.length() + (str.length() * 0.1)));\n    }", "doUnescape": "\n    private void doUnescape(Writer writer, String str, int firstAmp) throws IOException {\n        writer.write(str, 0, firstAmp);\n        int len = str.length();\n        for (int i = firstAmp; i < len; i++) {\n            char c = str.charAt(i);\n            if (c == '&') {\n                int nextIdx = i + 1;\n                int semiColonIdx = str.indexOf(';', nextIdx);\n                if (semiColonIdx == -1) {\n                    writer.write(c);\n                    continue;\n                }\n                int amphersandIdx = str.indexOf('&', i + 1);\n                if (amphersandIdx != -1 && amphersandIdx < semiColonIdx) {\n                    // Then the text looks like &...&...;\n                    writer.write(c);\n                    continue;\n                }\n                String entityContent = str.substring(nextIdx, semiColonIdx);\n                int entityValue = -1;\n                int entityContentLen = entityContent.length();\n                if (entityContentLen > 0) {\n                    if (entityContent.charAt(0) == '#') { // escaped value content is an integer (decimal or\n                        // hexidecimal)\n                        if (entityContentLen > 1) {\n                            char isHexChar = entityContent.charAt(1);\n                            try {\n                                switch (isHexChar) {\n                                    case 'X' :\n                                    case 'x' : {\n                                        entityValue = Integer.parseInt(entityContent.substring(2), 16);\n                                        break;\n                                    }\n                                    default : {\n                                        entityValue = Integer.parseInt(entityContent.substring(1), 10);\n                                    }\n                                }\n                                if (entityValue > 0xFFFF) {\n                                    entityValue = -1;\n                                }\n                            } catch (NumberFormatException e) {\n                                entityValue = -1;\n                            }\n                        }\n                    } else { // escaped value content is an entity name\n                        entityValue = this.entityValue(entityContent);\n                    }\n                }\n\n                if (entityValue == -1) {\n                    writer.write('&');\n                    writer.write(entityContent);\n                    writer.write(';');\n                } else {\n                    writer.write(entityValue);\n                }\n                i = semiColonIdx; // move index up to the semi-colon\n            } else {\n                writer.write(c);\n            }\n        }\n    }"}