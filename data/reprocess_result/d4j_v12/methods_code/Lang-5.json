{"toLocale": "\n    public static Locale toLocale(final String str) {\n        if (str == null) {\n            return null;\n        }\n        final int len = str.length();\n        if (len < 2) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        final char ch0 = str.charAt(0);\n            final char ch1 = str.charAt(1);\n            if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            if (len == 2) {\n                return new Locale(str);\n            }\n            if (len < 5) {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            if (str.charAt(2) != '_') {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            final char ch3 = str.charAt(3);\n            if (ch3 == '_') {\n                return new Locale(str.substring(0, 2), \"\", str.substring(4));\n            }\n            final char ch4 = str.charAt(4);\n            if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            if (len == 5) {\n                return new Locale(str.substring(0, 2), str.substring(3, 5));\n            }\n            if (len < 7) {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            if (str.charAt(5) != '_') {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n    }", "localeLookupList": "\n    public static List<Locale> localeLookupList(Locale locale) {\n        return localeLookupList(locale, locale);\n    }", "availableLocaleList": "\n    public static List<Locale> availableLocaleList() {\n        return SyncAvoid.AVAILABLE_LOCALE_LIST;\n    }", "availableLocaleSet": "\n    public static Set<Locale> availableLocaleSet() {\n        return SyncAvoid.AVAILABLE_LOCALE_SET;\n    }", "isAvailableLocale": "\n    public static boolean isAvailableLocale(Locale locale) {\n        return availableLocaleList().contains(locale);\n    }", "languagesByCountry": "\n    public static List<Locale> languagesByCountry(String countryCode) {\n        if (countryCode == null) {\n            return Collections.emptyList();\n        }\n        List<Locale> langs = cLanguagesByCountry.get(countryCode);\n        if (langs == null) {\n            langs = new ArrayList<Locale>();\n            List<Locale> locales = availableLocaleList();\n            for (int i = 0; i < locales.size(); i++) {\n                Locale locale = locales.get(i);\n                if (countryCode.equals(locale.getCountry()) &&\n                        locale.getVariant().isEmpty()) {\n                    langs.add(locale);\n                }\n            }\n            langs = Collections.unmodifiableList(langs);\n            cLanguagesByCountry.putIfAbsent(countryCode, langs);\n            langs = cLanguagesByCountry.get(countryCode);\n        }\n        return langs;\n    }", "countriesByLanguage": "\n    public static List<Locale> countriesByLanguage(String languageCode) {\n        if (languageCode == null) {\n            return Collections.emptyList();\n        }\n        List<Locale> countries = cCountriesByLanguage.get(languageCode);\n        if (countries == null) {\n            countries = new ArrayList<Locale>();\n            List<Locale> locales = availableLocaleList();\n            for (int i = 0; i < locales.size(); i++) {\n                Locale locale = locales.get(i);\n                if (languageCode.equals(locale.getLanguage()) &&\n                        locale.getCountry().length() != 0 &&\n                        locale.getVariant().isEmpty()) {\n                    countries.add(locale);\n                }\n            }\n            countries = Collections.unmodifiableList(countries);\n            cCountriesByLanguage.putIfAbsent(languageCode, countries);\n            countries = cCountriesByLanguage.get(languageCode);\n        }\n        return countries;\n    }"}