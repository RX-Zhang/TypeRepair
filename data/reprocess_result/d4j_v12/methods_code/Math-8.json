{"reseedRandomGenerator": "\n    public void reseedRandomGenerator(long seed) {\n        random.setSeed(seed);\n    }", "probability": "\n    double probability(final T x) {\n        double probability = 0;\n\n        for (int i = 0; i < probabilities.length; i++) {\n            if ((x == null && singletons.get(i) == null) ||\n                (x != null && x.equals(singletons.get(i)))) {\n                probability += probabilities[i];\n            }\n        }\n\n        return probability;\n    }", "getSamples": "\n    public List<Pair<T, Double>> getSamples() {\n        final List<Pair<T, Double>> samples = new ArrayList<Pair<T, Double>>(probabilities.length);\n\n        for (int i = 0; i < probabilities.length; i++) {\n            samples.add(new Pair<T, Double>(singletons.get(i), probabilities[i]));\n        }\n\n        return samples;\n    }", "sample": "\n    public T sample() {\n        final double randomValue = random.nextDouble();\n        double sum = 0;\n\n        for (int i = 0; i < probabilities.length; i++) {\n            sum += probabilities[i];\n            if (randomValue < sum) {\n                return singletons.get(i);\n            }\n        }\n\n        /* This should never happen, but it ensures we will return a correct\n         * object in case the loop above has some floating point inequality\n         * problem on the final iteration. */\n        return singletons.get(singletons.size() - 1);\n    }"}