{"newInstance": "\n    public Dfp newInstance() {\n        return new Dfp(getField());\n    }", "getField": "\n    public DfpField getField() {\n        return field;\n    }", "getRadixDigits": "\n    public int getRadixDigits() {\n        return field.getRadixDigits();\n    }", "getZero": "\n    public Dfp getZero() {\n        return field.getZero();\n    }", "getOne": "\n    public Dfp getOne() {\n        return field.getOne();\n    }", "getTwo": "\n    public Dfp getTwo() {\n        return field.getTwo();\n    }", "shiftLeft": "\n    protected void shiftLeft() {\n        for (int i = mant.length - 1; i > 0; i--) {\n            mant[i] = mant[i-1];\n        }\n        mant[0] = 0;\n        exp--;\n    }", "shiftRight": "\n    protected void shiftRight() {\n        for (int i = 0; i < mant.length - 1; i++) {\n            mant[i] = mant[i+1];\n        }\n        mant[mant.length - 1] = 0;\n        exp++;\n    }", "align": "\n    protected int align(int e) {\n        int lostdigit = 0;\n        boolean inexact = false;\n\n        int diff = exp - e;\n\n        int adiff = diff;\n        if (adiff < 0) {\n            adiff = -adiff;\n        }\n\n        if (diff == 0) {\n            return 0;\n        }\n\n        if (adiff > (mant.length + 1)) {\n            // Special case\n            Arrays.fill(mant, 0);\n            exp = e;\n\n            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);\n            dotrap(DfpField.FLAG_INEXACT, ALIGN_TRAP, this, this);\n\n            return 0;\n        }\n\n        for (int i = 0; i < adiff; i++) {\n            if (diff < 0) {\n                /* Keep track of loss -- only signal inexact after losing 2 digits.\n                 * the first lost digit is returned to add() and may be incorporated\n                 * into the result.\n                 */\n                if (lostdigit != 0) {\n                    inexact = true;\n                }\n\n                lostdigit = mant[0];\n\n                shiftRight();\n            } else {\n                shiftLeft();\n            }\n        }\n\n        if (inexact) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);\n            dotrap(DfpField.FLAG_INEXACT, ALIGN_TRAP, this, this);\n        }\n\n        return lostdigit;\n\n    }", "lessThan": "\n    public boolean lessThan(final Dfp x) {\n\n        // make sure we don't mix number with different precision\n        if (field.getRadixDigits() != x.field.getRadixDigits()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            final Dfp result = newInstance(getZero());\n            result.nans = QNAN;\n            dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, x, result);\n            return false;\n        }\n\n        /* if a nan is involved, signal invalid and return false */\n        if (isNaN() || x.isNaN()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, x, newInstance(getZero()));\n            return false;\n        }\n\n        return compare(this, x) < 0;\n    }", "greaterThan": "\n    public boolean greaterThan(final Dfp x) {\n\n        // make sure we don't mix number with different precision\n        if (field.getRadixDigits() != x.field.getRadixDigits()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            final Dfp result = newInstance(getZero());\n            result.nans = QNAN;\n            dotrap(DfpField.FLAG_INVALID, GREATER_THAN_TRAP, x, result);\n            return false;\n        }\n\n        /* if a nan is involved, signal invalid and return false */\n        if (isNaN() || x.isNaN()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            dotrap(DfpField.FLAG_INVALID, GREATER_THAN_TRAP, x, newInstance(getZero()));\n            return false;\n        }\n\n        return compare(this, x) > 0;\n    }", "negativeOrNull": "\n    public boolean negativeOrNull() {\n\n        if (isNaN()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, this, newInstance(getZero()));\n            return false;\n        }\n\n        return (sign < 0) || ((mant[mant.length - 1] == 0) && !isInfinite());\n\n    }", "strictlyNegative": "\n    public boolean strictlyNegative() {\n\n        if (isNaN()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, this, newInstance(getZero()));\n            return false;\n        }\n\n        return (sign < 0) && ((mant[mant.length - 1] != 0) || isInfinite());\n\n    }", "positiveOrNull": "\n    public boolean positiveOrNull() {\n\n        if (isNaN()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, this, newInstance(getZero()));\n            return false;\n        }\n\n        return (sign > 0) || ((mant[mant.length - 1] == 0) && !isInfinite());\n\n    }", "strictlyPositive": "\n    public boolean strictlyPositive() {\n\n        if (isNaN()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, this, newInstance(getZero()));\n            return false;\n        }\n\n        return (sign > 0) && ((mant[mant.length - 1] != 0) || isInfinite());\n\n    }", "abs": "\n    public Dfp abs() {\n        Dfp result = newInstance(this);\n        result.sign = 1;\n        return result;\n    }", "isInfinite": "\n    public boolean isInfinite() {\n        return nans == INFINITE;\n    }", "isNaN": "\n    public boolean isNaN() {\n        return (nans == QNAN) || (nans == SNAN);\n    }", "isZero": "\n    public boolean isZero() {\n\n        if (isNaN()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, this, newInstance(getZero()));\n            return false;\n        }\n\n        return (mant[mant.length - 1] == 0) && !isInfinite();\n\n    }", "equals": "\n    public boolean equals(final Object other) {\n\n        if (other instanceof Dfp) {\n            final Dfp x = (Dfp) other;\n            if (isNaN() || x.isNaN() || field.getRadixDigits() != x.field.getRadixDigits()) {\n                return false;\n            }\n\n            return compare(this, x) == 0;\n        }\n\n        return false;\n\n    }", "hashCode": "\n    public int hashCode() {\n        return 17 + (sign << 8) + (nans << 16) + exp + Arrays.hashCode(mant);\n    }", "unequal": "\n    public boolean unequal(final Dfp x) {\n        if (isNaN() || x.isNaN() || field.getRadixDigits() != x.field.getRadixDigits()) {\n            return false;\n        }\n\n        return greaterThan(x) || lessThan(x);\n    }", "compare": "\n    private static int compare(final Dfp a, final Dfp b) {\n        // Ignore the sign of zero\n        if (a.mant[a.mant.length - 1] == 0 && b.mant[b.mant.length - 1] == 0 &&\n            a.nans == FINITE && b.nans == FINITE) {\n            return 0;\n        }\n\n        if (a.sign != b.sign) {\n            if (a.sign == -1) {\n                return -1;\n            } else {\n                return 1;\n            }\n        }\n\n        // deal with the infinities\n        if (a.nans == INFINITE && b.nans == FINITE) {\n            return a.sign;\n        }\n\n        if (a.nans == FINITE && b.nans == INFINITE) {\n            return -b.sign;\n        }\n\n        if (a.nans == INFINITE && b.nans == INFINITE) {\n            return 0;\n        }\n\n        // Handle special case when a or b is zero, by ignoring the exponents\n        if (b.mant[b.mant.length-1] != 0 && a.mant[b.mant.length-1] != 0) {\n            if (a.exp < b.exp) {\n                return -a.sign;\n            }\n\n            if (a.exp > b.exp) {\n                return a.sign;\n            }\n        }\n\n        // compare the mantissas\n        for (int i = a.mant.length - 1; i >= 0; i--) {\n            if (a.mant[i] > b.mant[i]) {\n                return a.sign;\n            }\n\n            if (a.mant[i] < b.mant[i]) {\n                return -a.sign;\n            }\n        }\n\n        return 0;\n\n    }", "rint": "\n    public Dfp rint() {\n        return trunc(DfpField.RoundingMode.ROUND_HALF_EVEN);\n    }", "floor": "\n    public Dfp floor() {\n        return trunc(DfpField.RoundingMode.ROUND_FLOOR);\n    }", "ceil": "\n    public Dfp ceil() {\n        return trunc(DfpField.RoundingMode.ROUND_CEIL);\n    }", "remainder": "\n    public Dfp remainder(final Dfp d) {\n\n        final Dfp result = this.subtract(this.divide(d).rint().multiply(d));\n\n        // IEEE 854-1987 says that if the result is zero, then it carries the sign of this\n        if (result.mant[mant.length-1] == 0) {\n            result.sign = sign;\n        }\n\n        return result;\n\n    }", "trunc": "\n    protected Dfp trunc(final DfpField.RoundingMode rmode) {\n        boolean changed = false;\n\n        if (isNaN()) {\n            return newInstance(this);\n        }\n\n        if (nans == INFINITE) {\n            return newInstance(this);\n        }\n\n        if (mant[mant.length-1] == 0) {\n            // a is zero\n            return newInstance(this);\n        }\n\n        /* If the exponent is less than zero then we can certainly\n         * return zero */\n        if (exp < 0) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);\n            Dfp result = newInstance(getZero());\n            result = dotrap(DfpField.FLAG_INEXACT, TRUNC_TRAP, this, result);\n            return result;\n        }\n\n        /* If the exponent is greater than or equal to digits, then it\n         * must already be an integer since there is no precision left\n         * for any fractional part */\n\n        if (exp >= mant.length) {\n            return newInstance(this);\n        }\n\n        /* General case:  create another dfp, result, that contains the\n         * a with the fractional part lopped off.  */\n\n        Dfp result = newInstance(this);\n        for (int i = 0; i < mant.length-result.exp; i++) {\n            changed |= result.mant[i] != 0;\n            result.mant[i] = 0;\n        }\n\n        if (changed) {\n            switch (rmode) {\n                case ROUND_FLOOR:\n                    if (result.sign == -1) {\n                        // then we must increment the mantissa by one\n                        result = result.add(newInstance(-1));\n                    }\n                    break;\n\n                case ROUND_CEIL:\n                    if (result.sign == 1) {\n                        // then we must increment the mantissa by one\n                        result = result.add(getOne());\n                    }\n                    break;\n\n                case ROUND_HALF_EVEN:\n                default:\n                    final Dfp half = newInstance(\"0.5\");\n                    Dfp a = subtract(result);  // difference between this and result\n                    a.sign = 1;            // force positive (take abs)\n                    if (a.greaterThan(half)) {\n                        a = newInstance(getOne());\n                        a.sign = sign;\n                        result = result.add(a);\n                    }\n\n                    /** If exactly equal to 1/2 and odd then increment */\n                    if (a.equals(half) && result.exp > 0 && (result.mant[mant.length-result.exp]&1) != 0) {\n                        a = newInstance(getOne());\n                        a.sign = sign;\n                        result = result.add(a);\n                    }\n                    break;\n            }\n\n            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);  // signal inexact\n            result = dotrap(DfpField.FLAG_INEXACT, TRUNC_TRAP, this, result);\n            return result;\n        }\n\n        return result;\n    }", "intValue": "\n    public int intValue() {\n        Dfp rounded;\n        int result = 0;\n\n        rounded = rint();\n\n        if (rounded.greaterThan(newInstance(2147483647))) {\n            return 2147483647;\n        }\n\n        if (rounded.lessThan(newInstance(-2147483648))) {\n            return -2147483648;\n        }\n\n        for (int i = mant.length - 1; i >= mant.length - rounded.exp; i--) {\n            result = result * RADIX + rounded.mant[i];\n        }\n\n        if (rounded.sign == -1) {\n            result = -result;\n        }\n\n        return result;\n    }", "log10K": "\n    public int log10K() {\n        return exp - 1;\n    }", "power10K": "\n    public Dfp power10K(final int e) {\n        Dfp d = newInstance(getOne());\n        d.exp = e + 1;\n        return d;\n    }", "log10": "\n    public int log10()  {\n        if (mant[mant.length-1] > 1000) {\n            return exp * 4 - 1;\n        }\n        if (mant[mant.length-1] > 100) {\n            return exp * 4 - 2;\n        }\n        if (mant[mant.length-1] > 10) {\n            return exp * 4 - 3;\n        }\n        return exp * 4 - 4;\n    }", "power10": "\n    public Dfp power10(final int e) {\n        Dfp d = newInstance(getOne());\n\n        if (e >= 0) {\n            d.exp = e / 4 + 1;\n        } else {\n            d.exp = (e + 1) / 4;\n        }\n\n        switch ((e % 4 + 4) % 4) {\n            case 0:\n                break;\n            case 1:\n                d = d.multiply(10);\n                break;\n            case 2:\n                d = d.multiply(100);\n                break;\n            default:\n                d = d.multiply(1000);\n        }\n\n        return d;\n    }", "complement": "\n    protected int complement(int extra) {\n\n        extra = RADIX-extra;\n        for (int i = 0; i < mant.length; i++) {\n            mant[i] = RADIX-mant[i]-1;\n        }\n\n        int rh = extra / RADIX;\n        extra = extra - rh * RADIX;\n        for (int i = 0; i < mant.length; i++) {\n            final int r = mant[i] + rh;\n            rh = r / RADIX;\n            mant[i] = r - rh * RADIX;\n        }\n\n        return extra;\n    }", "add": "\n    public Dfp add(final Dfp x) {\n\n        // make sure we don't mix number with different precision\n        if (field.getRadixDigits() != x.field.getRadixDigits()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            final Dfp result = newInstance(getZero());\n            result.nans = QNAN;\n            return dotrap(DfpField.FLAG_INVALID, ADD_TRAP, x, result);\n        }\n\n        /* handle special cases */\n        if (nans != FINITE || x.nans != FINITE) {\n            if (isNaN()) {\n                return this;\n            }\n\n            if (x.isNaN()) {\n                return x;\n            }\n\n            if (nans == INFINITE && x.nans == FINITE) {\n                return this;\n            }\n\n            if (x.nans == INFINITE && nans == FINITE) {\n                return x;\n            }\n\n            if (x.nans == INFINITE && nans == INFINITE && sign == x.sign) {\n                return x;\n            }\n\n            if (x.nans == INFINITE && nans == INFINITE && sign != x.sign) {\n                field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n                Dfp result = newInstance(getZero());\n                result.nans = QNAN;\n                result = dotrap(DfpField.FLAG_INVALID, ADD_TRAP, x, result);\n                return result;\n            }\n        }\n\n        /* copy this and the arg */\n        Dfp a = newInstance(this);\n        Dfp b = newInstance(x);\n\n        /* initialize the result object */\n        Dfp result = newInstance(getZero());\n\n        /* Make all numbers positive, but remember their sign */\n        final byte asign = a.sign;\n        final byte bsign = b.sign;\n\n        a.sign = 1;\n        b.sign = 1;\n\n        /* The result will be signed like the arg with greatest magnitude */\n        byte rsign = bsign;\n        if (compare(a, b) > 0) {\n            rsign = asign;\n        }\n\n        /* Handle special case when a or b is zero, by setting the exponent\n       of the zero number equal to the other one.  This avoids an alignment\n       which would cause catastropic loss of precision */\n        if (b.mant[mant.length-1] == 0) {\n            b.exp = a.exp;\n        }\n\n        if (a.mant[mant.length-1] == 0) {\n            a.exp = b.exp;\n        }\n\n        /* align number with the smaller exponent */\n        int aextradigit = 0;\n        int bextradigit = 0;\n        if (a.exp < b.exp) {\n            aextradigit = a.align(b.exp);\n        } else {\n            bextradigit = b.align(a.exp);\n        }\n\n        /* complement the smaller of the two if the signs are different */\n        if (asign != bsign) {\n            if (asign == rsign) {\n                bextradigit = b.complement(bextradigit);\n            } else {\n                aextradigit = a.complement(aextradigit);\n            }\n        }\n\n        /* add the mantissas */\n        int rh = 0; /* acts as a carry */\n        for (int i = 0; i < mant.length; i++) {\n            final int r = a.mant[i]+b.mant[i]+rh;\n            rh = r / RADIX;\n            result.mant[i] = r - rh * RADIX;\n        }\n        result.exp = a.exp;\n        result.sign = rsign;\n\n        /* handle overflow -- note, when asign!=bsign an overflow is\n         * normal and should be ignored.  */\n\n        if (rh != 0 && (asign == bsign)) {\n            final int lostdigit = result.mant[0];\n            result.shiftRight();\n            result.mant[mant.length-1] = rh;\n            final int excp = result.round(lostdigit);\n            if (excp != 0) {\n                result = dotrap(excp, ADD_TRAP, x, result);\n            }\n        }\n\n        /* normalize the result */\n        for (int i = 0; i < mant.length; i++) {\n            if (result.mant[mant.length-1] != 0) {\n                break;\n            }\n            result.shiftLeft();\n            if (i == 0) {\n                result.mant[0] = aextradigit+bextradigit;\n                aextradigit = 0;\n                bextradigit = 0;\n            }\n        }\n\n        /* result is zero if after normalization the most sig. digit is zero */\n        if (result.mant[mant.length-1] == 0) {\n            result.exp = 0;\n\n            if (asign != bsign) {\n                // Unless adding 2 negative zeros, sign is positive\n                result.sign = 1;  // Per IEEE 854-1987 Section 6.3\n            }\n        }\n\n        /* Call round to test for over/under flows */\n        final int excp = result.round(aextradigit + bextradigit);\n        if (excp != 0) {\n            result = dotrap(excp, ADD_TRAP, x, result);\n        }\n\n        return result;\n    }", "negate": "\n    public Dfp negate() {\n        Dfp result = newInstance(this);\n        result.sign = (byte) - result.sign;\n        return result;\n    }", "subtract": "\n    public Dfp subtract(final Dfp x) {\n        return add(x.negate());\n    }", "round": "\n    protected int round(int n) {\n        boolean inc = false;\n        switch (field.getRoundingMode()) {\n            case ROUND_DOWN:\n                inc = false;\n                break;\n\n            case ROUND_UP:\n                inc = n != 0;       // round up if n!=0\n                break;\n\n            case ROUND_HALF_UP:\n                inc = n >= 5000;  // round half up\n                break;\n\n            case ROUND_HALF_DOWN:\n                inc = n > 5000;  // round half down\n                break;\n\n            case ROUND_HALF_EVEN:\n                inc = n > 5000 || (n == 5000 && (mant[0] & 1) == 1);  // round half-even\n                break;\n\n            case ROUND_HALF_ODD:\n                inc = n > 5000 || (n == 5000 && (mant[0] & 1) == 0);  // round half-odd\n                break;\n\n            case ROUND_CEIL:\n                inc = sign == 1 && n != 0;  // round ceil\n                break;\n\n            case ROUND_FLOOR:\n            default:\n                inc = sign == -1 && n != 0;  // round floor\n                break;\n        }\n\n        if (inc) {\n            // increment if necessary\n            int rh = 1;\n            for (int i = 0; i < mant.length; i++) {\n                final int r = mant[i] + rh;\n                rh = r / RADIX;\n                mant[i] = r - rh * RADIX;\n            }\n\n            if (rh != 0) {\n                shiftRight();\n                mant[mant.length-1] = rh;\n            }\n        }\n\n        // check for exceptional cases and raise signals if necessary\n        if (exp < MIN_EXP) {\n            // Gradual Underflow\n            field.setIEEEFlagsBits(DfpField.FLAG_UNDERFLOW);\n            return DfpField.FLAG_UNDERFLOW;\n        }\n\n        if (exp > MAX_EXP) {\n            // Overflow\n            field.setIEEEFlagsBits(DfpField.FLAG_OVERFLOW);\n            return DfpField.FLAG_OVERFLOW;\n        }\n\n        if (n != 0) {\n            // Inexact\n            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);\n            return DfpField.FLAG_INEXACT;\n        }\n\n        return 0;\n\n    }", "multiply": "\n    public Dfp multiply(final Dfp x) {\n\n        // make sure we don't mix number with different precision\n        if (field.getRadixDigits() != x.field.getRadixDigits()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            final Dfp result = newInstance(getZero());\n            result.nans = QNAN;\n            return dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, x, result);\n        }\n\n        Dfp result = newInstance(getZero());\n\n        /* handle special cases */\n        if (nans != FINITE || x.nans != FINITE) {\n            if (isNaN()) {\n                return this;\n            }\n\n            if (x.isNaN()) {\n                return x;\n            }\n\n            if (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] != 0) {\n                result = newInstance(this);\n                result.sign = (byte) (sign * x.sign);\n                return result;\n            }\n\n            if (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] != 0) {\n                result = newInstance(x);\n                result.sign = (byte) (sign * x.sign);\n                return result;\n            }\n\n            if (x.nans == INFINITE && nans == INFINITE) {\n                result = newInstance(this);\n                result.sign = (byte) (sign * x.sign);\n                return result;\n            }\n\n            if ( (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] == 0) ||\n                    (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] == 0) ) {\n                field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n                result = newInstance(getZero());\n                result.nans = QNAN;\n                result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, x, result);\n                return result;\n            }\n        }\n\n        int[] product = new int[mant.length*2];  // Big enough to hold even the largest result\n\n        for (int i = 0; i < mant.length; i++) {\n            int rh = 0;  // acts as a carry\n            for (int j=0; j<mant.length; j++) {\n                int r = mant[i] * x.mant[j];    // multiply the 2 digits\n                r = r + product[i+j] + rh;  // add to the product digit with carry in\n\n                rh = r / RADIX;\n                product[i+j] = r - rh * RADIX;\n            }\n            product[i+mant.length] = rh;\n        }\n\n        // Find the most sig digit\n        int md = mant.length * 2 - 1;  // default, in case result is zero\n        for (int i = mant.length * 2 - 1; i >= 0; i--) {\n            if (product[i] != 0) {\n                md = i;\n                break;\n            }\n        }\n\n        // Copy the digits into the result\n        for (int i = 0; i < mant.length; i++) {\n            result.mant[mant.length - i - 1] = product[md - i];\n        }\n\n        // Fixup the exponent.\n        result.exp = exp + x.exp + md - 2 * mant.length + 1;\n        result.sign = (byte)((sign == x.sign)?1:-1);\n\n        if (result.mant[mant.length-1] == 0) {\n            // if result is zero, set exp to zero\n            result.exp = 0;\n        }\n\n        final int excp;\n        if (md > (mant.length-1)) {\n            excp = result.round(product[md-mant.length]);\n        } else {\n            excp = result.round(0); // has no effect except to check status\n        }\n\n        if (excp != 0) {\n            result = dotrap(excp, MULTIPLY_TRAP, x, result);\n        }\n\n        return result;\n\n    }", "multiplyFast": "\n    private Dfp multiplyFast(final int x) {\n        Dfp result = newInstance(this);\n\n        /* handle special cases */\n        if (nans != FINITE) {\n            if (isNaN()) {\n                return this;\n            }\n\n            if (nans == INFINITE && x != 0) {\n                result = newInstance(this);\n                return result;\n            }\n\n            if (nans == INFINITE && x == 0) {\n                field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n                result = newInstance(getZero());\n                result.nans = QNAN;\n                result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, newInstance(getZero()), result);\n                return result;\n            }\n        }\n\n        /* range check x */\n        if (x < 0 || x >= RADIX) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            result = newInstance(getZero());\n            result.nans = QNAN;\n            result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, result, result);\n            return result;\n        }\n\n        int rh = 0;\n        for (int i = 0; i < mant.length; i++) {\n            final int r = mant[i] * x + rh;\n            rh = r / RADIX;\n            result.mant[i] = r - rh * RADIX;\n        }\n\n        int lostdigit = 0;\n        if (rh != 0) {\n            lostdigit = result.mant[0];\n            result.shiftRight();\n            result.mant[mant.length-1] = rh;\n        }\n\n        if (result.mant[mant.length-1] == 0) { // if result is zero, set exp to zero\n            result.exp = 0;\n        }\n\n        final int excp = result.round(lostdigit);\n        if (excp != 0) {\n            result = dotrap(excp, MULTIPLY_TRAP, result, result);\n        }\n\n        return result;\n    }", "divide": "\n    public Dfp divide(Dfp divisor) {\n        int dividend[]; // current status of the dividend\n        int quotient[]; // quotient\n        int remainder[];// remainder\n        int qd;         // current quotient digit we're working with\n        int nsqd;       // number of significant quotient digits we have\n        int trial=0;    // trial quotient digit\n        int minadj;     // minimum adjustment\n        boolean trialgood; // Flag to indicate a good trail digit\n        int md=0;       // most sig digit in result\n        int excp;       // exceptions\n\n        // make sure we don't mix number with different precision\n        if (field.getRadixDigits() != divisor.field.getRadixDigits()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            final Dfp result = newInstance(getZero());\n            result.nans = QNAN;\n            return dotrap(DfpField.FLAG_INVALID, DIVIDE_TRAP, divisor, result);\n        }\n\n        Dfp result = newInstance(getZero());\n\n        /* handle special cases */\n        if (nans != FINITE || divisor.nans != FINITE) {\n            if (isNaN()) {\n                return this;\n            }\n\n            if (divisor.isNaN()) {\n                return divisor;\n            }\n\n            if (nans == INFINITE && divisor.nans == FINITE) {\n                result = newInstance(this);\n                result.sign = (byte) (sign * divisor.sign);\n                return result;\n            }\n\n            if (divisor.nans == INFINITE && nans == FINITE) {\n                result = newInstance(getZero());\n                result.sign = (byte) (sign * divisor.sign);\n                return result;\n            }\n\n            if (divisor.nans == INFINITE && nans == INFINITE) {\n                field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n                result = newInstance(getZero());\n                result.nans = QNAN;\n                result = dotrap(DfpField.FLAG_INVALID, DIVIDE_TRAP, divisor, result);\n                return result;\n            }\n        }\n\n        /* Test for divide by zero */\n        if (divisor.mant[mant.length-1] == 0) {\n            field.setIEEEFlagsBits(DfpField.FLAG_DIV_ZERO);\n            result = newInstance(getZero());\n            result.sign = (byte) (sign * divisor.sign);\n            result.nans = INFINITE;\n            result = dotrap(DfpField.FLAG_DIV_ZERO, DIVIDE_TRAP, divisor, result);\n            return result;\n        }\n\n        dividend = new int[mant.length+1];  // one extra digit needed\n        quotient = new int[mant.length+2];  // two extra digits needed 1 for overflow, 1 for rounding\n        remainder = new int[mant.length+1]; // one extra digit needed\n\n        /* Initialize our most significant digits to zero */\n\n        dividend[mant.length] = 0;\n        quotient[mant.length] = 0;\n        quotient[mant.length+1] = 0;\n        remainder[mant.length] = 0;\n\n        /* copy our mantissa into the dividend, initialize the\n       quotient while we are at it */\n\n        for (int i = 0; i < mant.length; i++) {\n            dividend[i] = mant[i];\n            quotient[i] = 0;\n            remainder[i] = 0;\n        }\n\n        /* outer loop.  Once per quotient digit */\n        nsqd = 0;\n        for (qd = mant.length+1; qd >= 0; qd--) {\n            /* Determine outer limits of our quotient digit */\n\n            // r =  most sig 2 digits of dividend\n            final int divMsb = dividend[mant.length]*RADIX+dividend[mant.length-1];\n            int min = divMsb       / (divisor.mant[mant.length-1]+1);\n            int max = (divMsb + 1) / divisor.mant[mant.length-1];\n\n            trialgood = false;\n            while (!trialgood) {\n                // try the mean\n                trial = (min+max)/2;\n\n                /* Multiply by divisor and store as remainder */\n                int rh = 0;\n                for (int i = 0; i < mant.length + 1; i++) {\n                    int dm = (i<mant.length)?divisor.mant[i]:0;\n                    final int r = (dm * trial) + rh;\n                    rh = r / RADIX;\n                    remainder[i] = r - rh * RADIX;\n                }\n\n                /* subtract the remainder from the dividend */\n                rh = 1;  // carry in to aid the subtraction\n                for (int i = 0; i < mant.length + 1; i++) {\n                    final int r = ((RADIX-1) - remainder[i]) + dividend[i] + rh;\n                    rh = r / RADIX;\n                    remainder[i] = r - rh * RADIX;\n                }\n\n                /* Lets analyze what we have here */\n                if (rh == 0) {\n                    // trial is too big -- negative remainder\n                    max = trial-1;\n                    continue;\n                }\n\n                /* find out how far off the remainder is telling us we are */\n                minadj = (remainder[mant.length] * RADIX)+remainder[mant.length-1];\n                minadj = minadj / (divisor.mant[mant.length-1]+1);\n\n                if (minadj >= 2) {\n                    min = trial+minadj;  // update the minimum\n                    continue;\n                }\n\n                /* May have a good one here, check more thoroughly.  Basically\n           its a good one if it is less than the divisor */\n                trialgood = false;  // assume false\n                for (int i = mant.length - 1; i >= 0; i--) {\n                    if (divisor.mant[i] > remainder[i]) {\n                        trialgood = true;\n                    }\n                    if (divisor.mant[i] < remainder[i]) {\n                        break;\n                    }\n                }\n\n                if (remainder[mant.length] != 0) {\n                    trialgood = false;\n                }\n\n                if (trialgood == false) {\n                    min = trial+1;\n                }\n            }\n\n            /* Great we have a digit! */\n            quotient[qd] = trial;\n            if (trial != 0 || nsqd != 0) {\n                nsqd++;\n            }\n\n            if (field.getRoundingMode() == DfpField.RoundingMode.ROUND_DOWN && nsqd == mant.length) {\n                // We have enough for this mode\n                break;\n            }\n\n            if (nsqd > mant.length) {\n                // We have enough digits\n                break;\n            }\n\n            /* move the remainder into the dividend while left shifting */\n            dividend[0] = 0;\n            for (int i = 0; i < mant.length; i++) {\n                dividend[i + 1] = remainder[i];\n            }\n        }\n\n        /* Find the most sig digit */\n        md = mant.length;  // default\n        for (int i = mant.length + 1; i >= 0; i--) {\n            if (quotient[i] != 0) {\n                md = i;\n                break;\n            }\n        }\n\n        /* Copy the digits into the result */\n        for (int i=0; i<mant.length; i++) {\n            result.mant[mant.length-i-1] = quotient[md-i];\n        }\n\n        /* Fixup the exponent. */\n        result.exp = exp - divisor.exp + md - mant.length;\n        result.sign = (byte) ((sign == divisor.sign) ? 1 : -1);\n\n        if (result.mant[mant.length-1] == 0) { // if result is zero, set exp to zero\n            result.exp = 0;\n        }\n\n        if (md > (mant.length-1)) {\n            excp = result.round(quotient[md-mant.length]);\n        } else {\n            excp = result.round(0);\n        }\n\n        if (excp != 0) {\n            result = dotrap(excp, DIVIDE_TRAP, divisor, result);\n        }\n\n        return result;\n    }", "reciprocal": "\n    public Dfp reciprocal() {\n        return field.getOne().divide(this);\n    }", "sqrt": "\n    public Dfp sqrt() {\n\n        // check for unusual cases\n        if (nans == FINITE && mant[mant.length-1] == 0) {\n            // if zero\n            return newInstance(this);\n        }\n\n        if (nans != FINITE) {\n            if (nans == INFINITE && sign == 1) {\n                // if positive infinity\n                return newInstance(this);\n            }\n\n            if (nans == QNAN) {\n                return newInstance(this);\n            }\n\n            if (nans == SNAN) {\n                Dfp result;\n\n                field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n                result = newInstance(this);\n                result = dotrap(DfpField.FLAG_INVALID, SQRT_TRAP, null, result);\n                return result;\n            }\n        }\n\n        if (sign == -1) {\n            // if negative\n            Dfp result;\n\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            result = newInstance(this);\n            result.nans = QNAN;\n            result = dotrap(DfpField.FLAG_INVALID, SQRT_TRAP, null, result);\n            return result;\n        }\n\n        Dfp x = newInstance(this);\n\n        /* Lets make a reasonable guess as to the size of the square root */\n        if (x.exp < -1 || x.exp > 1) {\n            x.exp = this.exp / 2;\n        }\n\n        /* Coarsely estimate the mantissa */\n        switch (x.mant[mant.length-1] / 2000) {\n            case 0:\n                x.mant[mant.length-1] = x.mant[mant.length-1]/2+1;\n                break;\n            case 2:\n                x.mant[mant.length-1] = 1500;\n                break;\n            case 3:\n                x.mant[mant.length-1] = 2200;\n                break;\n            default:\n                x.mant[mant.length-1] = 3000;\n        }\n\n        Dfp dx = newInstance(x);\n\n        /* Now that we have the first pass estimate, compute the rest\n       by the formula dx = (y - x*x) / (2x); */\n\n        Dfp px  = getZero();\n        Dfp ppx = getZero();\n        while (x.unequal(px)) {\n            dx = newInstance(x);\n            dx.sign = -1;\n            dx = dx.add(this.divide(x));\n            dx = dx.divide(2);\n            ppx = px;\n            px = x;\n            x = x.add(dx);\n\n            if (x.equals(ppx)) {\n                // alternating between two values\n                break;\n            }\n\n            // if dx is zero, break.  Note testing the most sig digit\n            // is a sufficient test since dx is normalized\n            if (dx.mant[mant.length-1] == 0) {\n                break;\n            }\n        }\n\n        return x;\n\n    }", "toString": "\n    public String toString() {\n        if (nans != FINITE) {\n            // if non-finite exceptional cases\n            if (nans == INFINITE) {\n                return (sign < 0) ? NEG_INFINITY_STRING : POS_INFINITY_STRING;\n            } else {\n                return NAN_STRING;\n            }\n        }\n\n        if (exp > mant.length || exp < -1) {\n            return dfp2sci();\n        }\n\n        return dfp2string();\n\n    }", "dfp2sci": "\n    protected String dfp2sci() {\n        char rawdigits[]    = new char[mant.length * 4];\n        char outputbuffer[] = new char[mant.length * 4 + 20];\n        int p;\n        int q;\n        int e;\n        int ae;\n        int shf;\n\n        // Get all the digits\n        p = 0;\n        for (int i = mant.length - 1; i >= 0; i--) {\n            rawdigits[p++] = (char) ((mant[i] / 1000) + '0');\n            rawdigits[p++] = (char) (((mant[i] / 100) %10) + '0');\n            rawdigits[p++] = (char) (((mant[i] / 10) % 10) + '0');\n            rawdigits[p++] = (char) (((mant[i]) % 10) + '0');\n        }\n\n        // Find the first non-zero one\n        for (p = 0; p < rawdigits.length; p++) {\n            if (rawdigits[p] != '0') {\n                break;\n            }\n        }\n        shf = p;\n\n        // Now do the conversion\n        q = 0;\n        if (sign == -1) {\n            outputbuffer[q++] = '-';\n        }\n\n        if (p != rawdigits.length) {\n            // there are non zero digits...\n            outputbuffer[q++] = rawdigits[p++];\n            outputbuffer[q++] = '.';\n\n            while (p<rawdigits.length) {\n                outputbuffer[q++] = rawdigits[p++];\n            }\n        } else {\n            outputbuffer[q++] = '0';\n            outputbuffer[q++] = '.';\n            outputbuffer[q++] = '0';\n            outputbuffer[q++] = 'e';\n            outputbuffer[q++] = '0';\n            return new String(outputbuffer, 0, 5);\n        }\n\n        outputbuffer[q++] = 'e';\n\n        // Find the msd of the exponent\n\n        e = exp * 4 - shf - 1;\n        ae = e;\n        if (e < 0) {\n            ae = -e;\n        }\n\n        // Find the largest p such that p < e\n        for (p = 1000000000; p > ae; p /= 10) {\n            // nothing to do\n        }\n\n        if (e < 0) {\n            outputbuffer[q++] = '-';\n        }\n\n        while (p > 0) {\n            outputbuffer[q++] = (char)(ae / p + '0');\n            ae = ae % p;\n            p = p / 10;\n        }\n\n        return new String(outputbuffer, 0, q);\n\n    }", "dfp2string": "\n    protected String dfp2string() {\n        char buffer[] = new char[mant.length*4 + 20];\n        int p = 1;\n        int q;\n        int e = exp;\n        boolean pointInserted = false;\n\n        buffer[0] = ' ';\n\n        if (e <= 0) {\n            buffer[p++] = '0';\n            buffer[p++] = '.';\n            pointInserted = true;\n        }\n\n        while (e < 0) {\n            buffer[p++] = '0';\n            buffer[p++] = '0';\n            buffer[p++] = '0';\n            buffer[p++] = '0';\n            e++;\n        }\n\n        for (int i = mant.length - 1; i >= 0; i--) {\n            buffer[p++] = (char) ((mant[i] / 1000) + '0');\n            buffer[p++] = (char) (((mant[i] / 100) % 10) + '0');\n            buffer[p++] = (char) (((mant[i] / 10) % 10) + '0');\n            buffer[p++] = (char) (((mant[i]) % 10) + '0');\n            if (--e == 0) {\n                buffer[p++] = '.';\n                pointInserted = true;\n            }\n        }\n\n        while (e > 0) {\n            buffer[p++] = '0';\n            buffer[p++] = '0';\n            buffer[p++] = '0';\n            buffer[p++] = '0';\n            e--;\n        }\n\n        if (!pointInserted) {\n            // Ensure we have a radix point!\n            buffer[p++] = '.';\n        }\n\n        // Suppress leading zeros\n        q = 1;\n        while (buffer[q] == '0') {\n            q++;\n        }\n        if (buffer[q] == '.') {\n            q--;\n        }\n\n        // Suppress trailing zeros\n        while (buffer[p-1] == '0') {\n            p--;\n        }\n\n        // Insert sign\n        if (sign < 0) {\n            buffer[--q] = '-';\n        }\n\n        return new String(buffer, q, p - q);\n\n    }", "dotrap": "\n    public Dfp dotrap(int type, String what, Dfp oper, Dfp result) {\n        Dfp def = result;\n\n        switch (type) {\n            case DfpField.FLAG_INVALID:\n                def = newInstance(getZero());\n                def.sign = result.sign;\n                def.nans = QNAN;\n                break;\n\n            case DfpField.FLAG_DIV_ZERO:\n                if (nans == FINITE && mant[mant.length-1] != 0) {\n                    // normal case, we are finite, non-zero\n                    def = newInstance(getZero());\n                    def.sign = (byte)(sign*oper.sign);\n                    def.nans = INFINITE;\n                }\n\n                if (nans == FINITE && mant[mant.length-1] == 0) {\n                    //  0/0\n                    def = newInstance(getZero());\n                    def.nans = QNAN;\n                }\n\n                if (nans == INFINITE || nans == QNAN) {\n                    def = newInstance(getZero());\n                    def.nans = QNAN;\n                }\n\n                if (nans == INFINITE || nans == SNAN) {\n                    def = newInstance(getZero());\n                    def.nans = QNAN;\n                }\n                break;\n\n            case DfpField.FLAG_UNDERFLOW:\n                if ( (result.exp+mant.length) < MIN_EXP) {\n                    def = newInstance(getZero());\n                    def.sign = result.sign;\n                } else {\n                    def = newInstance(result);  // gradual underflow\n                }\n                result.exp = result.exp + ERR_SCALE;\n                break;\n\n            case DfpField.FLAG_OVERFLOW:\n                result.exp = result.exp - ERR_SCALE;\n                def = newInstance(getZero());\n                def.sign = result.sign;\n                def.nans = INFINITE;\n                break;\n\n            default: def = result; break;\n        }\n\n        return trap(type, what, oper, def, result);\n\n    }", "trap": "\n    protected Dfp trap(int type, String what, Dfp oper, Dfp def, Dfp result) {\n        return def;\n    }", "classify": "\n    public int classify() {\n        return nans;\n    }", "copysign": "\n    public static Dfp copysign(final Dfp x, final Dfp y) {\n        Dfp result = x.newInstance(x);\n        result.sign = y.sign;\n        return result;\n    }", "nextAfter": "\n    public Dfp nextAfter(final Dfp x) {\n\n        // make sure we don't mix number with different precision\n        if (field.getRadixDigits() != x.field.getRadixDigits()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            final Dfp result = newInstance(getZero());\n            result.nans = QNAN;\n            return dotrap(DfpField.FLAG_INVALID, NEXT_AFTER_TRAP, x, result);\n        }\n\n        // if this is greater than x\n        boolean up = false;\n        if (this.lessThan(x)) {\n            up = true;\n        }\n\n        if (compare(this, x) == 0) {\n            return newInstance(x);\n        }\n\n        if (lessThan(getZero())) {\n            up = !up;\n        }\n\n        final Dfp inc;\n        Dfp result;\n        if (up) {\n            inc = newInstance(getOne());\n            inc.exp = this.exp-mant.length+1;\n            inc.sign = this.sign;\n\n            if (this.equals(getZero())) {\n                inc.exp = MIN_EXP-mant.length;\n            }\n\n            result = add(inc);\n        } else {\n            inc = newInstance(getOne());\n            inc.exp = this.exp;\n            inc.sign = this.sign;\n\n            if (this.equals(inc)) {\n                inc.exp = this.exp-mant.length;\n            } else {\n                inc.exp = this.exp-mant.length+1;\n            }\n\n            if (this.equals(getZero())) {\n                inc.exp = MIN_EXP-mant.length;\n            }\n\n            result = this.subtract(inc);\n        }\n\n        if (result.classify() == INFINITE && this.classify() != INFINITE) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);\n            result = dotrap(DfpField.FLAG_INEXACT, NEXT_AFTER_TRAP, x, result);\n        }\n\n        if (result.equals(getZero()) && this.equals(getZero()) == false) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);\n            result = dotrap(DfpField.FLAG_INEXACT, NEXT_AFTER_TRAP, x, result);\n        }\n\n        return result;\n\n    }", "toDouble": "\n    public double toDouble() {\n\n        if (isInfinite()) {\n            if (lessThan(getZero())) {\n                return Double.NEGATIVE_INFINITY;\n            } else {\n                return Double.POSITIVE_INFINITY;\n            }\n        }\n\n        if (isNaN()) {\n            return Double.NaN;\n        }\n\n        Dfp y = this;\n        boolean negate = false;\n        int cmp0 = compare(this, getZero());\n        if (cmp0 == 0) {\n            return sign < 0 ? -0.0 : +0.0;\n        } else if (cmp0 < 0) {\n            y = negate();\n            negate = true;\n        }\n\n        /* Find the exponent, first estimate by integer log10, then adjust.\n         Should be faster than doing a natural logarithm.  */\n        int exponent = (int)(y.log10() * 3.32);\n        if (exponent < 0) {\n            exponent--;\n        }\n\n        Dfp tempDfp = DfpMath.pow(getTwo(), exponent);\n        while (tempDfp.lessThan(y) || tempDfp.equals(y)) {\n            tempDfp = tempDfp.multiply(2);\n            exponent++;\n        }\n        exponent--;\n\n        /* We have the exponent, now work on the mantissa */\n\n        y = y.divide(DfpMath.pow(getTwo(), exponent));\n        if (exponent > -1023) {\n            y = y.subtract(getOne());\n        }\n\n        if (exponent < -1074) {\n            return 0;\n        }\n\n        if (exponent > 1023) {\n            return negate ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY;\n        }\n\n\n        y = y.multiply(newInstance(4503599627370496l)).rint();\n        String str = y.toString();\n        str = str.substring(0, str.length()-1);\n        long mantissa = Long.parseLong(str);\n\n        if (mantissa == 4503599627370496L) {\n            // Handle special case where we round up to next power of two\n            mantissa = 0;\n            exponent++;\n        }\n\n        /* Its going to be subnormal, so make adjustments */\n        if (exponent <= -1023) {\n            exponent--;\n        }\n\n        while (exponent < -1023) {\n            exponent++;\n            mantissa >>>= 1;\n        }\n\n        long bits = mantissa | ((exponent + 1023L) << 52);\n        double x = Double.longBitsToDouble(bits);\n\n        if (negate) {\n            x = -x;\n        }\n\n        return x;\n\n    }", "toSplitDouble": "\n    public double[] toSplitDouble() {\n        double split[] = new double[2];\n        long mask = 0xffffffffc0000000L;\n\n        split[0] = Double.longBitsToDouble(Double.doubleToLongBits(toDouble()) & mask);\n        split[1] = subtract(newInstance(split[0])).toDouble();\n\n        return split;\n    }"}