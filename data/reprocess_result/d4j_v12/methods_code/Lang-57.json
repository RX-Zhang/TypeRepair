{"toLocale": "\n    public static Locale toLocale(String str) {\n        if (str == null) {\n            return null;\n        }\n        int len = str.length();\n        if (len != 2 && len != 5 && len < 7) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        char ch0 = str.charAt(0);\n        char ch1 = str.charAt(1);\n        if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        if (len == 2) {\n            return new Locale(str, \"\");\n        } else {\n            if (str.charAt(2) != '_') {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            char ch3 = str.charAt(3);\n            char ch4 = str.charAt(4);\n            if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            if (len == 5) {\n                return new Locale(str.substring(0, 2), str.substring(3, 5));\n            } else {\n                if (str.charAt(5) != '_') {\n                    throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n                }\n                return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n            }\n        }\n    }", "localeLookupList": "\n    public static List localeLookupList(Locale locale) {\n        return localeLookupList(locale, locale);\n    }", "availableLocaleList": "\n    public static List availableLocaleList() {\n        return cAvailableLocaleList;\n    }", "availableLocaleSet": "\n    public static Set availableLocaleSet() {\n        Set set = cAvailableLocaleSet;\n        if (set == null) {\n            set = new HashSet(availableLocaleList());\n            set = Collections.unmodifiableSet(set);\n            cAvailableLocaleSet = set;\n        }\n        return set;\n    }", "isAvailableLocale": "\n    public static boolean isAvailableLocale(Locale locale) {\n        return cAvailableLocaleSet.contains(locale);\n    }", "languagesByCountry": "\n    public static List languagesByCountry(String countryCode) {\n        List langs = (List) cLanguagesByCountry.get(countryCode);  //syncd\n        if (langs == null) {\n            if (countryCode != null) {\n                langs = new ArrayList();\n                List locales = availableLocaleList();\n                for (int i = 0; i < locales.size(); i++) {\n                    Locale locale = (Locale) locales.get(i);\n                    if (countryCode.equals(locale.getCountry()) &&\n                            locale.getVariant().length() == 0) {\n                        langs.add(locale);\n                    }\n                }\n                langs = Collections.unmodifiableList(langs);\n            } else {\n                langs = Collections.EMPTY_LIST;\n            }\n            cLanguagesByCountry.put(countryCode, langs);  //syncd\n        }\n        return langs;\n    }", "countriesByLanguage": "\n    public static List countriesByLanguage(String languageCode) {\n        List countries = (List) cCountriesByLanguage.get(languageCode);  //syncd\n        if (countries == null) {\n            if (languageCode != null) {\n                countries = new ArrayList();\n                List locales = availableLocaleList();\n                for (int i = 0; i < locales.size(); i++) {\n                    Locale locale = (Locale) locales.get(i);\n                    if (languageCode.equals(locale.getLanguage()) &&\n                            locale.getCountry().length() != 0 &&\n                            locale.getVariant().length() == 0) {\n                        countries.add(locale);\n                    }\n                }\n                countries = Collections.unmodifiableList(countries);\n            } else {\n                countries = Collections.EMPTY_LIST;\n            }\n            cCountriesByLanguage.put(languageCode, countries);  //syncd\n        }\n        return countries;\n    }"}