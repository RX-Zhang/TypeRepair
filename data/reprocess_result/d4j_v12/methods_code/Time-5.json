{"parse": "\n    public static Period parse(String str) {\n        return parse(str, ISOPeriodFormat.standard());\n    }", "years": "\n    public static Period years(int years) {\n        return new Period(new int[] {years, 0, 0, 0, 0, 0, 0, 0, 0}, PeriodType.standard());\n    }", "months": "\n    public static Period months(int months) {\n        return new Period(new int[] {0, months, 0, 0, 0, 0, 0, 0}, PeriodType.standard());\n    }", "weeks": "\n    public static Period weeks(int weeks) {\n        return new Period(new int[] {0, 0, weeks, 0, 0, 0, 0, 0}, PeriodType.standard());\n    }", "days": "\n    public static Period days(int days) {\n        return new Period(new int[] {0, 0, 0, days, 0, 0, 0, 0}, PeriodType.standard());\n    }", "hours": "\n    public static Period hours(int hours) {\n        return new Period(new int[] {0, 0, 0, 0, hours, 0, 0, 0}, PeriodType.standard());\n    }", "minutes": "\n    public static Period minutes(int minutes) {\n        return new Period(new int[] {0, 0, 0, 0, 0, minutes, 0, 0}, PeriodType.standard());\n    }", "seconds": "\n    public static Period seconds(int seconds) {\n        return new Period(new int[] {0, 0, 0, 0, 0, 0, seconds, 0}, PeriodType.standard());\n    }", "millis": "\n    public static Period millis(int millis) {\n        return new Period(new int[] {0, 0, 0, 0, 0, 0, 0, millis}, PeriodType.standard());\n    }", "fieldDifference": "\n    public static Period fieldDifference(ReadablePartial start, ReadablePartial end) {\n        if (start == null || end == null) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must not be null\");\n        }\n        if (start.size() != end.size()) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n        }\n        DurationFieldType[] types = new DurationFieldType[start.size()];\n        int[] values = new int[start.size()];\n        for (int i = 0, isize = start.size(); i < isize; i++) {\n            if (start.getFieldType(i) != end.getFieldType(i)) {\n                throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n            }\n            types[i] = start.getFieldType(i).getDurationType();\n            if (i > 0 && types[i - 1] == types[i]) {\n                throw new IllegalArgumentException(\"ReadablePartial objects must not have overlapping fields\");\n            }\n            values[i] = end.getValue(i) - start.getValue(i);\n        }\n        return new Period(values, PeriodType.forFields(types));\n    }", "toPeriod": "\n    public Period toPeriod() {\n        return this;\n    }", "getYears": "\n    public int getYears() {\n        return getPeriodType().getIndexedField(this, PeriodType.YEAR_INDEX);\n    }", "getMonths": "\n    public int getMonths() {\n        return getPeriodType().getIndexedField(this, PeriodType.MONTH_INDEX);\n    }", "getWeeks": "\n    public int getWeeks() {\n        return getPeriodType().getIndexedField(this, PeriodType.WEEK_INDEX);\n    }", "getDays": "\n    public int getDays() {\n        return getPeriodType().getIndexedField(this, PeriodType.DAY_INDEX);\n    }", "getHours": "\n    public int getHours() {\n        return getPeriodType().getIndexedField(this, PeriodType.HOUR_INDEX);\n    }", "getMinutes": "\n    public int getMinutes() {\n        return getPeriodType().getIndexedField(this, PeriodType.MINUTE_INDEX);\n    }", "getSeconds": "\n    public int getSeconds() {\n        return getPeriodType().getIndexedField(this, PeriodType.SECOND_INDEX);\n    }", "getMillis": "\n    public int getMillis() {\n        return getPeriodType().getIndexedField(this, PeriodType.MILLI_INDEX);\n    }", "withPeriodType": "\n    public Period withPeriodType(PeriodType type) {\n        type = DateTimeUtils.getPeriodType(type);\n        if (type.equals(getPeriodType())) {\n            return this;\n        }\n        return new Period(this, type);\n    }", "withFields": "\n    public Period withFields(ReadablePeriod period) {\n        if (period == null) {\n            return this;\n        }\n        int[] newValues = getValues();  // cloned\n        newValues = super.mergePeriodInto(newValues, period);\n        return new Period(newValues, getPeriodType());\n    }", "withField": "\n    public Period withField(DurationFieldType field, int value) {\n        if (field == null) {\n            throw new IllegalArgumentException(\"Field must not be null\");\n        }\n        int[] newValues = getValues();  // cloned\n        super.setFieldInto(newValues, field, value);\n        return new Period(newValues, getPeriodType());\n    }", "withFieldAdded": "\n    public Period withFieldAdded(DurationFieldType field, int value) {\n        if (field == null) {\n            throw new IllegalArgumentException(\"Field must not be null\");\n        }\n        if (value == 0) {\n            return this;\n        }\n        int[] newValues = getValues();  // cloned\n        super.addFieldInto(newValues, field, value);\n        return new Period(newValues, getPeriodType());\n    }", "withYears": "\n    public Period withYears(int years) {\n        int[] values = getValues();  // cloned\n        getPeriodType().setIndexedField(this, PeriodType.YEAR_INDEX, values, years);\n        return new Period(values, getPeriodType());\n    }", "withMonths": "\n    public Period withMonths(int months) {\n        int[] values = getValues();  // cloned\n        getPeriodType().setIndexedField(this, PeriodType.MONTH_INDEX, values, months);\n        return new Period(values, getPeriodType());\n    }", "withWeeks": "\n    public Period withWeeks(int weeks) {\n        int[] values = getValues();  // cloned\n        getPeriodType().setIndexedField(this, PeriodType.WEEK_INDEX, values, weeks);\n        return new Period(values, getPeriodType());\n    }", "withDays": "\n    public Period withDays(int days) {\n        int[] values = getValues();  // cloned\n        getPeriodType().setIndexedField(this, PeriodType.DAY_INDEX, values, days);\n        return new Period(values, getPeriodType());\n    }", "withHours": "\n    public Period withHours(int hours) {\n        int[] values = getValues();  // cloned\n        getPeriodType().setIndexedField(this, PeriodType.HOUR_INDEX, values, hours);\n        return new Period(values, getPeriodType());\n    }", "withMinutes": "\n    public Period withMinutes(int minutes) {\n        int[] values = getValues();  // cloned\n        getPeriodType().setIndexedField(this, PeriodType.MINUTE_INDEX, values, minutes);\n        return new Period(values, getPeriodType());\n    }", "withSeconds": "\n    public Period withSeconds(int seconds) {\n        int[] values = getValues();  // cloned\n        getPeriodType().setIndexedField(this, PeriodType.SECOND_INDEX, values, seconds);\n        return new Period(values, getPeriodType());\n    }", "withMillis": "\n    public Period withMillis(int millis) {\n        int[] values = getValues();  // cloned\n        getPeriodType().setIndexedField(this, PeriodType.MILLI_INDEX, values, millis);\n        return new Period(values, getPeriodType());\n    }", "plus": "\n    public Period plus(ReadablePeriod period) {\n        if (period == null) {\n            return this;\n        }\n        int[] values = getValues();  // cloned\n        getPeriodType().addIndexedField(this, PeriodType.YEAR_INDEX, values, period.get(DurationFieldType.YEARS_TYPE));\n        getPeriodType().addIndexedField(this, PeriodType.MONTH_INDEX, values, period.get(DurationFieldType.MONTHS_TYPE));\n        getPeriodType().addIndexedField(this, PeriodType.WEEK_INDEX, values, period.get(DurationFieldType.WEEKS_TYPE));\n        getPeriodType().addIndexedField(this, PeriodType.DAY_INDEX, values, period.get(DurationFieldType.DAYS_TYPE));\n        getPeriodType().addIndexedField(this, PeriodType.HOUR_INDEX, values, period.get(DurationFieldType.HOURS_TYPE));\n        getPeriodType().addIndexedField(this, PeriodType.MINUTE_INDEX, values, period.get(DurationFieldType.MINUTES_TYPE));\n        getPeriodType().addIndexedField(this, PeriodType.SECOND_INDEX, values, period.get(DurationFieldType.SECONDS_TYPE));\n        getPeriodType().addIndexedField(this, PeriodType.MILLI_INDEX, values, period.get(DurationFieldType.MILLIS_TYPE));\n        return new Period(values, getPeriodType());\n    }", "plusYears": "\n    public Period plusYears(int years) {\n        if (years == 0) {\n            return this;\n        }\n        int[] values = getValues();  // cloned\n        getPeriodType().addIndexedField(this, PeriodType.YEAR_INDEX, values, years);\n        return new Period(values, getPeriodType());\n    }", "plusMonths": "\n    public Period plusMonths(int months) {\n        if (months == 0) {\n            return this;\n        }\n        int[] values = getValues();  // cloned\n        getPeriodType().addIndexedField(this, PeriodType.MONTH_INDEX, values, months);\n        return new Period(values, getPeriodType());\n    }", "plusWeeks": "\n    public Period plusWeeks(int weeks) {\n        if (weeks == 0) {\n            return this;\n        }\n        int[] values = getValues();  // cloned\n        getPeriodType().addIndexedField(this, PeriodType.WEEK_INDEX, values, weeks);\n        return new Period(values, getPeriodType());\n    }", "plusDays": "\n    public Period plusDays(int days) {\n        if (days == 0) {\n            return this;\n        }\n        int[] values = getValues();  // cloned\n        getPeriodType().addIndexedField(this, PeriodType.DAY_INDEX, values, days);\n        return new Period(values, getPeriodType());\n    }", "plusHours": "\n    public Period plusHours(int hours) {\n        if (hours == 0) {\n            return this;\n        }\n        int[] values = getValues();  // cloned\n        getPeriodType().addIndexedField(this, PeriodType.HOUR_INDEX, values, hours);\n        return new Period(values, getPeriodType());\n    }", "plusMinutes": "\n    public Period plusMinutes(int minutes) {\n        if (minutes == 0) {\n            return this;\n        }\n        int[] values = getValues();  // cloned\n        getPeriodType().addIndexedField(this, PeriodType.MINUTE_INDEX, values, minutes);\n        return new Period(values, getPeriodType());\n    }", "plusSeconds": "\n    public Period plusSeconds(int seconds) {\n        if (seconds == 0) {\n            return this;\n        }\n        int[] values = getValues();  // cloned\n        getPeriodType().addIndexedField(this, PeriodType.SECOND_INDEX, values, seconds);\n        return new Period(values, getPeriodType());\n    }", "plusMillis": "\n    public Period plusMillis(int millis) {\n        if (millis == 0) {\n            return this;\n        }\n        int[] values = getValues();  // cloned\n        getPeriodType().addIndexedField(this, PeriodType.MILLI_INDEX, values, millis);\n        return new Period(values, getPeriodType());\n    }", "minus": "\n    public Period minus(ReadablePeriod period) {\n        if (period == null) {\n            return this;\n        }\n        int[] values = getValues();  // cloned\n        getPeriodType().addIndexedField(this, PeriodType.YEAR_INDEX, values, -period.get(DurationFieldType.YEARS_TYPE));\n        getPeriodType().addIndexedField(this, PeriodType.MONTH_INDEX, values, -period.get(DurationFieldType.MONTHS_TYPE));\n        getPeriodType().addIndexedField(this, PeriodType.WEEK_INDEX, values, -period.get(DurationFieldType.WEEKS_TYPE));\n        getPeriodType().addIndexedField(this, PeriodType.DAY_INDEX, values, -period.get(DurationFieldType.DAYS_TYPE));\n        getPeriodType().addIndexedField(this, PeriodType.HOUR_INDEX, values, -period.get(DurationFieldType.HOURS_TYPE));\n        getPeriodType().addIndexedField(this, PeriodType.MINUTE_INDEX, values, -period.get(DurationFieldType.MINUTES_TYPE));\n        getPeriodType().addIndexedField(this, PeriodType.SECOND_INDEX, values, -period.get(DurationFieldType.SECONDS_TYPE));\n        getPeriodType().addIndexedField(this, PeriodType.MILLI_INDEX, values, -period.get(DurationFieldType.MILLIS_TYPE));\n        return new Period(values, getPeriodType());\n    }", "minusYears": "\n    public Period minusYears(int years) {\n        return plusYears(-years);\n    }", "minusMonths": "\n    public Period minusMonths(int months) {\n        return plusMonths(-months);\n    }", "minusWeeks": "\n    public Period minusWeeks(int weeks) {\n        return plusWeeks(-weeks);\n    }", "minusDays": "\n    public Period minusDays(int days) {\n        return plusDays(-days);\n    }", "minusHours": "\n    public Period minusHours(int hours) {\n        return plusHours(-hours);\n    }", "minusMinutes": "\n    public Period minusMinutes(int minutes) {\n        return plusMinutes(-minutes);\n    }", "minusSeconds": "\n    public Period minusSeconds(int seconds) {\n        return plusSeconds(-seconds);\n    }", "minusMillis": "\n    public Period minusMillis(int millis) {\n        return plusMillis(-millis);\n    }", "multipliedBy": "\n    public Period multipliedBy(int scalar) {\n        if (this == ZERO || scalar == 1) {\n            return this;\n        }\n        int[] values = getValues();  // cloned\n        for (int i = 0; i < values.length; i++) {\n            values[i] = FieldUtils.safeMultiply(values[i], scalar);\n        }\n        return new Period(values, getPeriodType());\n    }", "negated": "\n    public Period negated() {\n        return multipliedBy(-1);\n    }", "toStandardWeeks": "\n    public Weeks toStandardWeeks() {\n        checkYearsAndMonths(\"Weeks\");\n        long millis = getMillis();  // assign to a long\n        millis += ((long) getSeconds()) * DateTimeConstants.MILLIS_PER_SECOND;\n        millis += ((long) getMinutes()) * DateTimeConstants.MILLIS_PER_MINUTE;\n        millis += ((long) getHours()) * DateTimeConstants.MILLIS_PER_HOUR;\n        millis += ((long) getDays()) * DateTimeConstants.MILLIS_PER_DAY;\n        long weeks = ((long) getWeeks()) + millis / DateTimeConstants.MILLIS_PER_WEEK;\n        return Weeks.weeks(FieldUtils.safeToInt(weeks));\n    }", "toStandardDays": "\n    public Days toStandardDays() {\n        checkYearsAndMonths(\"Days\");\n        long millis = getMillis();  // assign to a long\n        millis += ((long) getSeconds()) * DateTimeConstants.MILLIS_PER_SECOND;\n        millis += ((long) getMinutes()) * DateTimeConstants.MILLIS_PER_MINUTE;\n        millis += ((long) getHours()) * DateTimeConstants.MILLIS_PER_HOUR;\n        long days = millis / DateTimeConstants.MILLIS_PER_DAY;\n        days = FieldUtils.safeAdd(days, getDays());\n        days = FieldUtils.safeAdd(days, ((long) getWeeks()) * ((long) DateTimeConstants.DAYS_PER_WEEK));\n        return Days.days(FieldUtils.safeToInt(days));\n    }", "toStandardHours": "\n    public Hours toStandardHours() {\n        checkYearsAndMonths(\"Hours\");\n        long millis = getMillis();  // assign to a long\n        millis += ((long) getSeconds()) * DateTimeConstants.MILLIS_PER_SECOND;\n        millis += ((long) getMinutes()) * DateTimeConstants.MILLIS_PER_MINUTE;\n        long hours = millis / DateTimeConstants.MILLIS_PER_HOUR;\n        hours = FieldUtils.safeAdd(hours, getHours());\n        hours = FieldUtils.safeAdd(hours, ((long) getDays()) * ((long) DateTimeConstants.HOURS_PER_DAY));\n        hours = FieldUtils.safeAdd(hours, ((long) getWeeks()) * ((long) DateTimeConstants.HOURS_PER_WEEK));\n        return Hours.hours(FieldUtils.safeToInt(hours));\n    }", "toStandardMinutes": "\n    public Minutes toStandardMinutes() {\n        checkYearsAndMonths(\"Minutes\");\n        long millis = getMillis();  // assign to a long\n        millis += ((long) getSeconds()) * DateTimeConstants.MILLIS_PER_SECOND;\n        long minutes = millis / DateTimeConstants.MILLIS_PER_MINUTE;\n        minutes = FieldUtils.safeAdd(minutes, getMinutes());\n        minutes = FieldUtils.safeAdd(minutes, ((long) getHours()) * ((long) DateTimeConstants.MINUTES_PER_HOUR));\n        minutes = FieldUtils.safeAdd(minutes, ((long) getDays()) * ((long) DateTimeConstants.MINUTES_PER_DAY));\n        minutes = FieldUtils.safeAdd(minutes, ((long) getWeeks()) * ((long) DateTimeConstants.MINUTES_PER_WEEK));\n        return Minutes.minutes(FieldUtils.safeToInt(minutes));\n    }", "toStandardSeconds": "\n    public Seconds toStandardSeconds() {\n        checkYearsAndMonths(\"Seconds\");\n        long seconds = getMillis() / DateTimeConstants.MILLIS_PER_SECOND;\n        seconds = FieldUtils.safeAdd(seconds, getSeconds());\n        seconds = FieldUtils.safeAdd(seconds, ((long) getMinutes()) * ((long) DateTimeConstants.SECONDS_PER_MINUTE));\n        seconds = FieldUtils.safeAdd(seconds, ((long) getHours()) * ((long) DateTimeConstants.SECONDS_PER_HOUR));\n        seconds = FieldUtils.safeAdd(seconds, ((long) getDays()) * ((long) DateTimeConstants.SECONDS_PER_DAY));\n        seconds = FieldUtils.safeAdd(seconds, ((long) getWeeks()) * ((long) DateTimeConstants.SECONDS_PER_WEEK));\n        return Seconds.seconds(FieldUtils.safeToInt(seconds));\n    }", "toStandardDuration": "\n    public Duration toStandardDuration() {\n        checkYearsAndMonths(\"Duration\");\n        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n        return new Duration(millis);\n    }", "checkYearsAndMonths": "\n    private void checkYearsAndMonths(String destintionType) {\n        if (getMonths() != 0) {\n            throw new UnsupportedOperationException(\"Cannot convert to \" + destintionType + \" as this period contains months and months vary in length\");\n        }\n        if (getYears() != 0) {\n            throw new UnsupportedOperationException(\"Cannot convert to \" + destintionType + \" as this period contains years and years vary in length\");\n        }\n    }", "normalizedStandard": "\n    public Period normalizedStandard() {\n        return normalizedStandard(PeriodType.standard());\n    }"}