{"ensureDataConformance": "\n    private void ensureDataConformance(final double[] x, final double[] y)\n        throws NullArgumentException, NoDataException {\n\n        if (x == null ||\n            y == null) {\n            throw new NullArgumentException();\n        }\n        if (x.length == 0 ||\n            y.length == 0) {\n            throw new NoDataException();\n        }\n    }", "concatenateSamples": "\n    private double[] concatenateSamples(final double[] x, final double[] y) {\n        final double[] z = new double[x.length + y.length];\n\n        System.arraycopy(x, 0, z, 0, x.length);\n        System.arraycopy(y, 0, z, x.length, y.length);\n\n        return z;\n    }", "mannWhitneyU": "\n    public double mannWhitneyU(final double[] x, final double[] y)\n        throws NullArgumentException, NoDataException {\n\n        ensureDataConformance(x, y);\n\n        final double[] z = concatenateSamples(x, y);\n        final double[] ranks = naturalRanking.rank(z);\n\n        double sumRankX = 0;\n\n        /*\n         * The ranks for x is in the first x.length entries in ranks because x\n         * is in the first x.length entries in z\n         */\n        for (int i = 0; i < x.length; ++i) {\n            sumRankX += ranks[i];\n        }\n\n        /*\n         * U1 = R1 - (n1 * (n1 + 1)) / 2 where R1 is sum of ranks for sample 1,\n         * e.g. x, n1 is the number of observations in sample 1.\n         */\n        final double U1 = sumRankX - (x.length * (x.length + 1)) / 2;\n\n        /*\n         * It can be shown that U1 + U2 = n1 * n2\n         */\n        final double U2 = x.length * y.length - U1;\n\n        return FastMath.max(U1, U2);\n    }", "calculateAsymptoticPValue": "\n    private double calculateAsymptoticPValue(final double Umin,\n                                             final int n1,\n                                             final int n2)\n        throws ConvergenceException, MaxCountExceededException {\n\n        final int n1n2prod = n1 * n2;\n\n        // http://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U#Normal_approximation\n        final double EU = n1n2prod / 2.0;\n        final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0;\n\n        final double z = (Umin - EU) / FastMath.sqrt(VarU);\n\n        final NormalDistribution standardNormal = new NormalDistribution(0, 1);\n\n        return 2 * standardNormal.cumulativeProbability(z);\n    }", "mannWhitneyUTest": "\n    public double mannWhitneyUTest(final double[] x, final double[] y)\n        throws NullArgumentException, NoDataException,\n        ConvergenceException, MaxCountExceededException {\n\n        ensureDataConformance(x, y);\n\n        final double Umax = mannWhitneyU(x, y);\n\n        /*\n         * It can be shown that U1 + U2 = n1 * n2\n         */\n        final double Umin = x.length * y.length - Umax;\n\n        return calculateAsymptoticPValue(Umin, x.length, y.length);\n    }"}