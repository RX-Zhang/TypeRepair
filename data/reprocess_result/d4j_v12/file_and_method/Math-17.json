{"ClassName": "Dfp", "Fields": ["public static final int RADIX;", "public static final int MIN_EXP;", "public static final int MAX_EXP;", "public static final int ERR_SCALE;", "public static final byte FINITE;", "public static final byte INFINITE;", "public static final byte SNAN;", "public static final byte QNAN;", "private static final String NAN_STRING;", "private static final String POS_INFINITY_STRING;", "private static final String NEG_INFINITY_STRING;", "private static final String ADD_TRAP;", "private static final String MULTIPLY_TRAP;", "private static final String DIVIDE_TRAP;", "private static final String SQRT_TRAP;", "private static final String ALIGN_TRAP;", "private static final String TRUNC_TRAP;", "private static final String NEXT_AFTER_TRAP;", "private static final String LESS_THAN_TRAP;", "private static final String GREATER_THAN_TRAP;", "private static final String NEW_INSTANCE_TRAP;", "protected int[] mant;", "protected byte sign;", "protected int exp;", "protected byte nans;", "private final DfpField field;"], "Methods": ["public Dfp newInstance() { ... }", "public Dfp newInstance(byte x) { ... }", "public Dfp newInstance(int x) { ... }", "public Dfp newInstance(long x) { ... }", "public Dfp newInstance(double x) { ... }", "public Dfp newInstance(Dfp d) { ... }", "public Dfp newInstance(String s) { ... }", "public Dfp newInstance(byte sig, byte code) { ... }", "public DfpField getField() { ... }", "public int getRadixDigits() { ... }", "public Dfp getZero() { ... }", "public Dfp getOne() { ... }", "public Dfp getTwo() { ... }", "protected void shiftLeft() { ... }", "protected void shiftRight() { ... }", "protected int align(int e) { ... }", "public boolean lessThan(Dfp x) { ... }", "public boolean greaterThan(Dfp x) { ... }", "public boolean negativeOrNull() { ... }", "public boolean strictlyNegative() { ... }", "public boolean positiveOrNull() { ... }", "public boolean strictlyPositive() { ... }", "public Dfp abs() { ... }", "public boolean isInfinite() { ... }", "public boolean isNaN() { ... }", "public boolean isZero() { ... }", "public boolean equals(Object other) { ... }", "public int hashCode() { ... }", "public boolean unequal(Dfp x) { ... }", "private static int compare(Dfp a, Dfp b) { ... }", "public Dfp rint() { ... }", "public Dfp floor() { ... }", "public Dfp ceil() { ... }", "public Dfp remainder(Dfp d) { ... }", "protected Dfp trunc(DfpField rmode) { ... }", "public int intValue() { ... }", "public int log10K() { ... }", "public Dfp power10K(int e) { ... }", "public int log10() { ... }", "public Dfp power10(int e) { ... }", "protected int complement(int extra) { ... }", "public Dfp add(Dfp x) { ... }", "public Dfp negate() { ... }", "public Dfp subtract(Dfp x) { ... }", "protected int round(int n) { ... }", "public Dfp multiply(Dfp x) { ... }", "public Dfp multiply(int x) { ... }", "private Dfp multiplyFast(int x) { ... }", "public Dfp divide(Dfp divisor) { ... }", "public Dfp divide(int divisor) { ... }", "public Dfp reciprocal() { ... }", "public Dfp sqrt() { ... }", "public String toString() { ... }", "protected String dfp2sci() { ... }", "protected String dfp2string() { ... }", "public Dfp dotrap(int type, String what, Dfp oper, Dfp result) { ... }", "protected Dfp trap(int type, String what, Dfp oper, Dfp def, Dfp result) { ... }", "public int classify() { ... }", "public static Dfp copysign(Dfp x, Dfp y) { ... }", "public Dfp nextAfter(Dfp x) { ... }", "public double toDouble() { ... }", "public double[] toSplitDouble() { ... }"]}