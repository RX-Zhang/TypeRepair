{"ClassName": "NodeUtil", "Fields": ["static final long MAX_POSITIVE_INTEGER_NUMBER;", "static final String JSC_PROPERTY_NAME_FN;", "private static final Set CONSTRUCTORS_WITHOUT_SIDE_EFFECTS;", "private static final Set BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS;", "private static final Set OBJECT_METHODS_WITHOUT_SIDEEFFECTS;", "private static final Set REGEXP_METHODS;", "private static final Set STRING_REGEXP_METHODS;", "static final NumbericResultPredicate NUMBERIC_RESULT_PREDICATE;", "static final BooleanResultPredicate BOOLEAN_RESULT_PREDICATE;", "static final MayBeStringResultPredicate MAY_BE_STRING_PREDICATE;", "static final Predicate MATCH_NOT_FUNCTION;"], "Methods": ["static TernaryValue getImpureBooleanValue(Node n) { ... }", "static TernaryValue getPureBooleanValue(Node n) { ... }", "static String getStringValue(Node n) { ... }", "static String getStringValue(double value) { ... }", "static String getArrayElementStringValue(Node n) { ... }", "static String arrayToString(Node literal) { ... }", "static Double getNumberValue(Node n) { ... }", "static Double getStringNumberValue(String rawJsString) { ... }", "static String trimJsWhiteSpace(String s) { ... }", "static TernaryValue isStrWhiteSpaceChar(int c) { ... }", "static String getFunctionName(Node n) { ... }", "public static String getNearestFunctionName(Node n) { ... }", "static boolean isImmutableValue(Node n) { ... }", "static boolean isLiteralValue(Node n, boolean includeFunctions) { ... }", "static boolean isValidDefineValue(Node val, Set defines) { ... }", "static boolean isEmptyBlock(Node block) { ... }", "static boolean isSimpleOperator(Node n) { ... }", "static boolean isSimpleOperatorType(int type) { ... }", "public static Node newExpr(Node child) { ... }", "static boolean mayEffectMutableState(Node n) { ... }", "static boolean mayEffectMutableState(Node n, AbstractCompiler compiler) { ... }", "static boolean mayHaveSideEffects(Node n) { ... }", "static boolean mayHaveSideEffects(Node n, AbstractCompiler compiler) { ... }", "private static boolean checkForStateChangeHelper(Node n, boolean checkForNewObjects, AbstractCompiler compiler) { ... }", "static boolean constructorCallHasSideEffects(Node callNode) { ... }", "static boolean constructorCallHasSideEffects(Node callNode, AbstractCompiler compiler) { ... }", "static boolean functionCallHasSideEffects(Node callNode) { ... }", "static boolean functionCallHasSideEffects(Node callNode, AbstractCompiler compiler) { ... }", "static boolean callHasLocalResult(Node n) { ... }", "static boolean newHasLocalResult(Node n) { ... }", "static boolean nodeTypeMayHaveSideEffects(Node n) { ... }", "static boolean nodeTypeMayHaveSideEffects(Node n, AbstractCompiler compiler) { ... }", "static boolean canBeSideEffected(Node n) { ... }", "static boolean canBeSideEffected(Node n, Set knownConstants) { ... }", "static int precedence(int type) { ... }", "static boolean valueCheck(Node n, Predicate p) { ... }", "static boolean isNumericResult(Node n) { ... }", "static boolean isNumericResultHelper(Node n) { ... }", "static boolean isBooleanResult(Node n) { ... }", "static boolean isBooleanResultHelper(Node n) { ... }", "static boolean isUndefined(Node n) { ... }", "static boolean isNull(Node n) { ... }", "static boolean isNullOrUndefined(Node n) { ... }", "static boolean mayBeString(Node n) { ... }", "static boolean mayBeString(Node n, boolean recurse) { ... }", "static boolean mayBeStringHelper(Node n) { ... }", "static boolean isAssociative(int type) { ... }", "static boolean isCommutative(int type) { ... }", "static boolean isAssignmentOp(Node n) { ... }", "static int getOpFromAssignmentOp(Node n) { ... }", "static boolean isExpressionNode(Node n) { ... }", "static boolean containsFunction(Node n) { ... }", "static boolean referencesThis(Node n) { ... }", "static boolean isGet(Node n) { ... }", "static boolean isGetProp(Node n) { ... }", "static boolean isName(Node n) { ... }", "static boolean isNew(Node n) { ... }", "static boolean isVar(Node n) { ... }", "static boolean isVarDeclaration(Node n) { ... }", "static Node getAssignedValue(Node n) { ... }", "static boolean isString(Node n) { ... }", "static boolean isExprAssign(Node n) { ... }", "static boolean isAssign(Node n) { ... }", "static boolean isExprCall(Node n) { ... }", "static boolean isForIn(Node n) { ... }", "static boolean isLoopStructure(Node n) { ... }", "static Node getLoopCodeBlock(Node n) { ... }", "static boolean isWithinLoop(Node n) { ... }", "static boolean isControlStructure(Node n) { ... }", "static boolean isControlStructureCodeBlock(Node parent, Node n) { ... }", "static Node getConditionExpression(Node n) { ... }", "static boolean isStatementBlock(Node n) { ... }", "static boolean isStatement(Node n) { ... }", "static boolean isStatementParent(Node parent) { ... }", "static boolean isSwitchCase(Node n) { ... }", "static boolean isReferenceName(Node n) { ... }", "static boolean isLabelName(Node n) { ... }", "static boolean isTryFinallyNode(Node parent, Node child) { ... }", "static boolean isTryCatchNodeContainer(Node n) { ... }", "static void removeChild(Node parent, Node node) { ... }", "static void maybeAddFinally(Node tryNode) { ... }", "static boolean tryMergeBlock(Node block) { ... }", "static boolean isCall(Node n) { ... }", "static boolean isCallOrNew(Node node) { ... }", "static boolean isFunction(Node n) { ... }", "static Node getFunctionBody(Node fn) { ... }", "static boolean isThis(Node node) { ... }", "static boolean isArrayLiteral(Node node) { ... }", "static boolean containsCall(Node n) { ... }", "static boolean isFunctionDeclaration(Node n) { ... }", "static boolean isHoistedFunctionDeclaration(Node n) { ... }", "static boolean isFunctionExpression(Node n) { ... }", "static boolean isEmptyFunctionExpression(Node node) { ... }", "static boolean isVarArgsFunction(Node function) { ... }", "static boolean isObjectCallMethod(Node callNode, String methodName) { ... }", "static boolean isFunctionObjectCall(Node callNode) { ... }", "static boolean isFunctionObjectApply(Node callNode) { ... }", "static boolean isFunctionObjectCallOrApply(Node callNode) { ... }", "static boolean isSimpleFunctionObjectCall(Node callNode) { ... }", "static boolean isVarOrSimpleAssignLhs(Node n, Node parent) { ... }", "static boolean isLValue(Node node) { ... }", "static boolean isObjectLitKey(Node node, Node parent) { ... }", "static String getObjectLitKeyName(Node key) { ... }", "static JSType getObjectLitKeyTypeFromValueType(Node key, JSType valueType) { ... }", "static boolean isGetOrSetKey(Node node) { ... }", "static String opToStr(int operator) { ... }", "static String opToStrNoFail(int operator) { ... }", "static boolean containsType(Node node, int type, Predicate traverseChildrenPred) { ... }", "static boolean containsType(Node node, int type) { ... }", "static void redeclareVarsInsideBranch(Node branch) { ... }", "static void copyNameAnnotations(Node source, Node destination) { ... }", "private static Node getAddingRoot(Node n) { ... }", "public static Node newFunctionNode(String name, List params, Node body, int lineno, int charno) { ... }", "public static Node newQualifiedNameNode(CodingConvention convention, String name, int lineno, int charno) { ... }", "static Node newQualifiedNameNode(CodingConvention convention, String name, Node basisNode, String originalName) { ... }", "public static Node getRootOfQualifiedName(Node qName) { ... }", "static void setDebugInformation(Node node, Node basisNode, String originalName) { ... }", "private static Node newName(CodingConvention convention, String name, int lineno, int charno) { ... }", "static Node newName(CodingConvention convention, String name, Node basisNode) { ... }", "static Node newName(CodingConvention convention, String name, Node basisNode, String originalName) { ... }", "static boolean isLatin(String s) { ... }", "static boolean isValidPropertyName(String name) { ... }", "public static Collection getVarsDeclaredInBranch(Node root) { ... }", "static boolean isPrototypePropertyDeclaration(Node n) { ... }", "static boolean isPrototypeProperty(Node n) { ... }", "static Node getPrototypeClassName(Node qName) { ... }", "static String getPrototypePropertyName(Node qName) { ... }", "static Node newUndefinedNode(Node srcReferenceNode) { ... }", "static Node newVarNode(String name, Node value) { ... }", "static int getNodeTypeReferenceCount(Node node, int type, Predicate traverseChildrenPred) { ... }", "static boolean isNameReferenced(Node node, String name, Predicate traverseChildrenPred) { ... }", "static boolean isNameReferenced(Node node, String name) { ... }", "static int getNameReferenceCount(Node node, String name) { ... }", "static boolean has(Node node, Predicate pred, Predicate traverseChildrenPred) { ... }", "static int getCount(Node n, Predicate pred, Predicate traverseChildrenPred) { ... }", "static void visitPreOrder(Node node, Visitor vistor, Predicate traverseChildrenPred) { ... }", "static void visitPostOrder(Node node, Visitor vistor, Predicate traverseChildrenPred) { ... }", "static boolean hasFinally(Node n) { ... }", "static Node getCatchBlock(Node n) { ... }", "static boolean hasCatchHandler(Node n) { ... }", "public static Node getFunctionParameters(Node fnNode) { ... }", "static boolean isConstantName(Node node) { ... }", "static boolean isConstantByConvention(CodingConvention convention, Node node, Node parent) { ... }", "static JSDocInfo getInfoForNameNode(Node nameNode) { ... }", "public static JSDocInfo getFunctionJSDocInfo(Node n) { ... }", "public static String getSourceName(Node n) { ... }", "static Node newCallNode(Node callTarget, Node parameters) { ... }", "static boolean evaluatesToLocalValue(Node value) { ... }", "static boolean evaluatesToLocalValue(Node value, Predicate locals) { ... }", "private static Node getNthSibling(Node first, int index) { ... }", "static Node getArgumentForFunction(Node function, int index) { ... }", "static Node getArgumentForCallOrNew(Node call, int index) { ... }", "private static boolean isToStringMethodCall(Node call) { ... }"]}