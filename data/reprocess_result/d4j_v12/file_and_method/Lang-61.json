{"ClassName": "StrBuilder", "Fields": ["static final int CAPACITY;", "private static final long serialVersionUID;", "protected char[] buffer;", "protected int size;", "private String newLine;", "private String nullText;"], "Methods": ["public String getNewLineText() { ... }", "public StrBuilder setNewLineText(String newLine) { ... }", "public String getNullText() { ... }", "public StrBuilder setNullText(String nullText) { ... }", "public int length() { ... }", "public StrBuilder setLength(int length) { ... }", "public int capacity() { ... }", "public StrBuilder ensureCapacity(int capacity) { ... }", "public StrBuilder minimizeCapacity() { ... }", "public int size() { ... }", "public boolean isEmpty() { ... }", "public StrBuilder clear() { ... }", "public char charAt(int index) { ... }", "public StrBuilder setCharAt(int index, char ch) { ... }", "public StrBuilder deleteCharAt(int index) { ... }", "public char[] toCharArray() { ... }", "public char[] toCharArray(int startIndex, int endIndex) { ... }", "public char[] getChars(char[] destination) { ... }", "public void getChars(int startIndex, int endIndex, char[] destination, int destinationIndex) { ... }", "public StrBuilder appendNewLine() { ... }", "public StrBuilder appendNull() { ... }", "public StrBuilder append(Object obj) { ... }", "public StrBuilder append(String str) { ... }", "public StrBuilder append(String str, int startIndex, int length) { ... }", "public StrBuilder append(StringBuffer str) { ... }", "public StrBuilder append(StringBuffer str, int startIndex, int length) { ... }", "public StrBuilder append(StrBuilder str) { ... }", "public StrBuilder append(StrBuilder str, int startIndex, int length) { ... }", "public StrBuilder append(char[] chars) { ... }", "public StrBuilder append(char[] chars, int startIndex, int length) { ... }", "public StrBuilder append(boolean value) { ... }", "public StrBuilder append(char ch) { ... }", "public StrBuilder append(int value) { ... }", "public StrBuilder append(long value) { ... }", "public StrBuilder append(float value) { ... }", "public StrBuilder append(double value) { ... }", "public StrBuilder appendWithSeparators(Object[] array, String separator) { ... }", "public StrBuilder appendWithSeparators(Collection coll, String separator) { ... }", "public StrBuilder appendWithSeparators(Iterator it, String separator) { ... }", "public StrBuilder appendPadding(int length, char padChar) { ... }", "public StrBuilder appendFixedWidthPadLeft(Object obj, int width, char padChar) { ... }", "public StrBuilder appendFixedWidthPadLeft(int value, int width, char padChar) { ... }", "public StrBuilder appendFixedWidthPadRight(Object obj, int width, char padChar) { ... }", "public StrBuilder appendFixedWidthPadRight(int value, int width, char padChar) { ... }", "public StrBuilder insert(int index, Object obj) { ... }", "public StrBuilder insert(int index, String str) { ... }", "public StrBuilder insert(int index, char[] chars) { ... }", "public StrBuilder insert(int index, char[] chars, int offset, int length) { ... }", "public StrBuilder insert(int index, boolean value) { ... }", "public StrBuilder insert(int index, char value) { ... }", "public StrBuilder insert(int index, int value) { ... }", "public StrBuilder insert(int index, long value) { ... }", "public StrBuilder insert(int index, float value) { ... }", "public StrBuilder insert(int index, double value) { ... }", "private void deleteImpl(int startIndex, int endIndex, int len) { ... }", "public StrBuilder delete(int startIndex, int endIndex) { ... }", "public StrBuilder deleteAll(char ch) { ... }", "public StrBuilder deleteFirst(char ch) { ... }", "public StrBuilder deleteAll(String str) { ... }", "public StrBuilder deleteFirst(String str) { ... }", "public StrBuilder deleteAll(StrMatcher matcher) { ... }", "public StrBuilder deleteFirst(StrMatcher matcher) { ... }", "private void replaceImpl(int startIndex, int endIndex, int removeLen, String insertStr, int insertLen) { ... }", "public StrBuilder replace(int startIndex, int endIndex, String replaceStr) { ... }", "public StrBuilder replaceAll(char search, char replace) { ... }", "public StrBuilder replaceFirst(char search, char replace) { ... }", "public StrBuilder replaceAll(String searchStr, String replaceStr) { ... }", "public StrBuilder replaceFirst(String searchStr, String replaceStr) { ... }", "public StrBuilder replaceAll(StrMatcher matcher, String replaceStr) { ... }", "public StrBuilder replaceFirst(StrMatcher matcher, String replaceStr) { ... }", "public StrBuilder replace(StrMatcher matcher, String replaceStr, int startIndex, int endIndex, int replaceCount) { ... }", "private StrBuilder replaceImpl(StrMatcher matcher, String replaceStr, int from, int to, int replaceCount) { ... }", "public StrBuilder reverse() { ... }", "public StrBuilder trim() { ... }", "public boolean startsWith(String str) { ... }", "public boolean endsWith(String str) { ... }", "public String substring(int start) { ... }", "public String substring(int startIndex, int endIndex) { ... }", "public String leftString(int length) { ... }", "public String rightString(int length) { ... }", "public String midString(int index, int length) { ... }", "public boolean contains(char ch) { ... }", "public boolean contains(String str) { ... }", "public boolean contains(StrMatcher matcher) { ... }", "public int indexOf(char ch) { ... }", "public int indexOf(char ch, int startIndex) { ... }", "public int indexOf(String str) { ... }", "public int indexOf(String str, int startIndex) { ... }", "public int indexOf(StrMatcher matcher) { ... }", "public int indexOf(StrMatcher matcher, int startIndex) { ... }", "public int lastIndexOf(char ch) { ... }", "public int lastIndexOf(char ch, int startIndex) { ... }", "public int lastIndexOf(String str) { ... }", "public int lastIndexOf(String str, int startIndex) { ... }", "public int lastIndexOf(StrMatcher matcher) { ... }", "public int lastIndexOf(StrMatcher matcher, int startIndex) { ... }", "public StrTokenizer asTokenizer() { ... }", "public Reader asReader() { ... }", "public Writer asWriter() { ... }", "public boolean equalsIgnoreCase(StrBuilder other) { ... }", "public boolean equals(StrBuilder other) { ... }", "public boolean equals(Object obj) { ... }", "public int hashCode() { ... }", "public String toString() { ... }", "public StringBuffer toStringBuffer() { ... }", "protected int validateRange(int startIndex, int endIndex) { ... }", "protected void validateIndex(int index) { ... }"]}