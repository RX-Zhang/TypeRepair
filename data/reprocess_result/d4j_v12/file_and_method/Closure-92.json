{"ClassName": "ProcessClosurePrimitives", "Fields": ["static final DiagnosticType NULL_ARGUMENT_ERROR;", "static final DiagnosticType INVALID_ARGUMENT_ERROR;", "static final DiagnosticType TOO_MANY_ARGUMENTS_ERROR;", "static final DiagnosticType DUPLICATE_NAMESPACE_ERROR;", "static final DiagnosticType FUNCTION_NAMESPACE_ERROR;", "static final DiagnosticType MISSING_PROVIDE_ERROR;", "static final DiagnosticType LATE_PROVIDE_ERROR;", "static final DiagnosticType INVALID_PROVIDE_ERROR;", "static final DiagnosticType XMODULE_REQUIRE_ERROR;", "static final DiagnosticType NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR;", "static final DiagnosticType BASE_CLASS_ERROR;", "static final String GOOG;", "private final AbstractCompiler compiler;", "private final JSModuleGraph moduleGraph;", "private final Map providedNames;", "private final List unrecognizedRequires;", "private final Set exportedVariables;", "private final CheckLevel requiresLevel;", "private final boolean rewriteNewDateGoogNow;"], "Methods": [" Set getExportedVariableNames() { ... }", "public void process(Node externs, Node root) { ... }", "public void visit(NodeTraversal t, Node n, Node parent) { ... }", "private void processRequireCall(NodeTraversal t, Node n, Node parent) { ... }", "private void processProvideCall(NodeTraversal t, Node n, Node parent) { ... }", "private void handleCandidateProvideDefinition(NodeTraversal t, Node n, Node parent) { ... }", "private void processBaseClassCall(NodeTraversal t, Node n) { ... }", "private Node getEnclosingDeclNameNode(NodeTraversal t) { ... }", "private void reportBadBaseClassUse(NodeTraversal t, Node n, String extraMessage) { ... }", "private void processProvideFromPreviousPass(NodeTraversal t, String name, Node parent) { ... }", "private void processSetCssNameMapping(NodeTraversal t, Node n, Node parent) { ... }", "private void trySimplifyNewDate(NodeTraversal t, Node n, Node parent) { ... }", "private boolean verifyProvide(NodeTraversal t, Node methodName, Node arg) { ... }", "private boolean verifyArgument(NodeTraversal t, Node methodName, Node arg) { ... }", "private boolean verifyArgument(NodeTraversal t, Node methodName, Node arg, int desiredType) { ... }", "private void registerAnyProvidedPrefixes(String ns, Node node, JSModule module) { ... }", "private static boolean isNamespacePlaceholder(Node n) { ... }"]}