{"ClassName": "PeriodFormatterBuilder", "Fields": ["private static final int PRINT_ZERO_RARELY_FIRST;", "private static final int PRINT_ZERO_RARELY_LAST;", "private static final int PRINT_ZERO_IF_SUPPORTED;", "private static final int PRINT_ZERO_ALWAYS;", "private static final int PRINT_ZERO_NEVER;", "private static final int YEARS;", "private static final int MONTHS;", "private static final int WEEKS;", "private static final int DAYS;", "private static final int HOURS;", "private static final int MINUTES;", "private static final int SECONDS;", "private static final int MILLIS;", "private static final int SECONDS_MILLIS;", "private static final int SECONDS_OPTIONAL_MILLIS;", "private static final int MAX_FIELD;", "private int iMinPrintedDigits;", "private int iPrintZeroSetting;", "private int iMaxParsedDigits;", "private boolean iRejectSignedValues;", "private PeriodFieldAffix iPrefix;", "private List iElementPairs;", "private boolean iNotPrinter;", "private boolean iNotParser;", "private FieldFormatter[] iFieldFormatters;"], "Methods": ["public PeriodFormatter toFormatter() { ... }", "public PeriodPrinter toPrinter() { ... }", "public PeriodParser toParser() { ... }", "public void clear() { ... }", "public PeriodFormatterBuilder append(PeriodFormatter formatter) { ... }", "public PeriodFormatterBuilder append(PeriodPrinter printer, PeriodParser parser) { ... }", "public PeriodFormatterBuilder appendLiteral(String text) { ... }", "public PeriodFormatterBuilder minimumPrintedDigits(int minDigits) { ... }", "public PeriodFormatterBuilder maximumParsedDigits(int maxDigits) { ... }", "public PeriodFormatterBuilder rejectSignedValues(boolean v) { ... }", "public PeriodFormatterBuilder printZeroRarelyLast() { ... }", "public PeriodFormatterBuilder printZeroRarelyFirst() { ... }", "public PeriodFormatterBuilder printZeroIfSupported() { ... }", "public PeriodFormatterBuilder printZeroAlways() { ... }", "public PeriodFormatterBuilder printZeroNever() { ... }", "public PeriodFormatterBuilder appendPrefix(String text) { ... }", "public PeriodFormatterBuilder appendPrefix(String singularText, String pluralText) { ... }", "private PeriodFormatterBuilder appendPrefix(PeriodFieldAffix prefix) { ... }", "public PeriodFormatterBuilder appendYears() { ... }", "public PeriodFormatterBuilder appendMonths() { ... }", "public PeriodFormatterBuilder appendWeeks() { ... }", "public PeriodFormatterBuilder appendDays() { ... }", "public PeriodFormatterBuilder appendHours() { ... }", "public PeriodFormatterBuilder appendMinutes() { ... }", "public PeriodFormatterBuilder appendSeconds() { ... }", "public PeriodFormatterBuilder appendSecondsWithMillis() { ... }", "public PeriodFormatterBuilder appendSecondsWithOptionalMillis() { ... }", "public PeriodFormatterBuilder appendMillis() { ... }", "public PeriodFormatterBuilder appendMillis3Digit() { ... }", "private void appendField(int type) { ... }", "private void appendField(int type, int minPrinted) { ... }", "public PeriodFormatterBuilder appendSuffix(String text) { ... }", "public PeriodFormatterBuilder appendSuffix(String singularText, String pluralText) { ... }", "private PeriodFormatterBuilder appendSuffix(PeriodFieldAffix suffix) { ... }", "public PeriodFormatterBuilder appendSeparator(String text) { ... }", "public PeriodFormatterBuilder appendSeparatorIfFieldsAfter(String text) { ... }", "public PeriodFormatterBuilder appendSeparatorIfFieldsBefore(String text) { ... }", "public PeriodFormatterBuilder appendSeparator(String text, String finalText) { ... }", "public PeriodFormatterBuilder appendSeparator(String text, String finalText, String[] variants) { ... }", "private PeriodFormatterBuilder appendSeparator(String text, String finalText, String[] variants, boolean useBefore, boolean useAfter) { ... }", "private void clearPrefix() { ... }", "private PeriodFormatterBuilder append0(PeriodPrinter printer, PeriodParser parser) { ... }", "private static PeriodFormatter toFormatter(List elementPairs, boolean notPrinter, boolean notParser) { ... }", "private static Object[] createComposite(List elementPairs) { ... }"]}