{"ClassName": "AbstractLeastSquaresOptimizer", "Fields": ["private static final double DEFAULT_SINGULARITY_THRESHOLD;", "protected double[][] weightedResidualJacobian;", "protected int cols;", "protected int rows;", "protected double[] point;", "protected double[] objective;", "protected double[] weightedResiduals;", "protected double cost;", "private MultivariateDifferentiableVectorFunction jF;", "private int jacobianEvaluations;", "private RealMatrix weightMatrixSqrt;"], "Methods": ["public int getJacobianEvaluations() { ... }", "protected void updateJacobian() { ... }", "protected RealMatrix computeWeightedJacobian(double[] params) { ... }", "protected void updateResidualsAndCost() { ... }", "protected double computeCost(double[] residuals) { ... }", "public double getRMS() { ... }", "public double getChiSquare() { ... }", "public RealMatrix getWeightSquareRoot() { ... }", "protected void setCost(double cost) { ... }", "public double[][] getCovariances() { ... }", "public double[][] getCovariances(double threshold) { ... }", "public double[][] computeCovariances(double[] params, double threshold) { ... }", "public double[] guessParametersErrors() { ... }", "public double[] computeSigma(double[] params, double covarianceSingularityThreshold) { ... }", "public PointVectorValuePair optimize(int maxEval, DifferentiableMultivariateVectorFunction f, double[] target, double[] weights, double[] startPoint) { ... }", "public PointVectorValuePair optimize(int maxEval, MultivariateDifferentiableVectorFunction f, double[] target, double[] weights, double[] startPoint) { ... }", "protected PointVectorValuePair optimizeInternal(int maxEval, MultivariateDifferentiableVectorFunction f, OptimizationData optData) { ... }", "protected void setUp() { ... }", "protected double[] computeResiduals(double[] objectiveValue) { ... }", "private RealMatrix squareRoot(RealMatrix m) { ... }"]}