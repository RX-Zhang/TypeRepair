{"ClassName": "EigenDecompositionImpl", "Fields": ["private static final double TOLERANCE;", "private static final double TOLERANCE_2;", "private double splitTolerance;", "private double[] main;", "private double[] secondary;", "private double[] squaredSecondary;", "private TriDiagonalTransformer transformer;", "private double lowerSpectra;", "private double upperSpectra;", "private double minPivot;", "private double sigma;", "private double sigmaLow;", "private double tau;", "private double[] work;", "private int pingPong;", "private double qMax;", "private double eMin;", "private int tType;", "private double dMin;", "private double dMin1;", "private double dMin2;", "private double dN;", "private double dN1;", "private double dN2;", "private double g;", "private double[] realEigenvalues;", "private double[] imagEigenvalues;", "private ArrayRealVector[] eigenvectors;", "private RealMatrix cachedV;", "private RealMatrix cachedD;", "private RealMatrix cachedVt;"], "Methods": ["private boolean isSymmetric(RealMatrix matrix) { ... }", "private void decompose() { ... }", "public RealMatrix getV() { ... }", "public RealMatrix getD() { ... }", "public RealMatrix getVT() { ... }", "public double[] getRealEigenvalues() { ... }", "public double getRealEigenvalue(int i) { ... }", "public double[] getImagEigenvalues() { ... }", "public double getImagEigenvalue(int i) { ... }", "public RealVector getEigenvector(int i) { ... }", "public double getDeterminant() { ... }", "public DecompositionSolver getSolver() { ... }", "private void transformToTridiagonal(RealMatrix matrix) { ... }", "private void computeGershgorinCircles() { ... }", "private void findEigenvalues() { ... }", "private List computeSplits() { ... }", "private void process1RowBlock(int index) { ... }", "private void process2RowsBlock(int index) { ... }", "private void process3RowsBlock(int index) { ... }", "private void processGeneralBlock(int n) { ... }", "private void initialSplits(int n) { ... }", "private int goodStep(int start, int end) { ... }", "private boolean flipIfWarranted(int n, int step) { ... }", "private double[] eigenvaluesRange(int index, int n) { ... }", "private int countEigenValues(double t, int index, int n) { ... }", "private void ldlTDecomposition(double lambda, int index, int n) { ... }", "private void dqds(int start, int end) { ... }", "private void dqd(int start, int end) { ... }", "private void computeShiftIncrement(int start, int end, int deflated) { ... }", "private void updateSigma(double shift) { ... }", "private void findEigenVectors() { ... }", "private ArrayRealVector findEigenvector(double eigenvalue, double[] d, double[] l) { ... }", "private void stationaryQuotientDifferenceWithShift(double[] d, double[] l, double lambda) { ... }", "private void progressiveQuotientDifferenceWithShift(double[] d, double[] l, double lambda) { ... }"]}