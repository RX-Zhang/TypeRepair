{"ClassName": "MathArrays", "Fields": ["private static final int SPLIT_FACTOR;"], "Methods": ["public static double[] scale(double val, double[] arr) { ... }", "public static void scaleInPlace(double val, double[] arr) { ... }", "public static double[] ebeAdd(double[] a, double[] b) { ... }", "public static double[] ebeSubtract(double[] a, double[] b) { ... }", "public static double[] ebeMultiply(double[] a, double[] b) { ... }", "public static double[] ebeDivide(double[] a, double[] b) { ... }", "public static double distance1(double[] p1, double[] p2) { ... }", "public static int distance1(int[] p1, int[] p2) { ... }", "public static double distance(double[] p1, double[] p2) { ... }", "public static double distance(int[] p1, int[] p2) { ... }", "public static double distanceInf(double[] p1, double[] p2) { ... }", "public static int distanceInf(int[] p1, int[] p2) { ... }", "public static boolean isMonotonic(T[] val, OrderDirection dir, boolean strict) { ... }", "public static boolean isMonotonic(double[] val, OrderDirection dir, boolean strict) { ... }", "public static boolean checkOrder(double[] val, OrderDirection dir, boolean strict, boolean abort) { ... }", "public static void checkOrder(double[] val, OrderDirection dir, boolean strict) { ... }", "public static void checkOrder(double[] val) { ... }", "public static void checkRectangular(long[][] in) { ... }", "public static void checkPositive(double[] in) { ... }", "public static void checkNonNegative(long[] in) { ... }", "public static void checkNonNegative(long[][] in) { ... }", "public static double safeNorm(double[] v) { ... }", "public static void sortInPlace(double[] x, double[] yList) { ... }", "public static void sortInPlace(double[] x, OrderDirection dir, double[] yList) { ... }", "public static int[] copyOf(int[] source) { ... }", "public static double[] copyOf(double[] source) { ... }", "public static int[] copyOf(int[] source, int len) { ... }", "public static double[] copyOf(double[] source, int len) { ... }", "public static double linearCombination(double[] a, double[] b) { ... }", "public static double linearCombination(double a1, double b1, double a2, double b2) { ... }", "public static double linearCombination(double a1, double b1, double a2, double b2, double a3, double b3) { ... }", "public static double linearCombination(double a1, double b1, double a2, double b2, double a3, double b3, double a4, double b4) { ... }", "public static boolean equals(float[] x, float[] y) { ... }", "public static boolean equalsIncludingNaN(float[] x, float[] y) { ... }", "public static boolean equals(double[] x, double[] y) { ... }", "public static boolean equalsIncludingNaN(double[] x, double[] y) { ... }", "public static double[] normalizeArray(double[] values, double normalizedSum) { ... }", "public static T[] buildArray(Field field, int length) { ... }", "public static T[][] buildArray(Field field, int rows, int columns) { ... }", "public static double[] convolve(double[] x, double[] h) { ... }"]}