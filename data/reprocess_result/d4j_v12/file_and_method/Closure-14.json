{"ClassName": "ControlFlowAnalysis", "Fields": ["private final AbstractCompiler compiler;", "private ControlFlowGraph cfg;", "private Map astPosition;", "private Map nodePriorities;", "private final Comparator priorityComparator;", "private int astPositionCounter;", "private int priorityCounter;", "private final boolean shouldTraverseFunctions;", "private final boolean edgeAnnotations;", "private Node root;", "private final Deque exceptionHandler;", "private final Multimap finallyMap;"], "Methods": [" ControlFlowGraph getCfg() { ... }", "public void process(Node externs, Node root) { ... }", "private void prioritizeFromEntryNode(DiGraphNode entry) { ... }", "public boolean shouldTraverse(NodeTraversal nodeTraversal, Node n, Node parent) { ... }", "public void visit(NodeTraversal t, Node n, Node parent) { ... }", "private void handleIf(Node node) { ... }", "private void handleWhile(Node node) { ... }", "private void handleDo(Node node) { ... }", "private void handleFor(Node forNode) { ... }", "private void handleSwitch(Node node) { ... }", "private void handleCase(Node node) { ... }", "private void handleDefault(Node node) { ... }", "private void handleWith(Node node) { ... }", "private void handleStmtList(Node node) { ... }", "private void handleFunction(Node node) { ... }", "private void handleExpr(Node node) { ... }", "private void handleThrow(Node node) { ... }", "private void handleTry(Node node) { ... }", "private void handleCatch(Node node) { ... }", "private void handleBreak(Node node) { ... }", "private void handleContinue(Node node) { ... }", "private void handleReturn(Node node) { ... }", "private void handleStmt(Node node) { ... }", "static Node computeFollowNode(Node node, ControlFlowAnalysis cfa) { ... }", "static Node computeFollowNode(Node node) { ... }", "private static Node computeFollowNode(Node fromNode, Node node, ControlFlowAnalysis cfa) { ... }", "static Node computeFallThrough(Node n) { ... }", "private void createEdge(Node fromNode, ControlFlowGraph branch, Node toNode) { ... }", "private void connectToPossibleExceptionHandler(Node cfgNode, Node target) { ... }", "private static Node getNextSiblingOfType(Node first, int types) { ... }", "public static boolean isBreakTarget(Node target, String label) { ... }", "private static boolean isContinueTarget(Node target, Node parent, String label) { ... }", "private static boolean matchLabel(Node target, String label) { ... }", "public static boolean mayThrowException(Node n) { ... }", "static boolean isBreakStructure(Node n, boolean labeled) { ... }", "static boolean isContinueStructure(Node n) { ... }", "static Node getExceptionHandler(Node n) { ... }", "static Node getCatchHandlerForBlock(Node block) { ... }"]}