{"ClassName": "PeepholeSubstituteAlternateSyntax", "Fields": ["private static final int AND_PRECEDENCE;", "private static final int OR_PRECEDENCE;", "static final DiagnosticType INVALID_REGULAR_EXPRESSION_FLAGS;", "static final Predicate DONT_TRAVERSE_FUNCTIONS_PREDICATE;", "private static final ImmutableSet STANDARD_OBJECT_CONSTRUCTORS;", "private static final Pattern REGEXP_FLAGS_RE;"], "Methods": ["public Node optimizeSubtree(Node node) { ... }", "private Node tryReduceReturn(Node n) { ... }", "private Node tryMinimizeNot(Node n) { ... }", "private Node tryMinimizeIf(Node n) { ... }", "private void tryRemoveRepeatedStatements(Node n) { ... }", "private boolean isFoldableExpressBlock(Node n) { ... }", "private Node getBlockExpression(Node n) { ... }", "private boolean isReturnExpressBlock(Node n) { ... }", "private Node getBlockReturnExpression(Node n) { ... }", "private boolean isVarBlock(Node n) { ... }", "private Node getBlockVar(Node n) { ... }", "private boolean consumesDanglingElse(Node n) { ... }", "private boolean isLowerPrecedenceInExpression(Node n, int precedence) { ... }", "private boolean isPropertyAssignmentInExpression(Node n) { ... }", "private Node tryMinimizeCondition(Node n) { ... }", "private Node maybeReplaceChildWithNumber(Node n, Node parent, int num) { ... }", "private Node tryFoldStandardConstructors(Node n) { ... }", "private Node tryFoldLiteralConstructor(Node n) { ... }", "private FoldArrayAction isSafeToFoldArrayConstructor(Node arg) { ... }", "private Node tryFoldRegularExpressionConstructor(Node n) { ... }", "private static boolean areValidRegexpFlags(String flags) { ... }", "private static boolean areSafeFlagsToFold(String flags) { ... }", "private static Node makeForwardSlashBracketSafe(Node n) { ... }", "static boolean containsUnicodeEscape(String s) { ... }"]}