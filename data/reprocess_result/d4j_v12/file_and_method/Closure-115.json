{"ClassName": "FunctionInjector", "Fields": ["private final AbstractCompiler compiler;", "private final Supplier safeNameIdSupplier;", "private final boolean allowDecomposition;", "private Set knownConstants;", "private final boolean assumeStrictThis;", "private final boolean assumeMinimumCapture;", "private static final int NAME_COST_ESTIMATE;", "private static final int COMMA_COST;", "private static final int PAREN_COST;"], "Methods": [" boolean doesFunctionMeetMinimumRequirements(String fnName, Node fnNode) { ... }", " CanInlineResult canInlineReferenceToFunction(NodeTraversal t, Node callNode, Node fnNode, Set needAliases, InliningMode mode, boolean referencesThis, boolean containsFunctions) { ... }", "private boolean isSupportedCallType(Node callNode) { ... }", " Node inline(Node callNode, String fnName, Node fnNode, InliningMode mode) { ... }", "private Node inlineReturnValue(Node callNode, Node fnNode) { ... }", "private CallSiteType classifyCallSite(Node callNode) { ... }", "private ExpressionDecomposer getDecomposer() { ... }", " void maybePrepareCall(Node callNode) { ... }", "private Node inlineFunction(Node callNode, Node fnNode, String fnName) { ... }", " boolean isDirectCallNodeReplacementPossible(Node fnNode) { ... }", "private CanInlineResult canInlineReferenceAsStatementBlock(NodeTraversal t, Node callNode, Node fnNode, Set namesToAlias) { ... }", "private boolean callMeetsBlockInliningRequirements(NodeTraversal t, Node callNode, Node fnNode, Set namesToAlias) { ... }", "private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) { ... }", " boolean inliningLowersCost(JSModule fnModule, Node fnNode, Collection refs, Set namesToAlias, boolean isRemovable, boolean referencesThis) { ... }", "private boolean doesLowerCost(Node fnNode, int callCost, int directInlines, int costDeltaDirect, int blockInlines, int costDeltaBlock, boolean removable) { ... }", "private static int estimateCallCost(Node fnNode, boolean referencesThis) { ... }", "private static int inlineCostDelta(Node fnNode, Set namesToAlias, InliningMode mode) { ... }", "public void setKnownConstants(Set knownConstants) { ... }"]}