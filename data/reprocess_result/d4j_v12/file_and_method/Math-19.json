{"ClassName": "CMAESOptimizer", "Fields": ["public static final int DEFAULT_CHECKFEASABLECOUNT;", "public static final double DEFAULT_STOPFITNESS;", "public static final boolean DEFAULT_ISACTIVECMA;", "public static final int DEFAULT_MAXITERATIONS;", "public static final int DEFAULT_DIAGONALONLY;", "public static final RandomGenerator DEFAULT_RANDOMGENERATOR;", "private int lambda;", "private boolean isActiveCMA;", "private int checkFeasableCount;", "private double[][] boundaries;", "private double[] inputSigma;", "private int dimension;", "private int diagonalOnly;", "private boolean isMinimize;", "private boolean generateStatistics;", "private int maxIterations;", "private double stopFitness;", "private double stopTolUpX;", "private double stopTolX;", "private double stopTolFun;", "private double stopTolHistFun;", "private int mu;", "private double logMu2;", "private RealMatrix weights;", "private double mueff;", "private double sigma;", "private double cc;", "private double cs;", "private double damps;", "private double ccov1;", "private double ccovmu;", "private double chiN;", "private double ccov1Sep;", "private double ccovmuSep;", "private RealMatrix xmean;", "private RealMatrix pc;", "private RealMatrix ps;", "private double normps;", "private RealMatrix B;", "private RealMatrix D;", "private RealMatrix BD;", "private RealMatrix diagD;", "private RealMatrix C;", "private RealMatrix diagC;", "private int iterations;", "private double[] fitnessHistory;", "private int historySize;", "private RandomGenerator random;", "private List statisticsSigmaHistory;", "private List statisticsMeanHistory;", "private List statisticsFitnessHistory;", "private List statisticsDHistory;"], "Methods": ["public List getStatisticsSigmaHistory() { ... }", "public List getStatisticsMeanHistory() { ... }", "public List getStatisticsFitnessHistory() { ... }", "public List getStatisticsDHistory() { ... }", "protected PointValuePair doOptimize() { ... }", "private void checkParameters() { ... }", "private void initializeCMA(double[] guess) { ... }", "private boolean updateEvolutionPaths(RealMatrix zmean, RealMatrix xold) { ... }", "private void updateCovarianceDiagonalOnly(boolean hsig, RealMatrix bestArz, RealMatrix xold) { ... }", "private void updateCovariance(boolean hsig, RealMatrix bestArx, RealMatrix arz, int[] arindex, RealMatrix xold) { ... }", "private void updateBD(double negccov) { ... }", "private static void push(double[] vals, double val) { ... }", "private int[] sortedIndices(double[] doubles) { ... }", "private static RealMatrix log(RealMatrix m) { ... }", "private static RealMatrix sqrt(RealMatrix m) { ... }", "private static RealMatrix square(RealMatrix m) { ... }", "private static RealMatrix times(RealMatrix m, RealMatrix n) { ... }", "private static RealMatrix divide(RealMatrix m, RealMatrix n) { ... }", "private static RealMatrix selectColumns(RealMatrix m, int[] cols) { ... }", "private static RealMatrix triu(RealMatrix m, int k) { ... }", "private static RealMatrix sumRows(RealMatrix m) { ... }", "private static RealMatrix diag(RealMatrix m) { ... }", "private static void copyColumn(RealMatrix m1, int col1, RealMatrix m2, int col2) { ... }", "private static RealMatrix ones(int n, int m) { ... }", "private static RealMatrix eye(int n, int m) { ... }", "private static RealMatrix zeros(int n, int m) { ... }", "private static RealMatrix repmat(RealMatrix mat, int n, int m) { ... }", "private static RealMatrix sequence(double start, double end, double step) { ... }", "private static double max(RealMatrix m) { ... }", "private static double min(RealMatrix m) { ... }", "private static double max(double[] m) { ... }", "private static double min(double[] m) { ... }", "private static int[] inverse(int[] indices) { ... }", "private static int[] reverse(int[] indices) { ... }", "private double[] randn(int size) { ... }", "private RealMatrix randn1(int size, int popSize) { ... }"]}