{"ClassName": "NameAnalyzer", "Fields": ["private final AbstractCompiler compiler;", "private final Map allNames;", "private DiGraph referenceGraph;", "private final ListMultimap scopes;", "private static final String PROTOTYPE_SUBSTRING;", "private static final int PROTOTYPE_SUBSTRING_LEN;", "private static final int PROTOTYPE_SUFFIX_LEN;", "private static final String WINDOW;", "private static final String FUNCTION;", "static final Set DEFAULT_GLOBAL_NAMES;", "private final boolean removeUnreferenced;", "private final Set globalNames;", "private final AstChangeProxy changeProxy;", "private final Set externalNames;", "private final List refNodes;", "private final Map aliases;", "private static final Predicate NON_LOCAL_RESULT_PREDICATE;"], "Methods": ["public void process(Node externs, Node root) { ... }", "private void recordAlias(String fromName, String toName) { ... }", "private void recordReference(String fromName, String toName, RefType depType) { ... }", " void removeUnreferenced() { ... }", " String getHtmlReport() { ... }", "private void appendListItem(StringBuilder sb, String text) { ... }", "private String nameLink(String name) { ... }", "private String nameAnchor(String name) { ... }", "private JsName getName(String name, boolean canCreate) { ... }", "private void createName(String name) { ... }", "private void referenceAliases() { ... }", "private void referenceParentNames() { ... }", "private NameInformation createNameInformation(NodeTraversal t, Node n) { ... }", "private NameInformation createNameInformation(String name, Scope scope, Node rootNameNode) { ... }", "private boolean isExternallyReferenceable(Scope scope, String name) { ... }", "private List getDependencyScope(Node n) { ... }", "private List getEnclosingFunctionDependencyScope(NodeTraversal t) { ... }", "private void calculateReferences() { ... }", "private int countOf(TriState isClass, TriState referenced) { ... }", "private List getSideEffectNodes(Node n) { ... }", "private void replaceWithRhs(Node parent, Node n) { ... }", "private void replaceTopLevelExpressionWithRhs(Node parent, Node n) { ... }", "private boolean valueConsumedByParent(Node n, Node parent) { ... }", "private Node collapseReplacements(List replacements) { ... }", "private List getRhsSubexpressions(Node n) { ... }"]}