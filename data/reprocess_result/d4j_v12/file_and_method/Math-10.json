{"ClassName": "DSCompiler", "Fields": ["private static AtomicReference compilers;", "private final int parameters;", "private final int order;", "private final int[][] sizes;", "private final int[][] derivativesIndirection;", "private final int[] lowerIndirection;", "private final int[][][] multIndirection;", "private final int[][][] compIndirection;"], "Methods": ["public static DSCompiler getCompiler(int parameters, int order) { ... }", "private static int[][] compileSizes(int parameters, int order, DSCompiler valueCompiler) { ... }", "private static int[][] compileDerivativesIndirection(int parameters, int order, DSCompiler valueCompiler, DSCompiler derivativeCompiler) { ... }", "private static int[] compileLowerIndirection(int parameters, int order, DSCompiler valueCompiler, DSCompiler derivativeCompiler) { ... }", "private static int[][][] compileMultiplicationIndirection(int parameters, int order, DSCompiler valueCompiler, DSCompiler derivativeCompiler, int[] lowerIndirection) { ... }", "private static int[][][] compileCompositionIndirection(int parameters, int order, DSCompiler valueCompiler, DSCompiler derivativeCompiler, int[][] sizes, int[][] derivativesIndirection) { ... }", "public int getPartialDerivativeIndex(int orders) { ... }", "private static int getPartialDerivativeIndex(int parameters, int order, int[][] sizes, int orders) { ... }", "private static int convertIndex(int index, int srcP, int[][] srcDerivativesIndirection, int destP, int destO, int[][] destSizes) { ... }", "public int[] getPartialDerivativeOrders(int index) { ... }", "public int getFreeParameters() { ... }", "public int getOrder() { ... }", "public int getSize() { ... }", "public void linearCombination(double a1, double[] c1, int offset1, double a2, double[] c2, int offset2, double[] result, int resultOffset) { ... }", "public void linearCombination(double a1, double[] c1, int offset1, double a2, double[] c2, int offset2, double a3, double[] c3, int offset3, double[] result, int resultOffset) { ... }", "public void linearCombination(double a1, double[] c1, int offset1, double a2, double[] c2, int offset2, double a3, double[] c3, int offset3, double a4, double[] c4, int offset4, double[] result, int resultOffset) { ... }", "public void add(double[] lhs, int lhsOffset, double[] rhs, int rhsOffset, double[] result, int resultOffset) { ... }", "public void subtract(double[] lhs, int lhsOffset, double[] rhs, int rhsOffset, double[] result, int resultOffset) { ... }", "public void multiply(double[] lhs, int lhsOffset, double[] rhs, int rhsOffset, double[] result, int resultOffset) { ... }", "public void divide(double[] lhs, int lhsOffset, double[] rhs, int rhsOffset, double[] result, int resultOffset) { ... }", "public void remainder(double[] lhs, int lhsOffset, double[] rhs, int rhsOffset, double[] result, int resultOffset) { ... }", "public void pow(double[] operand, int operandOffset, double p, double[] result, int resultOffset) { ... }", "public void pow(double[] operand, int operandOffset, int n, double[] result, int resultOffset) { ... }", "public void pow(double[] x, int xOffset, double[] y, int yOffset, double[] result, int resultOffset) { ... }", "public void rootN(double[] operand, int operandOffset, int n, double[] result, int resultOffset) { ... }", "public void exp(double[] operand, int operandOffset, double[] result, int resultOffset) { ... }", "public void expm1(double[] operand, int operandOffset, double[] result, int resultOffset) { ... }", "public void log(double[] operand, int operandOffset, double[] result, int resultOffset) { ... }", "public void log1p(double[] operand, int operandOffset, double[] result, int resultOffset) { ... }", "public void log10(double[] operand, int operandOffset, double[] result, int resultOffset) { ... }", "public void cos(double[] operand, int operandOffset, double[] result, int resultOffset) { ... }", "public void sin(double[] operand, int operandOffset, double[] result, int resultOffset) { ... }", "public void tan(double[] operand, int operandOffset, double[] result, int resultOffset) { ... }", "public void acos(double[] operand, int operandOffset, double[] result, int resultOffset) { ... }", "public void asin(double[] operand, int operandOffset, double[] result, int resultOffset) { ... }", "public void atan(double[] operand, int operandOffset, double[] result, int resultOffset) { ... }", "public void atan2(double[] y, int yOffset, double[] x, int xOffset, double[] result, int resultOffset) { ... }", "public void cosh(double[] operand, int operandOffset, double[] result, int resultOffset) { ... }", "public void sinh(double[] operand, int operandOffset, double[] result, int resultOffset) { ... }", "public void tanh(double[] operand, int operandOffset, double[] result, int resultOffset) { ... }", "public void acosh(double[] operand, int operandOffset, double[] result, int resultOffset) { ... }", "public void asinh(double[] operand, int operandOffset, double[] result, int resultOffset) { ... }", "public void atanh(double[] operand, int operandOffset, double[] result, int resultOffset) { ... }", "public void compose(double[] operand, int operandOffset, double[] f, double[] result, int resultOffset) { ... }", "public double taylor(double[] ds, int dsOffset, double delta) { ... }", "public void checkCompatibility(DSCompiler compiler) { ... }"]}