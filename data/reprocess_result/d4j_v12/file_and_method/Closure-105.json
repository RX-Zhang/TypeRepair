{"ClassName": "FoldConstants", "Fields": ["static final DiagnosticType DIVIDE_BY_0_ERROR;", "static final DiagnosticType INVALID_GETELEM_INDEX_ERROR;", "static final DiagnosticType INDEX_OUT_OF_BOUNDS_ERROR;", "static final DiagnosticType NEGATING_A_NON_NUMBER_ERROR;", "static final DiagnosticType INVALID_REGULAR_EXPRESSION_FLAGS;", "static final DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE;", "static final DiagnosticType SHIFT_AMOUNT_OUT_OF_BOUNDS;", "static final DiagnosticType FRACTIONAL_BITWISE_OPERAND;", "private static final int AND_PRECEDENCE;", "private static final int OR_PRECEDENCE;", "private final AbstractCompiler compiler;", "private static final Pattern REGEXP_FLAGS_RE;"], "Methods": ["public void process(Node externs, Node jsRoot) { ... }", "public void visit(NodeTraversal t, Node n, Node parent) { ... }", "private void error(NodeTraversal t, DiagnosticType diagnostic, Node n) { ... }", "private boolean consumesDanglingElse(Node n) { ... }", "private void tryFoldAssign(NodeTraversal t, Node n, Node left, Node right) { ... }", " void tryFoldBlock(NodeTraversal t, Node n, Node parent) { ... }", " boolean tryFoldHookIf(NodeTraversal t, Node n, Node parent) { ... }", "private boolean tryMinimizeNot(NodeTraversal t, Node n, Node parent) { ... }", " void tryMinimizeIf(NodeTraversal t, Node n, Node parent) { ... }", "private void tryRemoveRepeatedStatements(NodeTraversal t, Node n) { ... }", "private void tryReduceReturn(NodeTraversal t, Node n) { ... }", "private boolean isPropertyAssignmentInExpression(NodeTraversal t, Node n) { ... }", "private boolean isLowerPrecedenceInExpression(NodeTraversal t, Node n, int precedence) { ... }", " void tryFoldAndOr(NodeTraversal t, Node n, Node left, Node right, Node parent) { ... }", " void tryFoldLeftChildAdd(NodeTraversal t, Node n, Node left, Node right, Node parent) { ... }", " void tryFoldAdd(NodeTraversal t, Node n, Node left, Node right, Node parent) { ... }", " void tryFoldArithmetic(NodeTraversal t, Node n, Node left, Node right, Node parent) { ... }", " void tryFoldBitAndOr(NodeTraversal t, Node n, Node left, Node right, Node parent) { ... }", " void tryFoldShift(NodeTraversal t, Node n, Node left, Node right, Node parent) { ... }", " void tryFoldComparison(NodeTraversal t, Node n, Node left, Node right, Node parent) { ... }", " void tryFoldStringIndexOf(NodeTraversal t, Node n, Node left, Node right, Node parent) { ... }", " void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right, Node parent) { ... }", " void tryFoldGetElem(NodeTraversal t, Node n, Node left, Node right, Node parent) { ... }", " void tryFoldGetProp(NodeTraversal t, Node n, Node left, Node right, Node parent) { ... }", " void tryFoldRegularExpressionConstructor(NodeTraversal t, Node n, Node parent) { ... }", "private static boolean areValidRegexpFlags(String flags) { ... }", "private static boolean areSafeFlagsToFold(String flags) { ... }", "private static Node makeForwardSlashBracketSafe(Node n) { ... }", " void tryFoldLiteralConstructor(NodeTraversal t, Node n, Node parent, String className, int type) { ... }", "static boolean containsUnicodeEscape(String s) { ... }", " void tryFoldWhile(NodeTraversal t, Node n, Node parent) { ... }", " void tryFoldFor(NodeTraversal t, Node n, Node parent) { ... }", " void tryFoldDo(NodeTraversal t, Node n, Node parent) { ... }", " boolean hasBreakOrContinue(Node n) { ... }", " void tryMinimizeCondition(NodeTraversal t, Node n, Node parent) { ... }", "private void tryFoldForCondition(Node n, Node parent) { ... }", "private void maybeReplaceChildWithNumber(NodeTraversal t, Node n, Node parent, int num) { ... }", "private boolean isExpressBlock(Node n) { ... }", "private Node getBlockExpression(Node n) { ... }", "private boolean isReturnExpressBlock(Node n) { ... }", "private Node getBlockReturnExpression(Node n) { ... }", "private boolean isVarBlock(Node n) { ... }", "private Node getBlockVar(Node n) { ... }"]}