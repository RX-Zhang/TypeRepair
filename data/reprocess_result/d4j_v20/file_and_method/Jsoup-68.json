{"ClassName": "HtmlTreeBuilder", "Fields": ["static final String[] TagsSearchInScope;", "static final String[] TagSearchList;", "static final String[] TagSearchButton;", "static final String[] TagSearchTableScope;", "static final String[] TagSearchSelectScope;", "static final String[] TagSearchEndTags;", "static final String[] TagSearchSpecial;", "public static final int MaxScopeSearchDepth;", "private HtmlTreeBuilderState state;", "private HtmlTreeBuilderState originalState;", "private boolean baseUriSetFromDoc;", "private Element headElement;", "private FormElement formElement;", "private Element contextElement;", "private ArrayList formattingElements;", "private List pendingTableCharacters;", "private Token emptyEnd;", "private boolean framesetOk;", "private boolean fosterInserts;", "private boolean fragmentParsing;", "private String[] specificScopeTarget;"], "Methods": [" ParseSettings defaultSettings() { ... }", "protected void initialiseParse(Reader input, String baseUri, ParseErrorList errors, ParseSettings settings) { ... }", " List parseFragment(String inputFragment, Element context, String baseUri, ParseErrorList errors, ParseSettings settings) { ... }", "protected boolean process(Token token) { ... }", " boolean process(Token token, HtmlTreeBuilderState state) { ... }", " void transition(HtmlTreeBuilderState state) { ... }", " HtmlTreeBuilderState state() { ... }", " void markInsertionMode() { ... }", " HtmlTreeBuilderState originalState() { ... }", " void framesetOk(boolean framesetOk) { ... }", " boolean framesetOk() { ... }", " Document getDocument() { ... }", " String getBaseUri() { ... }", " void maybeSetBaseUri(Element base) { ... }", " boolean isFragmentParsing() { ... }", " void error(HtmlTreeBuilderState state) { ... }", " Element insert(Token startTag) { ... }", " Element insertStartTag(String startTagName) { ... }", " void insert(Element el) { ... }", " Element insertEmpty(Token startTag) { ... }", " FormElement insertForm(Token startTag, boolean onStack) { ... }", " void insert(Token commentToken) { ... }", " void insert(Token characterToken) { ... }", "private void insertNode(Node node) { ... }", " Element pop() { ... }", " void push(Element element) { ... }", " ArrayList getStack() { ... }", " boolean onStack(Element el) { ... }", "private boolean isElementInQueue(ArrayList queue, Element element) { ... }", " Element getFromStack(String elName) { ... }", " boolean removeFromStack(Element el) { ... }", " void popStackToClose(String elName) { ... }", " void popStackToClose(String elNames) { ... }", " void popStackToBefore(String elName) { ... }", " void clearStackToTableContext() { ... }", " void clearStackToTableBodyContext() { ... }", " void clearStackToTableRowContext() { ... }", "private void clearStackToContext(String nodeNames) { ... }", " Element aboveOnStack(Element el) { ... }", " void insertOnStackAfter(Element after, Element in) { ... }", " void replaceOnStack(Element out, Element in) { ... }", "private void replaceInQueue(ArrayList queue, Element out, Element in) { ... }", " void resetInsertionMode() { ... }", "private boolean inSpecificScope(String targetName, String[] baseTypes, String[] extraTypes) { ... }", "private boolean inSpecificScope(String[] targetNames, String[] baseTypes, String[] extraTypes) { ... }", " boolean inScope(String[] targetNames) { ... }", " boolean inScope(String targetName) { ... }", " boolean inScope(String targetName, String[] extras) { ... }", " boolean inListItemScope(String targetName) { ... }", " boolean inButtonScope(String targetName) { ... }", " boolean inTableScope(String targetName) { ... }", " boolean inSelectScope(String targetName) { ... }", " void setHeadElement(Element headElement) { ... }", " Element getHeadElement() { ... }", " boolean isFosterInserts() { ... }", " void setFosterInserts(boolean fosterInserts) { ... }", " FormElement getFormElement() { ... }", " void setFormElement(FormElement formElement) { ... }", " void newPendingTableCharacters() { ... }", " List getPendingTableCharacters() { ... }", " void setPendingTableCharacters(List pendingTableCharacters) { ... }", " void generateImpliedEndTags(String excludeTag) { ... }", " void generateImpliedEndTags() { ... }", " boolean isSpecial(Element el) { ... }", " Element lastFormattingElement() { ... }", " Element removeLastFormattingElement() { ... }", " void pushActiveFormattingElements(Element in) { ... }", "private boolean isSameFormattingElement(Element a, Element b) { ... }", " void reconstructFormattingElements() { ... }", " void clearFormattingElementsToLastMarker() { ... }", " void removeFromActiveFormattingElements(Element el) { ... }", " boolean isInActiveFormattingElements(Element el) { ... }", " Element getActiveFormattingElement(String nodeName) { ... }", " void replaceActiveFormattingElement(Element out, Element in) { ... }", " void insertMarkerToFormattingElements() { ... }", " void insertInFosterParent(Node in) { ... }", "public String toString() { ... }"]}