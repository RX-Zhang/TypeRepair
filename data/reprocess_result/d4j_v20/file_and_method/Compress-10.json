{"ClassName": "ZipFile", "Fields": ["private static final int HASH_SIZE;", "static final int NIBLET_MASK;", "static final int BYTE_SHIFT;", "private static final int POS_0;", "private static final int POS_1;", "private static final int POS_2;", "private static final int POS_3;", "private final Map entries;", "private final Map nameMap;", "private final String encoding;", "private final ZipEncoding zipEncoding;", "private final String archiveName;", "private final RandomAccessFile archive;", "private final boolean useUnicodeExtraFields;", "private boolean closed;", "private static final int CFH_LEN;", "private static final long CFH_SIG;", "private static final int MIN_EOCD_SIZE;", "private static final int MAX_EOCD_SIZE;", "private static final int CFD_LOCATOR_OFFSET;", "private static final int ZIP64_EOCDL_LENGTH;", "private static final int ZIP64_EOCDL_LOCATOR_OFFSET;", "private static final int ZIP64_EOCD_CFD_LOCATOR_OFFSET;", "private static final long LFH_OFFSET_FOR_FILENAME_LENGTH;", "private final Comparator OFFSET_COMPARATOR;"], "Methods": ["public String getEncoding() { ... }", "public void close() { ... }", "public static void closeQuietly(ZipFile zipfile) { ... }", "public Enumeration getEntries() { ... }", "public Enumeration getEntriesInPhysicalOrder() { ... }", "public ZipArchiveEntry getEntry(String name) { ... }", "public boolean canReadEntryData(ZipArchiveEntry ze) { ... }", "public InputStream getInputStream(ZipArchiveEntry ze) { ... }", "protected void finalize() { ... }", "private Map populateFromCentralDirectory() { ... }", "private void readCentralDirectoryEntry(Map noUTF8Flag) { ... }", "private void setSizesAndOffsetFromZip64Extra(ZipArchiveEntry ze, OffsetEntry offset, int diskStart) { ... }", "private void positionAtCentralDirectory() { ... }", "private void positionAtCentralDirectory64() { ... }", "private void positionAtCentralDirectory32() { ... }", "private boolean tryToLocateSignature(long minDistanceFromEnd, long maxDistanceFromEnd, byte[] sig) { ... }", "private void skipBytes(int count) { ... }", "private void resolveLocalFileHeaderData(Map entriesWithoutUTF8Flag) { ... }", "private boolean startsWithLocalFileHeader() { ... }"]}