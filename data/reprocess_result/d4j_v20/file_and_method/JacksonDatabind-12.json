{"ClassName": "MapDeserializer", "Fields": ["private static final long serialVersionUID;", "protected final JavaType _mapType;", "protected final KeyDeserializer _keyDeserializer;", "protected boolean _standardStringKey;", "protected final JsonDeserializer _valueDeserializer;", "protected final TypeDeserializer _valueTypeDeserializer;", "protected final ValueInstantiator _valueInstantiator;", "protected final boolean _hasDefaultCreator;", "protected JsonDeserializer _delegateDeserializer;", "protected PropertyBasedCreator _propertyBasedCreator;", "protected HashSet _ignorableProperties;"], "Methods": ["protected MapDeserializer withResolved(KeyDeserializer keyDeser, TypeDeserializer valueTypeDeser, JsonDeserializer valueDeser, HashSet ignorable) { ... }", "protected final boolean _isStdKeyDeser(JavaType mapType, KeyDeserializer keyDeser) { ... }", "public void setIgnorableProperties(String[] ignorable) { ... }", "public void resolve(DeserializationContext ctxt) { ... }", "public JsonDeserializer createContextual(DeserializationContext ctxt, BeanProperty property) { ... }", "public JavaType getContentType() { ... }", "public JsonDeserializer getContentDeserializer() { ... }", "public boolean isCachable() { ... }", "public Map deserialize(JsonParser jp, DeserializationContext ctxt) { ... }", "public Map deserialize(JsonParser jp, DeserializationContext ctxt, Map result) { ... }", "public Object deserializeWithType(JsonParser jp, DeserializationContext ctxt, TypeDeserializer typeDeserializer) { ... }", "public final Class getMapClass() { ... }", "public JavaType getValueType() { ... }", "protected final void _readAndBind(JsonParser jp, DeserializationContext ctxt, Map result) { ... }", "protected final void _readAndBindStringMap(JsonParser jp, DeserializationContext ctxt, Map result) { ... }", "public Map _deserializeUsingCreator(JsonParser jp, DeserializationContext ctxt) { ... }", "protected void wrapAndThrow(Throwable t, Object ref) { ... }", "protected void wrapAndThrow(Throwable t, Object ref, String key) { ... }", "private void handleUnresolvedReference(JsonParser jp, MapReferringAccumulator accumulator, Object key, UnresolvedForwardReference reference) { ... }"]}