{"ClassName": "Base64", "Fields": ["static final int CHUNK_SIZE;", "static final byte[] CHUNK_SEPARATOR;", "private static final byte[] STANDARD_ENCODE_TABLE;", "private static final byte[] URL_SAFE_ENCODE_TABLE;", "private static final byte PAD;", "private static final byte[] DECODE_TABLE;", "private static final int MASK_6BITS;", "private static final int MASK_8BITS;", "private final byte[] encodeTable;", "private final int lineLength;", "private final byte[] lineSeparator;", "private final int decodeSize;", "private final int encodeSize;", "private byte[] buf;", "private int pos;", "private int readPos;", "private int currentLinePos;", "private int modulus;", "private boolean eof;", "private int x;"], "Methods": ["public boolean isUrlSafe() { ... }", " boolean hasData() { ... }", " int avail() { ... }", "private void resizeBuf() { ... }", " int readResults(byte[] b, int bPos, int bAvail) { ... }", " void setInitialBuffer(byte[] out, int outPos, int outAvail) { ... }", " void encode(byte[] in, int inPos, int inAvail) { ... }", " void decode(byte[] in, int inPos, int inAvail) { ... }", "public static boolean isBase64(byte octet) { ... }", "public static boolean isArrayByteBase64(byte[] arrayOctet) { ... }", "private static boolean containsBase64Byte(byte[] arrayOctet) { ... }", "public static byte[] encodeBase64(byte[] binaryData) { ... }", "public static byte[] encodeBase64URLSafe(byte[] binaryData) { ... }", "public static byte[] encodeBase64Chunked(byte[] binaryData) { ... }", "public Object decode(Object pObject) { ... }", "public byte[] decode(byte[] pArray) { ... }", "public static byte[] encodeBase64(byte[] binaryData, boolean isChunked) { ... }", "public static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe) { ... }", "public static byte[] decodeBase64(byte[] base64Data) { ... }", "static byte[] discardWhitespace(byte[] data) { ... }", "private static boolean isWhiteSpace(byte byteToCheck) { ... }", "static byte[] discardNonBase64(byte[] data) { ... }", "public Object encode(Object pObject) { ... }", "public byte[] encode(byte[] pArray) { ... }", "public static BigInteger decodeInteger(byte[] pArray) { ... }", "public static byte[] encodeInteger(BigInteger bigInt) { ... }", "static byte[] toIntegerBytes(BigInteger bigInt) { ... }"]}