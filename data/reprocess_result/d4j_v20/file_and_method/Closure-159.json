{"ClassName": "InlineFunctions", "Fields": ["private final Map fns;", "private final Map anonFns;", "private final AbstractCompiler compiler;", "private final FunctionInjector injector;", "private final boolean blockFunctionInliningEnabled;", "private final boolean inlineGlobalFunctions;", "private final boolean inlineLocalFunctions;", "private SpecializeModule specializationState;"], "Methods": [" FunctionState getOrCreateFunctionState(String fnName) { ... }", "public void enableSpecialization(SpecializeModule specializationState) { ... }", "public void process(Node externs, Node root) { ... }", "private void maybeAddFunction(Function fn, JSModule module) { ... }", "private boolean hasLocalNames(Node fnNode) { ... }", "private static Node getContainingFunction(NodeTraversal t) { ... }", "private boolean isCandidateFunction(Function fn) { ... }", "static boolean isCandidateUsage(Node name) { ... }", "private void trimCanidatesNotMeetingMinimumRequirements() { ... }", " void trimCanidatesUsingOnCost() { ... }", "private boolean mimimizeCost(FunctionState fs) { ... }", "private boolean inliningLowersCost(FunctionState fs) { ... }", "private void resolveInlineConflicts() { ... }", "private void resolveInlineConflictsForFunction(FunctionState fs) { ... }", "private Set findCalledFunctions(Node node) { ... }", "private void findCalledFunctions(Node node, Set changed) { ... }", "private void decomposeExpressions(Set fnNames) { ... }", " void removeInlinedFunctions() { ... }", " void verifyAllReferencesInlined(FunctionState fs) { ... }"]}