{"ClassName": "Node", "Fields": [" Node parentNode;", " List childNodes;", " Attributes attributes;", " String baseUri;", " int siblingIndex;"], "Methods": ["public abstract String nodeName() { ... }", "public String attr(String attributeKey) { ... }", "public Attributes attributes() { ... }", "public Node attr(String attributeKey, String attributeValue) { ... }", "public boolean hasAttr(String attributeKey) { ... }", "public Node removeAttr(String attributeKey) { ... }", "public String baseUri() { ... }", "public void setBaseUri(String baseUri) { ... }", "public String absUrl(String attributeKey) { ... }", "public Node childNode(int index) { ... }", "public List childNodes() { ... }", "protected Node[] childNodesAsArray() { ... }", "public Node parent() { ... }", "public Document ownerDocument() { ... }", "public void remove() { ... }", "public Node before(String html) { ... }", "public Node before(Node node) { ... }", "public Node after(String html) { ... }", "public Node after(Node node) { ... }", "private void addSiblingHtml(int index, String html) { ... }", "public Node wrap(String html) { ... }", "private Element getDeepChild(Element el) { ... }", "public void replaceWith(Node in) { ... }", "protected void setParentNode(Node parentNode) { ... }", "protected void replaceChild(Node out, Node in) { ... }", "protected void removeChild(Node out) { ... }", "protected void addChildren(Node children) { ... }", "protected void addChildren(int index, Node children) { ... }", "private void reparentChild(Node child) { ... }", "private void reindexChildren() { ... }", "public List siblingNodes() { ... }", "public Node nextSibling() { ... }", "public Node previousSibling() { ... }", "public int siblingIndex() { ... }", "protected void setSiblingIndex(int siblingIndex) { ... }", "public String outerHtml() { ... }", "protected void outerHtml(StringBuilder accum) { ... }", "private Document getOutputSettings() { ... }", "abstract void outerHtmlHead(StringBuilder accum, int depth, Document out) { ... }", "abstract void outerHtmlTail(StringBuilder accum, int depth, Document out) { ... }", "public String toString() { ... }", "protected void indent(StringBuilder accum, int depth, Document out) { ... }", "public boolean equals(Object o) { ... }", "public int hashCode() { ... }", "public Node clone() { ... }", "protected Node doClone(Node parent) { ... }"]}