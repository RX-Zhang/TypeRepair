{"ClassName": "Compiler", "Fields": ["static final DiagnosticType MODULE_DEPENDENCY_ERROR;", "static final DiagnosticType MISSING_ENTRY_ERROR;", " CompilerOptions options;", "private PassConfig passes;", "private List externs;", "private List modules;", "private JSModuleGraph moduleGraph;", "private List inputs;", "private ErrorManager errorManager;", "private WarningsGuard warningsGuard;", " Node externsRoot;", " Node jsRoot;", " Node externAndJsRoot;", "private Map inputsByName;", "private SourceMap sourceMap;", "private String externExports;", "private int uniqueNameId;", "private boolean useThreads;", "private boolean hasRegExpGlobalReferences;", "private FunctionInformationMap functionInformationMap;", "private final StringBuilder debugLog;", " CodingConvention defaultCodingConvention;", "private JSTypeRegistry typeRegistry;", "private Config parserConfig;", "private ReverseAbstractInterpreter abstractInterpreter;", "private TypeValidator typeValidator;", "public PerformanceTracker tracker;", "private final com oldErrorReporter;", "private final ErrorReporter defaultErrorReporter;", "public static final DiagnosticType OPTIMIZE_LOOP_ERROR;", "public static final DiagnosticType MOTION_ITERATIONS_ERROR;", "private static final long COMPILER_STACK_SIZE;", "private static final Logger logger;", "private final PrintStream outStream;", "private GlobalVarReferenceMap globalRefMap;", "private static final DiagnosticType EMPTY_MODULE_LIST_ERROR;", "private static final DiagnosticType EMPTY_ROOT_MODULE_ERROR;", "static final DiagnosticType DUPLICATE_INPUT;", "static final DiagnosticType DUPLICATE_EXTERN_INPUT;", "private final PassFactory sanityCheck;", "private Tracer currentTracer;", "private String currentPassName;", "protected final CodeChangeHandler recentChange;", "private final List codeChangeHandlers;"], "Methods": ["public void setErrorManager(ErrorManager errorManager) { ... }", "private MessageFormatter createMessageFormatter() { ... }", "public void initOptions(CompilerOptions options) { ... }", "public void init(JSSourceFile[] externs, JSSourceFile[] inputs, CompilerOptions options) { ... }", "public void init(List externs, List inputs, CompilerOptions options) { ... }", "public void init(JSSourceFile[] externs, JSModule[] modules, CompilerOptions options) { ... }", "public void initModules(List externs, List modules, CompilerOptions options) { ... }", "private void initBasedOnOptions() { ... }", "private List makeCompilerInput(List files, boolean isExtern) { ... }", "private void checkFirstModule(List modules) { ... }", "private static void fillEmptyModules(List modules) { ... }", "public void rebuildInputsFromModules() { ... }", "private static List getAllInputsFromModules(List modules) { ... }", " void initInputsByNameMap() { ... }", "public Result compile(JSSourceFile extern, JSSourceFile input, CompilerOptions options) { ... }", "public Result compile(JSSourceFile extern, JSSourceFile[] input, CompilerOptions options) { ... }", "public Result compile(JSSourceFile extern, JSModule[] modules, CompilerOptions options) { ... }", "public Result compile(JSSourceFile[] externs, JSSourceFile[] inputs, CompilerOptions options) { ... }", "public Result compile(List externs, List inputs, CompilerOptions options) { ... }", "public Result compile(JSSourceFile[] externs, JSModule[] modules, CompilerOptions options) { ... }", "public Result compileModules(List externs, List modules, CompilerOptions options) { ... }", "private Result compile() { ... }", "public void disableThreads() { ... }", "private T runInCompilerThread(Callable callable) { ... }", "static T runCallableWithLargeStack(Callable callable) { ... }", "static T runCallable(Callable callable, boolean useLargeStackThread, boolean trace) { ... }", "private void compileInternal() { ... }", "public void parse() { ... }", " PassConfig getPassConfig() { ... }", " PassConfig createPassConfigInternal() { ... }", "public void setPassConfig(PassConfig passes) { ... }", " boolean precheck() { ... }", "public void check() { ... }", "private void externExports() { ... }", " void process(CompilerPass p) { ... }", "private void maybeSanityCheck() { ... }", "private void runSanityCheck() { ... }", " void removeTryCatchFinally() { ... }", " void stripCode(Set stripTypes, Set stripNameSuffixes, Set stripTypePrefixes, Set stripNamePrefixes) { ... }", "private void runCustomPasses(CustomPassExecutionTime executionTime) { ... }", " void startPass(String passName) { ... }", " void endPass() { ... }", " Tracer newTracer(String passName) { ... }", " void stopTracer(Tracer t, String passName) { ... }", "public Result getResult() { ... }", "public JSError[] getMessages() { ... }", "public JSError[] getErrors() { ... }", "public JSError[] getWarnings() { ... }", "public Node getRoot() { ... }", "private int nextUniqueNameId() { ... }", " void resetUniqueNameId() { ... }", " Supplier getUniqueNameIdSupplier() { ... }", " boolean areNodesEqualForInlining(Node n1, Node n2) { ... }", "public CompilerInput getInput(String name) { ... }", "protected void removeInput(String name) { ... }", "public CompilerInput newExternInput(String name) { ... }", " void addIncrementalSourceAst(JsAst ast) { ... }", " boolean replaceIncrementalSourceAst(JsAst ast) { ... }", " JSModuleGraph getModuleGraph() { ... }", "public JSTypeRegistry getTypeRegistry() { ... }", " ScopeCreator getTypedScopeCreator() { ... }", "public Scope getTopScope() { ... }", "public ReverseAbstractInterpreter getReverseAbstractInterpreter() { ... }", " TypeValidator getTypeValidator() { ... }", " Node parseInputs() { ... }", "public Node parse(JSSourceFile file) { ... }", " Node parseSyntheticCode(String js) { ... }", " void initCompilerOptionsIfTesting() { ... }", " Node parseSyntheticCode(String fileName, String js) { ... }", " Node parseTestCode(String js) { ... }", " ErrorReporter getDefaultErrorReporter() { ... }", "public String toSource() { ... }", "public String[] toSourceArray() { ... }", "public String toSource(JSModule module) { ... }", "public String[] toSourceArray(JSModule module) { ... }", "public void toSource(CodeBuilder cb, int inputSeqNum, Node root) { ... }", " String toSource(Node n) { ... }", "private String toSource(Node n, SourceMap sourceMap) { ... }", "public void optimize() { ... }", " void setCssRenamingMap(CssRenamingMap map) { ... }", " CssRenamingMap getCssRenamingMap() { ... }", "public void processDefines() { ... }", " boolean isInliningForbidden() { ... }", " ControlFlowGraph computeCFG() { ... }", "public void normalize() { ... }", " void prepareAst(Node root) { ... }", " void recordFunctionInformation() { ... }", " void addChangeHandler(CodeChangeHandler handler) { ... }", " void removeChangeHandler(CodeChangeHandler handler) { ... }", "public void reportCodeChange() { ... }", "public CodingConvention getCodingConvention() { ... }", "public boolean isIdeMode() { ... }", "public boolean acceptEcmaScript5() { ... }", "public LanguageMode languageMode() { ... }", "public boolean acceptConstKeyword() { ... }", " Config getParserConfig() { ... }", "public boolean isTypeCheckingEnabled() { ... }", "protected DiagnosticGroups getDiagnosticGroups() { ... }", "public void report(JSError error) { ... }", "public CheckLevel getErrorLevel(JSError error) { ... }", " void throwInternalError(String message, Exception cause) { ... }", "public int getErrorCount() { ... }", "public int getWarningCount() { ... }", " boolean hasHaltingErrors() { ... }", "public boolean hasErrors() { ... }", " void addToDebugLog(String str) { ... }", "private SourceFile getSourceFileByName(String sourceName) { ... }", "public String getSourceLine(String sourceName, int lineNumber) { ... }", "public Region getSourceRegion(String sourceName, int lineNumber) { ... }", " Node getNodeForCodeInsertion(JSModule module) { ... }", "public SourceMap getSourceMap() { ... }", " VariableMap getVariableMap() { ... }", " VariableMap getPropertyMap() { ... }", " CompilerOptions getOptions() { ... }", " FunctionInformationMap getFunctionalInformationMap() { ... }", "public static void setLoggingLevel(Level level) { ... }", "public String getAstDotGraph() { ... }", "public ErrorManager getErrorManager() { ... }", " List getInputsInOrder() { ... }", "public IntermediateState getState() { ... }", "public void setState(IntermediateState state) { ... }", " List getInputsForTesting() { ... }", " List getExternsForTesting() { ... }", " boolean hasRegExpGlobalReferences() { ... }", " void setHasRegExpGlobalReferences(boolean references) { ... }", " void updateGlobalVarReferences(Map refMapPatch, Node collectionRoot) { ... }", " ReferenceMap getGlobalVarReferences() { ... }"]}