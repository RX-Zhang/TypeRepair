{"ClassName": "TokenBuffer", "Fields": ["protected static final int DEFAULT_GENERATOR_FEATURES;", "protected ObjectCodec _objectCodec;", "protected int _generatorFeatures;", "protected boolean _closed;", "protected boolean _hasNativeTypeIds;", "protected boolean _hasNativeObjectIds;", "protected boolean _mayHaveNativeIds;", "protected Segment _first;", "protected Segment _last;", "protected int _appendAt;", "protected Object _typeId;", "protected Object _objectId;", "protected boolean _hasNativeId;", "protected JsonWriteContext _writeContext;"], "Methods": ["public Version version() { ... }", "public JsonParser asParser() { ... }", "public JsonParser asParser(ObjectCodec codec) { ... }", "public JsonParser asParser(JsonParser src) { ... }", "public JsonToken firstToken() { ... }", "public TokenBuffer append(TokenBuffer other) { ... }", "public void serialize(JsonGenerator jgen) { ... }", "public TokenBuffer deserialize(JsonParser jp, DeserializationContext ctxt) { ... }", "public String toString() { ... }", "private final void _appendNativeIds(StringBuilder sb) { ... }", "public JsonGenerator enable(Feature f) { ... }", "public JsonGenerator disable(Feature f) { ... }", "public boolean isEnabled(Feature f) { ... }", "public int getFeatureMask() { ... }", "public JsonGenerator setFeatureMask(int mask) { ... }", "public JsonGenerator useDefaultPrettyPrinter() { ... }", "public JsonGenerator setCodec(ObjectCodec oc) { ... }", "public ObjectCodec getCodec() { ... }", "public final JsonWriteContext getOutputContext() { ... }", "public boolean canWriteBinaryNatively() { ... }", "public void flush() { ... }", "public void close() { ... }", "public boolean isClosed() { ... }", "public final void writeStartArray() { ... }", "public final void writeEndArray() { ... }", "public final void writeStartObject() { ... }", "public final void writeEndObject() { ... }", "public final void writeFieldName(String name) { ... }", "public void writeFieldName(SerializableString name) { ... }", "public void writeString(String text) { ... }", "public void writeString(char[] text, int offset, int len) { ... }", "public void writeString(SerializableString text) { ... }", "public void writeRawUTF8String(byte[] text, int offset, int length) { ... }", "public void writeUTF8String(byte[] text, int offset, int length) { ... }", "public void writeRaw(String text) { ... }", "public void writeRaw(String text, int offset, int len) { ... }", "public void writeRaw(SerializableString text) { ... }", "public void writeRaw(char[] text, int offset, int len) { ... }", "public void writeRaw(char c) { ... }", "public void writeRawValue(String text) { ... }", "public void writeRawValue(String text, int offset, int len) { ... }", "public void writeRawValue(char[] text, int offset, int len) { ... }", "public void writeNumber(short i) { ... }", "public void writeNumber(int i) { ... }", "public void writeNumber(long l) { ... }", "public void writeNumber(double d) { ... }", "public void writeNumber(float f) { ... }", "public void writeNumber(BigDecimal dec) { ... }", "public void writeNumber(BigInteger v) { ... }", "public void writeNumber(String encodedValue) { ... }", "public void writeBoolean(boolean state) { ... }", "public void writeNull() { ... }", "public void writeObject(Object value) { ... }", "public void writeTree(TreeNode node) { ... }", "public void writeBinary(Base64Variant b64variant, byte[] data, int offset, int len) { ... }", "public int writeBinary(Base64Variant b64variant, InputStream data, int dataLength) { ... }", "public boolean canWriteTypeId() { ... }", "public boolean canWriteObjectId() { ... }", "public void writeTypeId(Object id) { ... }", "public void writeObjectId(Object id) { ... }", "public void copyCurrentEvent(JsonParser jp) { ... }", "public void copyCurrentStructure(JsonParser jp) { ... }", "private final void _checkNativeIds(JsonParser jp) { ... }", "protected final void _append(JsonToken type) { ... }", "protected final void _append(JsonToken type, Object value) { ... }", "protected final void _appendRaw(int rawType, Object value) { ... }", "protected void _reportUnsupportedOperation() { ... }"]}