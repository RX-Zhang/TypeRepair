{"ClassName": "SevenZFile", "Fields": ["static final int SIGNATURE_HEADER_SIZE;", "private final String fileName;", "private RandomAccessFile file;", "private final Archive archive;", "private int currentEntryIndex;", "private int currentFolderIndex;", "private InputStream currentFolderInputStream;", "private byte[] password;", "private final ArrayList deferredBlockStreams;", "static final byte[] sevenZSignature;"], "Methods": ["public void close() { ... }", "public SevenZArchiveEntry getNextEntry() { ... }", "public Iterable getEntries() { ... }", "private Archive readHeaders(byte[] password) { ... }", "private StartHeader readStartHeader(long startHeaderCrc) { ... }", "private void readHeader(DataInput header, Archive archive) { ... }", "private void readArchiveProperties(DataInput input) { ... }", "private DataInputStream readEncodedHeader(DataInputStream header, Archive archive, byte[] password) { ... }", "private void readStreamsInfo(DataInput header, Archive archive) { ... }", "private void readPackInfo(DataInput header, Archive archive) { ... }", "private void readUnpackInfo(DataInput header, Archive archive) { ... }", "private void readSubStreamsInfo(DataInput header, Archive archive) { ... }", "private Folder readFolder(DataInput header) { ... }", "private BitSet readAllOrBits(DataInput header, int size) { ... }", "private BitSet readBits(DataInput header, int size) { ... }", "private void readFilesInfo(DataInput header, Archive archive) { ... }", "private void calculateStreamMap(Archive archive) { ... }", "private void buildDecodingStream() { ... }", "private InputStream buildDecoderStack(Folder folder, long folderOffset, int firstPackStreamIndex, SevenZArchiveEntry entry) { ... }", "public int read() { ... }", "private InputStream getCurrentStream() { ... }", "public int read(byte[] b) { ... }", "public int read(byte[] b, int off, int len) { ... }", "private static long readUint64(DataInput in) { ... }", "public static boolean matches(byte[] signature, int length) { ... }", "private static long skipBytesFully(DataInput input, long bytesToSkip) { ... }", "public String toString() { ... }"]}