{"ClassName": "TarArchiveInputStream", "Fields": ["private static final int SMALL_BUFFER_SIZE;", "private final byte[] SMALL_BUF;", "private final int recordSize;", "private final int blockSize;", "private boolean hasHitEOF;", "private long entrySize;", "private long entryOffset;", "private final InputStream is;", "private TarArchiveEntry currEntry;", "private final ZipEncoding zipEncoding;", "final String encoding;", "private Map globalPaxHeaders;"], "Methods": ["public void close() { ... }", "public int getRecordSize() { ... }", "public int available() { ... }", "public long skip(long n) { ... }", "public boolean markSupported() { ... }", "public void mark(int markLimit) { ... }", "public synchronized void reset() { ... }", "public TarArchiveEntry getNextTarEntry() { ... }", "private void skipRecordPadding() { ... }", "protected byte[] getLongNameData() { ... }", "private byte[] getRecord() { ... }", "protected boolean isEOFRecord(byte[] record) { ... }", "protected byte[] readRecord() { ... }", "private void readGlobalPaxHeaders() { ... }", "private void paxHeaders() { ... }", " Map parsePaxHeaders(InputStream i) { ... }", "private void applyPaxHeadersToCurrentEntry(Map headers) { ... }", "private void readOldGNUSparse() { ... }", "private boolean isDirectory() { ... }", "public ArchiveEntry getNextEntry() { ... }", "private void tryToConsumeSecondEOFRecord() { ... }", "public int read(byte[] buf, int offset, int numToRead) { ... }", "public boolean canReadEntryData(ArchiveEntry ae) { ... }", "public TarArchiveEntry getCurrentEntry() { ... }", "protected final void setCurrentEntry(TarArchiveEntry e) { ... }", "protected final boolean isAtEOF() { ... }", "protected final void setAtEOF(boolean b) { ... }", "private void consumeRemainderOfLastBlock() { ... }", "public static boolean matches(byte[] signature, int length) { ... }"]}