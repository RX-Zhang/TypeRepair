{"addDecoder": "\n    static InputStream addDecoder(final InputStream is,\n            final Coder coder, final byte[] password) throws IOException {\n        for (final CoderId coderId : coderTable) {\n            if (Arrays.equals(coderId.method.getId(), coder.decompressionMethodId)) {\n                return coderId.coder.decode(is, coder, password);\n            }\n        }\n        throw new IOException(\"Unsupported compression method \" +\n                Arrays.toString(coder.decompressionMethodId));\n    }", "addEncoder": "\n    static OutputStream addEncoder(final OutputStream out, final SevenZMethod method,\n                                   final byte[] password) throws IOException {\n        for (final CoderId coderId : coderTable) {\n            if (coderId.method.equals(method)) {\n                return coderId.coder.encode(out, password);\n            }\n        }\n        throw new IOException(\"Unsupported compression method \" + method);\n    }", "decode": "\n        abstract InputStream decode(final InputStream in, final Coder coder,\n                byte[] password) throws IOException;\n        OutputStream encode(final OutputStream out, final byte[] password)\n            throws IOException {\n            throw new UnsupportedOperationException(\"method doesn't support writing\");\n        }", "encode": "\n        OutputStream encode(final OutputStream out, final byte[] password)\n            throws IOException {\n            throw new UnsupportedOperationException(\"method doesn't support writing\");\n        }", "read": "\n        public int read() throws IOException {\n            int result = super.read();\n            if (result == -1 && addDummyByte) {\n                addDummyByte = false;\n                result = 0;\n            }\n            return result;\n        }"}