{"mapNullToDisabled": "\n    private final char mapNullToDisabled(final Character c) {\n        return c == null ? DISABLED : c.charValue();\n    }", "getLineNumber": "\n    long getLineNumber() {\n        return in.getLineNumber();\n    }", "readEscape": "\n    int readEscape() throws IOException {\n        // the escape char has just been read (normally a backslash)\n        final int c = in.read();\n        switch (c) {\n        case 'r':\n            return CR;\n        case 'n':\n            return LF;\n        case 't':\n            return TAB;\n        case 'b':\n            return BACKSPACE;\n        case 'f':\n            return FF;\n        case CR:\n        case LF:\n        case FF: // TODO is this correct?\n        case TAB: // TODO is this correct? Do tabs need to be escaped?\n        case BACKSPACE: // TODO is this correct?\n            return c;\n        case END_OF_STREAM:\n            throw new IOException(\"EOF whilst processing escape sequence\");\n        default:\n            // Now check for meta-characters\n                return c;\n            // indicate unexpected char - available from in.getLastChar()\n        }\n    }", "trimTrailingSpaces": "\n    void trimTrailingSpaces(final StringBuilder buffer) {\n        int length = buffer.length();\n        while (length > 0 && Character.isWhitespace(buffer.charAt(length - 1))) {\n            length = length - 1;\n        }\n        if (length != buffer.length()) {\n            buffer.setLength(length);\n        }\n    }", "readEndOfLine": "\n    boolean readEndOfLine(int c) throws IOException {\n        // check if we have \\r\\n...\n        if (c == CR && in.lookAhead() == LF) {\n            // note: does not change c outside of this method!\n            c = in.read();\n        }\n        return c == LF || c == CR;\n    }", "nextToken": "\n    abstract Token nextToken(Token reusableToken) throws IOException;\n\n    /**\n     * @return true if the given char is a whitespace character\n     */\n    boolean isWhitespace(final int c) {\n        return c != format.getDelimiter() && Character.isWhitespace((char) c);\n    }", "isWhitespace": "\n    boolean isWhitespace(final int c) {\n        return c != format.getDelimiter() && Character.isWhitespace((char) c);\n    }", "isStartOfLine": "\n    boolean isStartOfLine(final int c) {\n        return c == LF || c == CR || c == UNDEFINED;\n    }", "isEndOfFile": "\n    boolean isEndOfFile(final int c) {\n        return c == END_OF_STREAM;\n    }", "isDelimiter": "\n    boolean isDelimiter(final int c) {\n        return c == delimiter;\n    }", "isEscape": "\n    boolean isEscape(final int c) {\n        return c == escape;\n    }", "isQuoteChar": "\n    boolean isQuoteChar(final int c) {\n        return c == quoteChar;\n    }", "isCommentStart": "\n    boolean isCommentStart(final int c) {\n        return c == commmentStart;\n    }"}