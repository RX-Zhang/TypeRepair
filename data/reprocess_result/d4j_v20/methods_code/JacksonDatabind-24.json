{"withClassIntrospector": "\n    public BaseSettings withClassIntrospector(ClassIntrospector ci) {\n        if (_classIntrospector == ci) {\n            return this;\n        }\n        return new BaseSettings(ci, _annotationIntrospector, _visibilityChecker, _propertyNamingStrategy, _typeFactory,\n                _typeResolverBuilder, _dateFormat, _handlerInstantiator, _locale,\n                _timeZone, _defaultBase64);\n    }", "withAnnotationIntrospector": "\n    public BaseSettings withAnnotationIntrospector(AnnotationIntrospector ai) {\n        if (_annotationIntrospector == ai) {\n            return this;\n        }\n        return new BaseSettings(_classIntrospector, ai, _visibilityChecker, _propertyNamingStrategy, _typeFactory,\n                _typeResolverBuilder, _dateFormat, _handlerInstantiator, _locale,\n                _timeZone, _defaultBase64);\n    }", "withInsertedAnnotationIntrospector": "\n    public BaseSettings withInsertedAnnotationIntrospector(AnnotationIntrospector ai) {\n        return withAnnotationIntrospector(AnnotationIntrospectorPair.create(ai, _annotationIntrospector));\n    }", "withAppendedAnnotationIntrospector": "\n    public BaseSettings withAppendedAnnotationIntrospector(AnnotationIntrospector ai) {\n        return withAnnotationIntrospector(AnnotationIntrospectorPair.create(_annotationIntrospector, ai));\n    }", "withVisibilityChecker": "\n    public BaseSettings withVisibilityChecker(VisibilityChecker<?> vc) {\n        if (_visibilityChecker == vc) {\n            return this;\n        }\n        return new BaseSettings(_classIntrospector, _annotationIntrospector, vc, _propertyNamingStrategy, _typeFactory,\n                _typeResolverBuilder, _dateFormat, _handlerInstantiator, _locale,\n                _timeZone, _defaultBase64);\n    }", "withVisibility": "\n    public BaseSettings withVisibility(PropertyAccessor forMethod, JsonAutoDetect.Visibility visibility) {\n        return new BaseSettings(_classIntrospector, _annotationIntrospector,\n                _visibilityChecker.withVisibility(forMethod, visibility),\n                _propertyNamingStrategy, _typeFactory,\n                _typeResolverBuilder, _dateFormat, _handlerInstantiator, _locale,\n                _timeZone, _defaultBase64);\n    }", "withPropertyNamingStrategy": "\n    public BaseSettings withPropertyNamingStrategy(PropertyNamingStrategy pns) {\n        if (_propertyNamingStrategy == pns) {\n            return this;\n        }\n        return new BaseSettings(_classIntrospector, _annotationIntrospector, _visibilityChecker, pns, _typeFactory,\n                _typeResolverBuilder, _dateFormat, _handlerInstantiator, _locale,\n                _timeZone, _defaultBase64);\n    }", "withTypeFactory": "\n    public BaseSettings withTypeFactory(TypeFactory tf) {\n        if (_typeFactory == tf) {\n            return this;\n        }\n        return new BaseSettings(_classIntrospector, _annotationIntrospector, _visibilityChecker, _propertyNamingStrategy, tf,\n                _typeResolverBuilder, _dateFormat, _handlerInstantiator, _locale,\n                _timeZone, _defaultBase64);\n    }", "withTypeResolverBuilder": "\n    public BaseSettings withTypeResolverBuilder(TypeResolverBuilder<?> typer) {\n        if (_typeResolverBuilder == typer) {\n            return this;\n        }\n        return new BaseSettings(_classIntrospector, _annotationIntrospector, _visibilityChecker, _propertyNamingStrategy, _typeFactory,\n                typer, _dateFormat, _handlerInstantiator, _locale,\n                _timeZone, _defaultBase64);\n    }", "withDateFormat": "\n    public BaseSettings withDateFormat(DateFormat df) {\n        if (_dateFormat == df) {\n            return this;\n        }\n        TimeZone tz = (df == null) ? _timeZone : df.getTimeZone();\n        return new BaseSettings(_classIntrospector, _annotationIntrospector, _visibilityChecker, _propertyNamingStrategy, _typeFactory,\n                _typeResolverBuilder, df, _handlerInstantiator, _locale,\n                tz, _defaultBase64);\n    }", "withHandlerInstantiator": "\n    public BaseSettings withHandlerInstantiator(HandlerInstantiator hi) {\n        if (_handlerInstantiator == hi) {\n            return this;\n        }\n        return new BaseSettings(_classIntrospector, _annotationIntrospector, _visibilityChecker, _propertyNamingStrategy, _typeFactory,\n                _typeResolverBuilder, _dateFormat, hi, _locale,\n                _timeZone, _defaultBase64);\n    }", "with": "\n    public BaseSettings with(Locale l) {\n        if (_locale == l) {\n            return this;\n        }\n        return new BaseSettings(_classIntrospector, _annotationIntrospector, _visibilityChecker, _propertyNamingStrategy, _typeFactory,\n                _typeResolverBuilder, _dateFormat, _handlerInstantiator, l,\n                _timeZone, _defaultBase64);\n    }", "getClassIntrospector": "\n    public ClassIntrospector getClassIntrospector() {\n        return _classIntrospector;\n    }", "getAnnotationIntrospector": "\n    public AnnotationIntrospector getAnnotationIntrospector() {\n        return _annotationIntrospector;\n    }", "getVisibilityChecker": "\n    public VisibilityChecker<?> getVisibilityChecker() {\n        return _visibilityChecker;\n    }", "getPropertyNamingStrategy": "\n    public PropertyNamingStrategy getPropertyNamingStrategy() {\n        return _propertyNamingStrategy;\n    }", "getTypeFactory": "\n    public TypeFactory getTypeFactory() {\n        return _typeFactory;\n    }", "getTypeResolverBuilder": "\n    public TypeResolverBuilder<?> getTypeResolverBuilder() {\n        return _typeResolverBuilder;\n    }", "getDateFormat": "\n    public DateFormat getDateFormat() {\n        return _dateFormat;\n    }", "getHandlerInstantiator": "\n    public HandlerInstantiator getHandlerInstantiator() {\n        return _handlerInstantiator;\n    }", "getLocale": "\n    public Locale getLocale() {\n        return _locale;\n    }", "getTimeZone": "\n    public TimeZone getTimeZone() {\n        return _timeZone;\n    }", "getBase64Variant": "\n    public Base64Variant getBase64Variant() {\n        return _defaultBase64;\n    }"}