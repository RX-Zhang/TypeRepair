{"isNamedEntity": "\n    public static boolean isNamedEntity(String name) {\n        return full.containsKey(name);\n    }", "isBaseNamedEntity": "\n    public static boolean isBaseNamedEntity(String name) {\n        return base.containsKey(name);\n    }", "getCharacterByName": "\n    public static Character getCharacterByName(String name) {\n        return full.get(name);\n    }", "escape": "\n    static String escape(String string, Document.OutputSettings out) {\n        StringBuilder accum = new StringBuilder(string.length() * 2);\n        escape(accum, string, out, false, false, false);\n        return accum.toString();\n    }", "unescape": "\n    static String unescape(String string) {\n        return unescape(string, false);\n    }", "canEncode": "\n    private static boolean canEncode(final CoreCharset charset, final char c, final CharsetEncoder fallback) {\n        // todo add more charset tests if impacted by Android's bad perf in canEncode\n        switch (charset) {\n            case ascii:\n                return c < 0x80;\n            case utf:\n                return true; // real is:!(Character.isLowSurrogate(c) || Character.isHighSurrogate(c)); - but already check above\n            default:\n                return fallback.canEncode(c);\n        }\n    }", "loadEntities": "\n    private static Map<String, Character> loadEntities(String filename) {\n        Properties properties = new Properties();\n        Map<String, Character> entities = new HashMap<String, Character>();\n        try {\n            InputStream in = Entities.class.getResourceAsStream(filename);\n            properties.load(in);\n            in.close();\n        } catch (IOException e) {\n            throw new MissingResourceException(\"Error loading entities resource: \" + e.getMessage(), \"Entities\", filename);\n        }\n\n        for (Map.Entry entry: properties.entrySet()) {\n            Character val = Character.valueOf((char) Integer.parseInt((String) entry.getValue(), 16));\n            String name = (String) entry.getKey();\n            entities.put(name, val);\n        }\n        return entities;\n    }", "toCharacterKey": "\n    private static Map<Character, String> toCharacterKey(Map<String, Character> inMap) {\n        Map<Character, String> outMap = new HashMap<Character, String>();\n        for (Map.Entry<String, Character> entry: inMap.entrySet()) {\n            Character character = entry.getValue();\n            String name = entry.getKey();\n\n            if (outMap.containsKey(character)) {\n                // dupe, prefer the lower case version\n                if (name.toLowerCase().equals(name))\n                    outMap.put(character, name);\n            } else {\n                outMap.put(character, name);\n            }\n        }\n        return outMap;\n    }"}