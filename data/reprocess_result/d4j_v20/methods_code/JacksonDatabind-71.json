{"forType": "\n    public static StdKeyDeserializer forType(Class<?> raw)\n    {\n        int kind;\n\n        // first common types:\n        if (raw == String.class || raw == Object.class) {\n            return StringKD.forType(raw);\n        } else if (raw == UUID.class) {\n            kind = TYPE_UUID;\n        } else if (raw == Integer.class) {\n            kind = TYPE_INT;\n        } else if (raw == Long.class) {\n            kind = TYPE_LONG;\n        } else if (raw == Date.class) {\n            kind = TYPE_DATE;\n        } else if (raw == Calendar.class) {\n            kind = TYPE_CALENDAR;\n        // then less common ones...\n        } else if (raw == Boolean.class) {\n            kind = TYPE_BOOLEAN;\n        } else if (raw == Byte.class) {\n            kind = TYPE_BYTE;\n        } else if (raw == Character.class) {\n            kind = TYPE_CHAR;\n        } else if (raw == Short.class) {\n            kind = TYPE_SHORT;\n        } else if (raw == Float.class) {\n            kind = TYPE_FLOAT;\n        } else if (raw == Double.class) {\n            kind = TYPE_DOUBLE;\n        } else if (raw == URI.class) {\n            kind = TYPE_URI;\n        } else if (raw == URL.class) {\n            kind = TYPE_URL;\n        } else if (raw == Class.class) {\n            kind = TYPE_CLASS;\n        } else if (raw == Locale.class) {\n            FromStringDeserializer<?> deser = FromStringDeserializer.findDeserializer(Locale.class);\n            return new StdKeyDeserializer(TYPE_LOCALE, raw, deser);\n        } else if (raw == Currency.class) {\n            FromStringDeserializer<?> deser = FromStringDeserializer.findDeserializer(Currency.class);\n            return new StdKeyDeserializer(TYPE_CURRENCY, raw, deser);\n        } else {\n            return null;\n        }\n        return new StdKeyDeserializer(kind, raw);\n    }", "deserializeKey": "\n    public Object deserializeKey(String key, DeserializationContext ctxt)\n        throws IOException\n    {\n        if (key == null) { // is this even legal call?\n            return null;\n        }\n        try {\n            Object result = _parse(key, ctxt);\n            if (result != null) {\n                return result;\n            }\n        } catch (Exception re) {\n            throw ctxt.weirdKeyException(_keyClass, key, \"not a valid representation: \"+re.getMessage());\n        }\n        if (_keyClass.isEnum() && ctxt.getConfig().isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)) {\n            return null;\n        }\n        throw ctxt.weirdKeyException(_keyClass, key, \"not a valid representation\");\n    }", "getKeyClass": "\n    public Class<?> getKeyClass() { return _keyClass; }", "_parse": "\n    protected Object _parse(String key, DeserializationContext ctxt) throws Exception\n    {\n        switch (_kind) {\n        case TYPE_BOOLEAN:\n            if (\"true\".equals(key)) {\n                return Boolean.TRUE;\n            }\n            if (\"false\".equals(key)) {\n                return Boolean.FALSE;\n            }\n            throw ctxt.weirdKeyException(_keyClass, key, \"value not 'true' or 'false'\");\n        case TYPE_BYTE:\n            {\n                int value = _parseInt(key);\n                // as per [JACKSON-804], allow range up to 255, inclusive\n                if (value < Byte.MIN_VALUE || value > 255) {\n                    throw ctxt.weirdKeyException(_keyClass, key, \"overflow, value can not be represented as 8-bit value\");\n                }\n                return Byte.valueOf((byte) value);\n            }\n        case TYPE_SHORT:\n            {\n                int value = _parseInt(key);\n                if (value < Short.MIN_VALUE || value > Short.MAX_VALUE) {\n                    throw ctxt.weirdKeyException(_keyClass, key, \"overflow, value can not be represented as 16-bit value\");\n                }\n                return Short.valueOf((short) value);\n            }\n        case TYPE_CHAR:\n            if (key.length() == 1) {\n                return Character.valueOf(key.charAt(0));\n            }\n            throw ctxt.weirdKeyException(_keyClass, key, \"can only convert 1-character Strings\");\n        case TYPE_INT:\n            return _parseInt(key);\n\n        case TYPE_LONG:\n            return _parseLong(key);\n\n        case TYPE_FLOAT:\n            // Bounds/range checks would be tricky here, so let's not bother even trying...\n            return Float.valueOf((float) _parseDouble(key));\n        case TYPE_DOUBLE:\n            return _parseDouble(key);\n        case TYPE_LOCALE:\n            try {\n                return _deser._deserialize(key, ctxt);\n            } catch (IOException e) {\n                throw ctxt.weirdKeyException(_keyClass, key, \"unable to parse key as locale\");\n            }\n        case TYPE_CURRENCY:\n            try {\n                return _deser._deserialize(key, ctxt);\n            } catch (IOException e) {\n                throw ctxt.weirdKeyException(_keyClass, key, \"unable to parse key as currency\");\n            }\n        case TYPE_DATE:\n            return ctxt.parseDate(key);\n        case TYPE_CALENDAR:\n            java.util.Date date = ctxt.parseDate(key);\n            return (date == null)  ? null : ctxt.constructCalendar(date);\n        case TYPE_UUID:\n            return UUID.fromString(key);\n        case TYPE_URI:\n            return URI.create(key);\n        case TYPE_URL:\n            return new URL(key);\n        case TYPE_CLASS:\n            try {\n                return ctxt.findClass(key);\n            } catch (Exception e) {\n                throw ctxt.weirdKeyException(_keyClass, key, \"unable to parse key as Class\");\n            }\n        }\n        return null;\n    }", "_parseInt": "\n    protected int _parseInt(String key) throws IllegalArgumentException {\n        return Integer.parseInt(key);\n    }", "_parseLong": "\n    protected long _parseLong(String key) throws IllegalArgumentException {\n        return Long.parseLong(key);\n    }", "_parseDouble": "\n    protected double _parseDouble(String key) throws IllegalArgumentException {\n        return NumberInput.parseDouble(key);\n    }", "_getToStringResolver": "\n        private EnumResolver _getToStringResolver()\n        {\n            EnumResolver res = _byToStringResolver;\n            if (res == null) {\n                synchronized (this) {\n                    res = EnumResolver.constructUnsafeUsingToString(_byNameResolver.getEnumClass());\n                }\n            }\n            return res;\n        }"}