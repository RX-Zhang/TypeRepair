{"createShell": "\n    static public Document createShell(String baseUri) {\n        Validate.notNull(baseUri);\n\n        Document doc = new Document(baseUri);\n        Element html = doc.appendElement(\"html\");\n        html.appendElement(\"head\");\n        html.appendElement(\"body\");\n\n        return doc;\n    }", "head": "\n    public Element head() {\n        return getElementsByTag(\"head\").first();\n    }", "body": "\n    public Element body() {\n        return getElementsByTag(\"body\").first();\n    }", "title": "\n    public String title() {\n        Element titleEl = getElementsByTag(\"title\").first();\n        return titleEl != null ? titleEl.text().trim() : \"\";\n    }", "createElement": "\n    public Element createElement(String tagName) {\n        return new Element(Tag.valueOf(tagName), this.baseUri());\n    }", "normalise": "\n    public Document normalise() {\n        if (select(\"html\").isEmpty())\n            appendElement(\"html\");\n        if (head() == null)\n            select(\"html\").first().prependElement(\"head\");\n        if (body() == null)\n            select(\"html\").first().appendElement(\"body\");\n\n        // pull text nodes out of root, html, and head els, and push into body. non-text nodes are already taken care\n        // of. do in inverse order to maintain text order.\n        normalise(head());\n        normalise(select(\"html\").first());\n        normalise(this);        \n\n        return this;\n    }", "outerHtml": "\n    public String outerHtml() {\n        return super.html(); // no outer wrapper tag\n    }", "text": "\n    public Element text(String text) {\n        body().text(text); // overridden to not nuke doc structure\n        return this;\n    }", "nodeName": "\n    public String nodeName() {\n        return \"#document\";\n    }"}