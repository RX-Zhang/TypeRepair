{"get": "\n    public String get(final Enum<?> e) {\n        return get(e.toString());\n    }", "getComment": "\n    public String getComment() {\n        return comment;\n    }", "getRecordNumber": "\n    public long getRecordNumber() {\n        return recordNumber;\n    }", "isConsistent": "\n    public boolean isConsistent() {\n        return mapping == null || mapping.size() == values.length;\n    }", "isMapped": "\n    public boolean isMapped(final String name) {\n        return mapping != null && mapping.containsKey(name);\n    }", "isSet": "\n    public boolean isSet(final String name) {\n        return isMapped(name) && mapping.get(name).intValue() < values.length;\n    }", "iterator": "\n    public Iterator<String> iterator() {\n        return toList().iterator();\n    }", "putIn": "\n    <M extends Map<String, String>> M putIn(final M map) {\n        for (final Entry<String, Integer> entry : mapping.entrySet()) {\n            final int col = entry.getValue().intValue();\n            if (col < values.length) {\n                map.put(entry.getKey(), values[col]);\n            }\n        }\n        return map;\n    }", "size": "\n    public int size() {\n        return values.length;\n    }", "toList": "\n    private List<String> toList() {\n        return Arrays.asList(values);\n    }", "toMap": "\n    public Map<String, String> toMap() {\n        return putIn(new HashMap<String, String>(values.length));\n    }", "toString": "\n    public String toString() {\n        return Arrays.toString(values);\n    }", "values": "\n    String[] values() {\n        return values;\n    }"}