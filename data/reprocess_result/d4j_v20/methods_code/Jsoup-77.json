{"defaultSettings": "\n    ParseSettings defaultSettings() {\n        return ParseSettings.preserveCase;\n    }", "parse": "\n    Document parse(Reader input, String baseUri) {\n        return parse(input, baseUri, ParseErrorList.noTracking(), ParseSettings.preserveCase);\n    }", "initialiseParse": "\n    protected void initialiseParse(Reader input, String baseUri, ParseErrorList errors, ParseSettings settings) {\n        super.initialiseParse(input, baseUri, errors, settings);\n        stack.add(doc); // place the document onto the stack. differs from HtmlTreeBuilder (not on stack)\n        doc.outputSettings().syntax(Document.OutputSettings.Syntax.xml);\n    }", "process": "\n    protected boolean process(Token token) {\n        // start tag, end tag, doctype, comment, character, eof\n        switch (token.type) {\n            case StartTag:\n                insert(token.asStartTag());\n                break;\n            case EndTag:\n                popStackToClose(token.asEndTag());\n                break;\n            case Comment:\n                insert(token.asComment());\n                break;\n            case Character:\n                insert(token.asCharacter());\n                break;\n            case Doctype:\n                insert(token.asDoctype());\n                break;\n            case EOF: // could put some normalisation here if desired\n                break;\n            default:\n                Validate.fail(\"Unexpected token type: \" + token.type);\n        }\n        return true;\n    }", "insertNode": "\n    private void insertNode(Node node) {\n        currentElement().appendChild(node);\n    }", "insert": "\n    Element insert(Token.StartTag startTag) {\n        Tag tag = Tag.valueOf(startTag.name(), settings);\n        // todo: wonder if for xml parsing, should treat all tags as unknown? because it's not html.\n        Element el = new Element(tag, baseUri, settings.normalizeAttributes(startTag.attributes));\n        insertNode(el);\n        if (startTag.isSelfClosing()) {\n            if (!tag.isKnownTag()) // unknown tag, remember this is self closing for output. see above.\n                tag.setSelfClosing();\n        } else {\n            stack.add(el);\n        }\n        return el;\n    }", "popStackToClose": "\n    private void popStackToClose(Token.EndTag endTag) {\n        String elName = endTag.name();\n        Element firstFound = null;\n\n        for (int pos = stack.size() -1; pos >= 0; pos--) {\n            Element next = stack.get(pos);\n            if (next.nodeName().equals(elName)) {\n                firstFound = next;\n                break;\n            }\n        }\n        if (firstFound == null)\n            return; // not found, skip\n\n        for (int pos = stack.size() -1; pos >= 0; pos--) {\n            Element next = stack.get(pos);\n            stack.remove(pos);\n            if (next == firstFound)\n                break;\n        }\n    }", "parseFragment": "\n    List<Node> parseFragment(String inputFragment, String baseUri, ParseErrorList errors, ParseSettings settings) {\n        initialiseParse(new StringReader(inputFragment), baseUri, errors, settings);\n        runParser();\n        return doc.childNodes();\n    }"}