{"setCodec": "\n    public abstract JsonGenerator setCodec(ObjectCodec oc);\n\n    /**\n     * Method for accessing the object used for writing Java\n     * object as JSON content\n     * (using method {@link #writeObject}).", "getCodec": "\n    public abstract ObjectCodec getCodec();\n\n    /**\n     * Accessor for finding out version of the bundle that provided this generator instance.\n     */\n    @Override\n    public abstract Version version();\n\n    /*\n    /**********************************************************\n    /* Public API, Feature configuration\n    /**********************************************************\n     */\n\n    /**\n     * Method for enabling specified parser features:\n     * check {@link Feature} for list of available features.", "version": "\n    public abstract Version version();\n\n    /*\n    /**********************************************************\n    /* Public API, Feature configuration\n    /**********************************************************\n     */\n\n    /**\n     * Method for enabling specified parser features:\n     * check {@link Feature} for list of available features.", "enable": "\n    public abstract JsonGenerator enable(Feature f);\n\n    /**\n     * Method for disabling specified  features\n     * (check {@link Feature} for list of features)", "disable": "\n    public abstract JsonGenerator disable(Feature f);\n\n    /**\n     * Method for enabling or disabling specified feature:\n     * check {@link Feature} for list of available features.", "configure": "\n    public final JsonGenerator configure(Feature f, boolean state) {\n        if (state) enable(f); else disable(f);\n        return this;\n    }", "isEnabled": "\n    public abstract boolean isEnabled(Feature f);\n\n    /**\n     * Bulk access method for getting state of all standard (non-dataformat-specific)\n     * {@link JsonGenerator.Feature}s.", "getFeatureMask": "\n    public abstract int getFeatureMask();\n\n    /**\n     * Bulk set method for (re)setting states of all standard {@link Feature}s", "setFeatureMask": "\n    public abstract JsonGenerator setFeatureMask(int values);\n\n    /**\n     * Bulk set method for (re)setting states of features specified by <code>mask</code>.\n     * Functionally equivalent to\n     *<code>\n     *    int oldState = getFeatureMask();\n     *    int newState = (oldState &amp; ~mask) | (values &amp; mask);\n     *    setFeatureMask(newState);\n     *</code>\n     * but preferred as this lets caller more efficiently specify actual changes made.\n     * \n     * @param values Bit mask of set/clear state for features to change\n     * @param mask Bit mask of features to change\n     * \n     * @since 2.6\n     */\n    public JsonGenerator overrideStdFeatures(int values, int mask) {\n        int oldState = getFeatureMask();\n        int newState = (oldState & ~mask) | (values & mask);\n        return setFeatureMask(newState);\n    }", "overrideStdFeatures": "\n    public JsonGenerator overrideStdFeatures(int values, int mask) {\n        int oldState = getFeatureMask();\n        int newState = (oldState & ~mask) | (values & mask);\n        return setFeatureMask(newState);\n    }", "getFormatFeatures": "\n    public int getFormatFeatures() {\n        return 0;\n    }", "overrideFormatFeatures": "\n    public JsonGenerator overrideFormatFeatures(int values, int mask) {\n        throw new IllegalArgumentException(\"No FormatFeatures defined for generator of type \"+getClass().getName());\n        /*\n        int oldState = getFeatureMask();\n        int newState = (oldState & ~mask) | (values & mask);\n        return setFeatureMask(newState);\n        */\n    }", "setSchema": "\n    public void setSchema(FormatSchema schema) {\n        throw new UnsupportedOperationException(\"Generator of type \"+getClass().getName()+\" does not support schema of type '\"\n                +schema.getSchemaType()+\"'\");\n    }", "getSchema": "\n    public FormatSchema getSchema() { return null; }", "setPrettyPrinter": "\n    public JsonGenerator setPrettyPrinter(PrettyPrinter pp) {\n        _cfgPrettyPrinter = pp;\n        return this;\n    }", "getPrettyPrinter": "\n    public PrettyPrinter getPrettyPrinter() {\n        return _cfgPrettyPrinter;\n    }", "useDefaultPrettyPrinter": "\n    public abstract JsonGenerator useDefaultPrettyPrinter();\n\n    /**\n     * Method that can be called to request that generator escapes\n     * all character codes above specified code point (if positive value);\n     * or, to not escape any characters except for ones that must be\n     * escaped for the data format (if -1).\n     * To force escaping of all non-ASCII characters, for example,\n     * this method would be called with value of 127.\n     *<p>\n     * Note that generators are NOT required to support setting of value\n     * higher than 127, because there are other ways to affect quoting\n     * (or lack thereof) of character codes between 0 and 127.\n     * Not all generators support concept of escaping, either; if so,\n     * calling this method will have no effect.\n     *<p>\n     * Default implementation does nothing; sub-classes need to redefine\n     * it according to rules of supported data format.\n     * \n     * @param charCode Either -1 to indicate that no additional escaping\n     *   is to be done; or highest code point not to escape (meaning higher\n     *   ones will be), if positive value.\n     */\n    public JsonGenerator setHighestNonEscapedChar(int charCode) { return this; }", "setHighestNonEscapedChar": "\n    public JsonGenerator setHighestNonEscapedChar(int charCode) { return this; }", "getHighestEscapedChar": "\n    public int getHighestEscapedChar() { return 0; }", "getCharacterEscapes": "\n    public CharacterEscapes getCharacterEscapes() { return null; }", "setCharacterEscapes": "\n    public JsonGenerator setCharacterEscapes(CharacterEscapes esc) { return this; }", "setRootValueSeparator": "\n    public JsonGenerator setRootValueSeparator(SerializableString sep) {\n        throw new UnsupportedOperationException();\n    }", "getOutputTarget": "\n    public Object getOutputTarget() {\n        return null;\n    }", "getOutputBuffered": "\n    public int getOutputBuffered() {\n        return -1;\n    }", "getCurrentValue": "\n    public Object getCurrentValue() {\n        JsonStreamContext ctxt = getOutputContext();\n        return (ctxt == null) ? null : ctxt.getCurrentValue();\n    }", "setCurrentValue": "\n    public void setCurrentValue(Object v) {\n        JsonStreamContext ctxt = getOutputContext();\n        if (ctxt != null) {\n            ctxt.setCurrentValue(v);\n        }\n    }", "canUseSchema": "\n    public boolean canUseSchema(FormatSchema schema) { return false; }", "canWriteObjectId": "\n    public boolean canWriteObjectId() { return false; }", "canWriteTypeId": "\n    public boolean canWriteTypeId() { return false; }", "canWriteBinaryNatively": "\n    public boolean canWriteBinaryNatively() { return false; }", "canOmitFields": "\n    public boolean canOmitFields() { return true; }", "canWriteFormattedNumbers": "\n    public boolean canWriteFormattedNumbers() { return false; }", "writeStartArray": "\n    public abstract void writeStartArray() throws IOException;\n\n    /**\n     * Method for writing start marker of an Array value, similar\n     * to {@link #writeStartArray()}, but also specifying how many", "writeEndArray": "\n    public abstract void writeEndArray() throws IOException;\n\n    /**\n     * Method for writing starting marker of a JSON Object value\n     * (character '{'; plus possible white space decoration\n     * if pretty-printing is enabled).\n     *<p>\n     * Object values can be written in any context where values\n     * are allowed: meaning everywhere except for when\n     * a field name is expected.\n     */\n    public abstract void writeStartObject() throws IOException;\n\n    /**\n     * Method for writing starting marker of a JSON Object value\n     * (character '{'; plus possible white space decoration\n     * if pretty-printing is enabled), to represent Java given\n     * as the argument. Argument is offered as metadata, but more\n     * importantly it should be assigned as the \"current value\"\n     * for the Object content that gets constructed and initialized.\n     *<p>\n     * Object values can be written in any context where values\n     * are allowed: meaning everywhere except for when\n     * a field name is expected.\n     *\n     * @since 2.8.\n     */\n    public void writeStartObject(Object forValue) throws IOException\n    {\n        writeStartObject();\n        setCurrentValue(forValue);\n    }\n\n    /**\n     * Method for writing closing marker of a JSON Object value\n     * (character '}'; plus possible white space decoration\n     * if pretty-printing is enabled).\n     *<p>\n     * Marker can be written if the innermost structured type\n     * is Object, and the last written event was either a\n     * complete value, or START-OBJECT marker (see JSON specification\n     * for more details).\n     */\n    public abstract void writeEndObject() throws IOException;\n\n    /**\n     * Method for writing a field name (JSON String surrounded by\n     * double quotes: syntactically identical to a JSON String value),\n     * possibly decorated by white space if pretty-printing is enabled.\n     *<p>\n     * Field names can only be written in Object context (check out\n     * JSON specification for details), when field name is expected\n     * (field names alternate with values).\n     */\n    public abstract void writeFieldName(String name) throws IOException;\n\n    /**\n     * Method similar to {@link #writeFieldName(String)}, main difference\n     * being that it may perform better as some of processing (such as\n     * quoting of certain characters, or encoding into external encoding\n     * if supported by generator) can be done just once and reused for\n     * later calls.\n     *<p>\n     * Default implementation simple uses unprocessed name container in\n     * serialized String; implementations are strongly encouraged to make\n     * use of more efficient methods argument object has.\n     */\n    public abstract void writeFieldName(SerializableString name) throws IOException;\n\n    /**\n     * Alternative to {@link #writeFieldName(String)} that may be used\n     * in cases where property key is of numeric type; either where\n     * underlying format supports such notion (some binary formats do,\n     * unlike JSON), or for convenient conversion into String presentation.\n     * Default implementation will simply convert id into <code>String</code>\n     * and call {@link #writeFieldName(String)}.\n     *\n     * @since 2.8\n     */\n    public void writeFieldId(long id) throws IOException {\n        writeFieldName(Long.toString(id));\n    }\n\n    /*\n    /**********************************************************\n    /* Public API, write methods, scalar arrays (2.8)\n    /**********************************************************\n     */\n\n    /**\n     * Value write method that can be called to write a single\n     * array (sequence of {@link JsonToken#START_ARRAY}, zero or\n     * more {@link JsonToken#VALUE_NUMBER_INT}, {@link JsonToken#END_ARRAY})\n     *\n     * @since 2.8\n     *\n     * @param array Array that contains values to write\n     * @param offset Offset of the first element to write, within array\n     * @param length Number of elements in array to write, from `offset` to `offset + len - 1`\n     */\n    public void writeArray(int[] array, int offset, int length) throws IOException\n    {\n        if (array == null) {\n            throw new IllegalArgumentException(\"null array\");\n        }\n        _verifyOffsets(array.length, offset, length);\n        writeStartArray();\n        for (int i = offset, end = offset+length; i < end; ++i) {\n            writeNumber(array[i]);\n        }\n        writeEndArray();\n    }\n\n    /**\n     * Value write method that can be called to write a single\n     * array (sequence of {@link JsonToken#START_ARRAY}, zero or\n     * more {@link JsonToken#VALUE_NUMBER_INT}, {@link JsonToken#END_ARRAY})\n     *\n     * @since 2.8\n     *\n     * @param array Array that contains values to write\n     * @param offset Offset of the first element to write, within array\n     * @param length Number of elements in array to write, from `offset` to `offset + len - 1`\n     */\n    public void writeArray(long[] array, int offset, int length) throws IOException\n    {\n        if (array == null) {\n            throw new IllegalArgumentException(\"null array\");\n        }\n        _verifyOffsets(array.length, offset, length);\n        writeStartArray();\n        for (int i = offset, end = offset+length; i < end; ++i) {\n            writeNumber(array[i]);\n        }\n        writeEndArray();\n    }\n\n    /**\n     * Value write method that can be called to write a single\n     * array (sequence of {@link JsonToken#START_ARRAY}, zero or\n     * more {@link JsonToken#VALUE_NUMBER_FLOAT}, {@link JsonToken#END_ARRAY})\n     *\n     * @since 2.8\n     *\n     * @param array Array that contains values to write\n     * @param offset Offset of the first element to write, within array\n     * @param length Number of elements in array to write, from `offset` to `offset + len - 1`\n     */\n    public void writeArray(double[] array, int offset, int length) throws IOException\n    {\n        if (array == null) {\n            throw new IllegalArgumentException(\"null array\");\n        }\n        _verifyOffsets(array.length, offset, length);\n        writeStartArray();\n        for (int i = offset, end = offset+length; i < end; ++i) {\n            writeNumber(array[i]);\n        }\n        writeEndArray();\n    }\n\n    /*\n    /**********************************************************\n    /* Public API, write methods, text/String values\n    /**********************************************************\n     */\n\n    /**\n     * Method for outputting a String value. Depending on context\n     * this means either array element, (object) field value or\n     * a stand alone String; but in all cases, String will be\n     * surrounded in double quotes, and contents will be properly\n     * escaped as required by JSON specification.\n     */\n    public abstract void writeString(String text) throws IOException;\n\n    /**\n     * Method for outputting a String value. Depending on context\n     * this means either array element, (object) field value or\n     * a stand alone String; but in all cases, String will be\n     * surrounded in double quotes, and contents will be properly\n     * escaped as required by JSON specification.\n     */\n    public abstract void writeString(char[] text, int offset, int len) throws IOException;\n\n    /**\n     * Method similar to {@link #writeString(String)}, but that takes\n     * {@link SerializableString} which can make this potentially\n     * more efficient to call as generator may be able to reuse\n     * quoted and/or encoded representation.\n     *<p>\n     * Default implementation just calls {@link #writeString(String)};\n     * sub-classes should override it with more efficient implementation\n     * if possible.\n     */\n    public abstract void writeString(SerializableString text) throws IOException;\n\n    /**\n     * Method similar to {@link #writeString(String)} but that takes as\n     * its input a UTF-8 encoded String that is to be output as-is, without additional\n     * escaping (type of which depends on data format; backslashes for JSON).\n     * However, quoting that data format requires (like double-quotes for JSON) will be added\n     * around the value if and as necessary.\n     *<p>\n     * Note that some backends may choose not to support this method: for\n     * example, if underlying destination is a {@link java.io.Writer}\n     * using this method would require UTF-8 decoding.\n     * If so, implementation may instead choose to throw a\n     * {@link UnsupportedOperationException} due to ineffectiveness\n     * of having to decode input.\n     */\n    public abstract void writeRawUTF8String(byte[] text, int offset, int length)\n        throws IOException;\n\n    /**\n     * Method similar to {@link #writeString(String)} but that takes as its input\n     * a UTF-8 encoded String which has <b>not</b> been escaped using whatever\n     * escaping scheme data format requires (for JSON that is backslash-escaping\n     * for control characters and double-quotes; for other formats something else).\n     * This means that textual JSON backends need to check if value needs\n     * JSON escaping, but otherwise can just be copied as is to output.\n     * Also, quoting that data format requires (like double-quotes for JSON) will be added\n     * around the value if and as necessary.\n     *<p>\n     * Note that some backends may choose not to support this method: for\n     * example, if underlying destination is a {@link java.io.Writer}\n     * using this method would require UTF-8 decoding.\n     * In this case\n     * generator implementation may instead choose to throw a\n     * {@link UnsupportedOperationException} due to ineffectiveness\n     * of having to decode input.\n     */\n    public abstract void writeUTF8String(byte[] text, int offset, int length)\n        throws IOException;\n\n    /*\n    /**********************************************************\n    /* Public API, write methods, binary/raw content\n    /**********************************************************\n     */\n\n    /**\n     * Method that will force generator to copy\n     * input text verbatim with <b>no</b> modifications (including\n     * that no escaping is done and no separators are added even\n     * if context [array, object] would otherwise require such).\n     * If such separators are desired, use\n     * {@link #writeRawValue(String)} instead.\n     *<p>\n     * Note that not all generator implementations necessarily support\n     * such by-pass methods: those that do not will throw\n     * {@link UnsupportedOperationException}.\n     */\n    public abstract void writeRaw(String text) throws IOException;\n\n    /**\n     * Method that will force generator to copy\n     * input text verbatim with <b>no</b> modifications (including\n     * that no escaping is done and no separators are added even\n     * if context [array, object] would otherwise require such).\n     * If such separators are desired, use\n     * {@link #writeRawValue(String)} instead.\n     *<p>\n     * Note that not all generator implementations necessarily support\n     * such by-pass methods: those that do not will throw\n     * {@link UnsupportedOperationException}.\n     */\n    public abstract void writeRaw(String text, int offset, int len) throws IOException;\n\n    /**\n     * Method that will force generator to copy\n     * input text verbatim with <b>no</b> modifications (including\n     * that no escaping is done and no separators are added even\n     * if context [array, object] would otherwise require such).\n     * If such separators are desired, use\n     * {@link #writeRawValue(String)} instead.\n     *<p>\n     * Note that not all generator implementations necessarily support\n     * such by-pass methods: those that do not will throw\n     * {@link UnsupportedOperationException}.\n     */\n    public abstract void writeRaw(char[] text, int offset, int len) throws IOException;\n\n    /**\n     * Method that will force generator to copy\n     * input text verbatim with <b>no</b> modifications (including\n     * that no escaping is done and no separators are added even\n     * if context [array, object] would otherwise require such).\n     * If such separators are desired, use\n     * {@link #writeRawValue(String)} instead.\n     *<p>\n     * Note that not all generator implementations necessarily support\n     * such by-pass methods: those that do not will throw\n     * {@link UnsupportedOperationException}.\n     */\n    public abstract void writeRaw(char c) throws IOException;\n\n    /**\n     * Method that will force generator to copy\n     * input text verbatim with <b>no</b> modifications (including\n     * that no escaping is done and no separators are added even\n     * if context [array, object] would otherwise require such).\n     * If such separators are desired, use\n     * {@link #writeRawValue(String)} instead.\n     *<p>\n     * Note that not all generator implementations necessarily support\n     * such by-pass methods: those that do not will throw\n     * {@link UnsupportedOperationException}.\n     *<p>\n     * The default implementation delegates to {@link #writeRaw(String)};\n     * other backends that support raw inclusion of text are encouraged\n     * to implement it in more efficient manner (especially if they\n     * use UTF-8 encoding).\n     * \n     * @since 2.1\n     */\n    public void writeRaw(SerializableString raw) throws IOException {\n        writeRaw(raw.getValue());\n    }\n\n    /**\n     * Method that will force generator to copy\n     * input text verbatim without any modifications, but assuming\n     * it must constitute a single legal JSON value (number, string,\n     * boolean, null, Array or List). Assuming this, proper separators\n     * are added if and as needed (comma or colon), and generator\n     * state updated to reflect this.\n     */\n    public abstract void writeRawValue(String text) throws IOException;\n\n    public abstract void writeRawValue(String text, int offset, int len) throws IOException;\n\n    public abstract void writeRawValue(char[] text, int offset, int len) throws IOException;\n\n    /**\n     * Method similar to {@link #writeRawValue(String)}, but potentially more\n     * efficient as it may be able to use pre-encoded content (similar to\n     * {@link #writeRaw(SerializableString)}.\n     * \n     * @since 2.5\n     */\n    public void writeRawValue(SerializableString raw) throws IOException {\n        writeRawValue(raw.getValue());\n    }\n\n    /**\n     * Method that will output given chunk of binary data as base64\n     * encoded, as a complete String value (surrounded by double quotes).\n     * This method defaults\n     *<p>\n     * Note: because JSON Strings can not contain unescaped linefeeds,\n     * if linefeeds are included (as per last argument), they must be\n     * escaped. This adds overhead for decoding without improving\n     * readability.\n     * Alternatively if linefeeds are not included,\n     * resulting String value may violate the requirement of base64\n     * RFC which mandates line-length of 76 characters and use of\n     * linefeeds. However, all {@link JsonParser} implementations\n     * are required to accept such \"long line base64\"; as do\n     * typical production-level base64 decoders.\n     *\n     * @param bv Base64 variant to use: defines details such as\n     *   whether padding is used (and if so, using which character);\n     *   what is the maximum line length before adding linefeed,\n     *   and also the underlying alphabet to use.\n     */\n    public abstract void writeBinary(Base64Variant bv,\n            byte[] data, int offset, int len) throws IOException;\n\n    /**\n     * Similar to {@link #writeBinary(Base64Variant,byte[],int,int)},\n     * but default to using the Jackson default Base64 variant \n     * (which is {@link Base64Variants#MIME_NO_LINEFEEDS}).\n     */\n    public void writeBinary(byte[] data, int offset, int len) throws IOException {\n        writeBinary(Base64Variants.getDefaultVariant(), data, offset, len);\n    }\n\n    /**\n     * Similar to {@link #writeBinary(Base64Variant,byte[],int,int)},\n     * but assumes default to using the Jackson default Base64 variant \n     * (which is {@link Base64Variants#MIME_NO_LINEFEEDS}). Also\n     * assumes that whole byte array is to be output.\n     */\n    public void writeBinary(byte[] data) throws IOException {\n        writeBinary(Base64Variants.getDefaultVariant(), data, 0, data.length);\n    }\n\n    /**\n     * Similar to {@link #writeBinary(Base64Variant,InputStream,int)},\n     * but assumes default to using the Jackson default Base64 variant \n     * (which is {@link Base64Variants#MIME_NO_LINEFEEDS}).\n     * \n     * @param data InputStream to use for reading binary data to write.\n     *    Will not be closed after successful write operation\n     * @param dataLength (optional) number of bytes that will be available;\n     *    or -1 to be indicate it is not known. Note that implementations\n     *    need not support cases where length is not known in advance; this\n     *    depends on underlying data format: JSON output does NOT require length,\n     *    other formats may\n     */\n    public int writeBinary(InputStream data, int dataLength)\n        throws IOException {\n        return writeBinary(Base64Variants.getDefaultVariant(), data, dataLength);\n    }\n    \n    /**\n     * Method similar to {@link #writeBinary(Base64Variant,byte[],int,int)},\n     * but where input is provided through a stream, allowing for incremental\n     * writes without holding the whole input in memory.\n     * \n     * @param bv Base64 variant to use\n     * @param data InputStream to use for reading binary data to write.\n     *    Will not be closed after successful write operation\n     * @param dataLength (optional) number of bytes that will be available;\n     *    or -1 to be indicate it is not known.\n     *    If a positive length is given, <code>data</code> MUST provide at least\n     *    that many bytes: if not, an exception will be thrown.\n     *    Note that implementations\n     *    need not support cases where length is not known in advance; this\n     *    depends on underlying data format: JSON output does NOT require length,\n     *    other formats may.\n     * \n     * @return Number of bytes read from <code>data</code> and written as binary payload\n     * \n     * @since 2.1\n     */\n    public abstract int writeBinary(Base64Variant bv,\n            InputStream data, int dataLength) throws IOException;\n\n    /*\n    /**********************************************************\n    /* Public API, write methods, numeric\n    /**********************************************************\n     */\n\n    /**\n     * Method for outputting given value as JSON number.\n     * Can be called in any context where a value is expected\n     * (Array value, Object field value, root-level value).\n     * Additional white space may be added around the value\n     * if pretty-printing is enabled.\n     *\n     * @param v Number value to write\n     *\n     * @since 2.2\n     */\n    public void writeNumber(short v) throws IOException { writeNumber((int) v); }\n\n    /**\n     * Method for outputting given value as JSON number.\n     * Can be called in any context where a value is expected\n     * (Array value, Object field value, root-level value).\n     * Additional white space may be added around the value\n     * if pretty-printing is enabled.\n     *\n     * @param v Number value to write\n     */\n    public abstract void writeNumber(int v) throws IOException;\n\n    /**\n     * Method for outputting given value as JSON number.\n     * Can be called in any context where a value is expected\n     * (Array value, Object field value, root-level value).\n     * Additional white space may be added around the value\n     * if pretty-printing is enabled.\n     *\n     * @param v Number value to write\n     */\n    public abstract void writeNumber(long v) throws IOException;\n\n    /**\n     * Method for outputting given value as JSON number.\n     * Can be called in any context where a value is expected\n     * (Array value, Object field value, root-level value).\n     * Additional white space may be added around the value\n     * if pretty-printing is enabled.\n     *\n     * @param v Number value to write\n     */\n    public abstract void writeNumber(BigInteger v) throws IOException;\n\n    /**\n     * Method for outputting indicate JSON numeric value.\n     * Can be called in any context where a value is expected\n     * (Array value, Object field value, root-level value).\n     * Additional white space may be added around the value\n     * if pretty-printing is enabled.\n     *\n     * @param v Number value to write\n     */\n    public abstract void writeNumber(double v) throws IOException;\n\n    /**\n     * Method for outputting indicate JSON numeric value.\n     * Can be called in any context where a value is expected\n     * (Array value, Object field value, root-level value).\n     * Additional white space may be added around the value\n     * if pretty-printing is enabled.\n     *\n     * @param v Number value to write\n     */\n    public abstract void writeNumber(float v) throws IOException;\n\n    /**\n     * Method for outputting indicate JSON numeric value.\n     * Can be called in any context where a value is expected\n     * (Array value, Object field value, root-level value).\n     * Additional white space may be added around the value\n     * if pretty-printing is enabled.\n     *\n     * @param v Number value to write\n     */\n    public abstract void writeNumber(BigDecimal v) throws IOException;\n\n    /**\n     * Write method that can be used for custom numeric types that can\n     * not be (easily?) converted to \"standard\" Java number types.\n     * Because numbers are not surrounded by double quotes, regular\n     * {@link #writeString} method can not be used; nor\n     * {@link #writeRaw} because that does not properly handle\n     * value separators needed in Array or Object contexts.\n     *<p>\n     * Note: because of lack of type safety, some generator\n     * implementations may not be able to implement this\n     * method. For example, if a binary JSON format is used,\n     * it may require type information for encoding; similarly\n     * for generator-wrappers around Java objects or JSON nodes.\n     * If implementation does not implement this method,\n     * it needs to throw {@link UnsupportedOperationException}.\n     * \n     * @throws UnsupportedOperationException If underlying data format does not\n     *   support numbers serialized textually AND if generator is not allowed\n     *   to just output a String instead (Schema-based formats may require actual\n     *   number, for example)\n     */\n    public abstract void writeNumber(String encodedValue) throws IOException;\n\n    /*\n    /**********************************************************\n    /* Public API, write methods, other value types\n    /**********************************************************\n     */\n    \n    /**\n     * Method for outputting literal JSON boolean value (one of\n     * Strings 'true' and 'false').\n     * Can be called in any context where a value is expected\n     * (Array value, Object field value, root-level value).\n     * Additional white space may be added around the value\n     * if pretty-printing is enabled.\n     */\n    public abstract void writeBoolean(boolean state) throws IOException;\n\n    /**\n     * Method for outputting literal JSON null value.\n     * Can be called in any context where a value is expected\n     * (Array value, Object field value, root-level value).\n     * Additional white space may be added around the value\n     * if pretty-printing is enabled.\n     */\n    public abstract void writeNull() throws IOException;\n\n    /**\n     * Method that can be called on backends that support passing opaque datatypes of\n     * non-JSON formats\n     *\n     * @since 2.8\n     */\n    public void writeEmbeddedObject(Object object) throws IOException {\n        // 01-Sep-2016, tatu: As per [core#318], handle small number of cases\n        throw new JsonGenerationException(\"No native support for writing embedded objects\",\n                this);\n    }\n    \n    /*\n    /**********************************************************\n    /* Public API, write methods, Native Ids (type, object)\n    /**********************************************************\n     */\n\n    /**\n     * Method that can be called to output so-called native Object Id.\n     * Note that it may only be called after ensuring this is legal\n     * (with {@link #canWriteObjectId()}), as not all data formats\n     * have native type id support; and some may only allow them in\n     * certain positions or locations.\n     * If output is not allowed by the data format in this position,\n     * a {@link JsonGenerationException} will be thrown.\n     * \n     * @since 2.3\n     */\n    public void writeObjectId(Object id) throws IOException {\n        throw new JsonGenerationException(\"No native support for writing Object Ids\", this);\n    }\n\n    /**\n     * Method that can be called to output references to native Object Ids.\n     * Note that it may only be called after ensuring this is legal\n     * (with {@link #canWriteObjectId()}), as not all data formats\n     * have native type id support; and some may only allow them in\n     * certain positions or locations.\n     * If output is not allowed by the data format in this position,\n     * a {@link JsonGenerationException} will be thrown.\n     */\n    public void writeObjectRef(Object id) throws IOException {\n        throw new JsonGenerationException(\"No native support for writing Object Ids\", this);\n    }\n    \n    /**\n     * Method that can be called to output so-called native Type Id.\n     * Note that it may only be called after ensuring this is legal\n     * (with {@link #canWriteTypeId()}), as not all data formats\n     * have native type id support; and some may only allow them in\n     * certain positions or locations.\n     * If output is not allowed by the data format in this position,\n     * a {@link JsonGenerationException} will be thrown.\n     * \n     * @since 2.3\n     */\n    public void writeTypeId(Object id) throws IOException {\n        throw new JsonGenerationException(\"No native support for writing Type Ids\", this);\n    }\n\n    // 24-May-2016, tatu: Looks like this won't quite make it in 2.8... too\n    //   many open questions on whether return value may be used and such to\n    //   really close the loop. But leaving code sample in, in case we can resolve it\n    //   it for 2.9.\n\n    /*\n     * Replacement method for {@link #writeTypeId(Object)} which is called\n     * regardless of whether format has native type ids. If it does have native\n     * type ids, those are to be used (if configuration allows this), if not,\n     * structural type id inclusion is to be used. For JSON, for example, no\n     * native type ids exist and structural inclusion is always used.\n     *<p>\n     * NOTE: from databind perspective, only \"as-wrapper-array\", \"as-wrapper-object\" and\n     * \"as-property\" inclusion styles call this method; the remaining \"as-external-property\"\n     * mechanism always uses writes type id value as simple property.\n     *\n     * @param inclStyle Kind of inclusion; {@link JsonToken#START_ARRAY} for \"as-wrapper-array\",\n     *     {@link JsonToken#START_OBJECT} for \"as-wrapper-object\" and {@link JsonToken#FIELD_NAME}\n     *     for \"as-property\"\n     * @param forValue Java object for which type is being written; not used by standard mechanism\n     * @param valueShape Expected shape of the value to write, as expressed by the first token (for\n     *    structural type), or any of scalar types for non-structured values (typically\n     *    just {@link JsonToken#VALUE_STRING} -- exact token not required, just the fact it's scalar)\n     * @param typeId Type id to write\n     * @param propertyName Name of property to use, in case of \"as-property\" inclusion style\n     *\n     * @since 2.8\n     */\n    /*\n    public Object writeTypeSuffix(JsonToken inclStyle, Object forValue, JsonToken valueShape,\n            String typeId, String propertyName) throws IOException\n    {\n        if (inclStyle == JsonToken.FIELD_NAME) { // as-property\n            if (typeId == null) { // should not include `null` type id in any form with this style\n                writeStartObject();\n            } else if (valueShape == JsonToken.START_OBJECT) {\n                if (canWriteTypeId()) {\n                    writeTypeId(typeId);\n                    writeStartObject();\n                } else {\n                    writeStartObject();\n                    writeStringField(propertyName, typeId);\n                }\n            } else if (valueShape == JsonToken.START_ARRAY) {\n                if (canWriteTypeId()) {\n                    writeTypeId(typeId);\n                    writeStartArray();\n                } else {\n                    writeStartArray();\n                    writeString(typeId);\n                }\n            } else { // any scalar\n                if (canWriteTypeId()) {\n                    writeTypeId(typeId);\n                }\n            }\n            return JsonToken.END_OBJECT;\n        }\n        if (inclStyle == JsonToken.START_ARRAY) { // as-wrapper-array\n        } else if (inclStyle == JsonToken.START_OBJECT) { // as-wrapper-object\n            \n        } else {\n            throw new JsonGenerationException(\"Unrecognized inclusion style: \"+inclStyle, this);\n        }\n    }\n    */\n\n    /*\n    /**********************************************************\n    /* Public API, write methods, serializing Java objects\n    /**********************************************************\n     */\n\n    /**\n     * Method for writing given Java object (POJO) as Json.\n     * Exactly how the object gets written depends on object\n     * in question (ad on codec, its configuration); for most\n     * beans it will result in JSON Object, but for others JSON\n     * Array, or String or numeric value (and for nulls, JSON\n     * null literal.\n     * <b>NOTE</b>: generator must have its <b>object codec</b>\n     * set to non-null value; for generators created by a mapping\n     * factory this is the case, for others not.\n     */\n    public abstract void writeObject(Object pojo) throws IOException;\n\n    /**\n     * Method for writing given JSON tree (expressed as a tree\n     * where given JsonNode is the root) using this generator.\n     * This will generally just call\n     * {@link #writeObject} with given node, but is added\n     * for convenience and to make code more explicit in cases\n     * where it deals specifically with trees.\n     */\n    public abstract void writeTree(TreeNode rootNode) throws IOException;\n\n    /*\n    /**********************************************************\n    /* Public API, convenience field write methods\n    /**********************************************************\n     */\n\n    /**\n     * Convenience method for outputting a field entry (\"member\")\n     * that has a String value. Equivalent to:\n     *<pre>\n     *  writeFieldName(fieldName);\n     *  writeString(value);\n     *</pre>\n     *<p>\n     * Note: many performance-sensitive implementations override this method\n     */\n    public void writeStringField(String fieldName, String value) throws IOException {\n        writeFieldName(fieldName);\n        writeString(value);\n    }\n\n    /**\n     * Convenience method for outputting a field entry (\"member\")\n     * that has a boolean value. Equivalent to:\n     *<pre>\n     *  writeFieldName(fieldName);\n     *  writeBoolean(value);\n     *</pre>\n     */\n    public final void writeBooleanField(String fieldName, boolean value) throws IOException {\n        writeFieldName(fieldName);\n        writeBoolean(value);\n    }\n\n    /**\n     * Convenience method for outputting a field entry (\"member\")\n     * that has JSON literal value null. Equivalent to:\n     *<pre>\n     *  writeFieldName(fieldName);\n     *  writeNull();\n     *</pre>\n     */\n    public final void writeNullField(String fieldName) throws IOException {\n        writeFieldName(fieldName);\n        writeNull();\n    }\n\n    /**\n     * Convenience method for outputting a field entry (\"member\")\n     * that has the specified numeric value. Equivalent to:\n     *<pre>\n     *  writeFieldName(fieldName);\n     *  writeNumber(value);\n     *</pre>\n     */\n    public final void writeNumberField(String fieldName, int value) throws IOException {\n        writeFieldName(fieldName);\n        writeNumber(value);\n    }\n\n    /**\n     * Convenience method for outputting a field entry (\"member\")\n     * that has the specified numeric value. Equivalent to:\n     *<pre>\n     *  writeFieldName(fieldName);\n     *  writeNumber(value);\n     *</pre>\n     */\n    public final void writeNumberField(String fieldName, long value) throws IOException {\n        writeFieldName(fieldName);\n        writeNumber(value);\n    }\n\n    /**\n     * Convenience method for outputting a field entry (\"member\")\n     * that has the specified numeric value. Equivalent to:\n     *<pre>\n     *  writeFieldName(fieldName);\n     *  writeNumber(value);\n     *</pre>\n     */\n    public final void writeNumberField(String fieldName, double value) throws IOException {\n        writeFieldName(fieldName);\n        writeNumber(value);\n    }\n\n    /**\n     * Convenience method for outputting a field entry (\"member\")\n     * that has the specified numeric value. Equivalent to:\n     *<pre>\n     *  writeFieldName(fieldName);\n     *  writeNumber(value);\n     *</pre>\n     */\n    public final void writeNumberField(String fieldName, float value) throws IOException {\n        writeFieldName(fieldName);\n        writeNumber(value);\n    }\n\n    /**\n     * Convenience method for outputting a field entry (\"member\")\n     * that has the specified numeric value.\n     * Equivalent to:\n     *<pre>\n     *  writeFieldName(fieldName);\n     *  writeNumber(value);\n     *</pre>\n     */\n    public final void writeNumberField(String fieldName, BigDecimal value) throws IOException {\n        writeFieldName(fieldName);\n        writeNumber(value);\n    }\n\n    /**\n     * Convenience method for outputting a field entry (\"member\")\n     * that contains specified data in base64-encoded form.\n     * Equivalent to:\n     *<pre>\n     *  writeFieldName(fieldName);\n     *  writeBinary(value);\n     *</pre>\n     */\n    public final void writeBinaryField(String fieldName, byte[] data) throws IOException {\n        writeFieldName(fieldName);\n        writeBinary(data);\n    }\n\n    /**\n     * Convenience method for outputting a field entry (\"member\")\n     * (that will contain a JSON Array value), and the START_ARRAY marker.\n     * Equivalent to:\n     *<pre>\n     *  writeFieldName(fieldName);\n     *  writeStartArray();\n     *</pre>\n     *<p>\n     * Note: caller still has to take care to close the array\n     * (by calling {#link #writeEndArray}) after writing all values\n     * of the value Array.\n     */\n    public final void writeArrayFieldStart(String fieldName) throws IOException {\n        writeFieldName(fieldName);\n        writeStartArray();\n    }\n\n    /**\n     * Convenience method for outputting a field entry (\"member\")\n     * (that will contain a JSON Object value), and the START_OBJECT marker.\n     * Equivalent to:\n     *<pre>\n     *  writeFieldName(fieldName);\n     *  writeStartObject();\n     *</pre>\n     *<p>\n     * Note: caller still has to take care to close the Object\n     * (by calling {#link #writeEndObject}) after writing all\n     * entries of the value Object.\n     */\n    public final void writeObjectFieldStart(String fieldName) throws IOException {\n        writeFieldName(fieldName);\n        writeStartObject();\n    }\n\n    /**\n     * Convenience method for outputting a field entry (\"member\")\n     * that has contents of specific Java object as its value.\n     * Equivalent to:\n     *<pre>\n     *  writeFieldName(fieldName);\n     *  writeObject(pojo);\n     *</pre>\n     */\n    public final void writeObjectField(String fieldName, Object pojo) throws IOException {\n        writeFieldName(fieldName);\n        writeObject(pojo);\n    }\n\n    /**\n     * Method called to indicate that a property in this position was\n     * skipped. It is usually only called for generators that return\n     * <code>false</code> from {@link #canOmitFields()}.\n     *<p>\n     * Default implementation does nothing.\n     * \n     * @since 2.3\n     */\n    public void writeOmittedField(String fieldName) throws IOException { }\n    \n    /*\n    /**********************************************************\n    /* Public API, copy-through methods\n    /**********************************************************\n     */\n\n    /**\n     * Method for copying contents of the current event that\n     * the given parser instance points to.\n     * Note that the method <b>will not</b> copy any other events,\n     * such as events contained within JSON Array or Object structures.\n     *<p>\n     * Calling this method will not advance the given\n     * parser, although it may cause parser to internally process\n     * more data (if it lazy loads contents of value events, for example)\n     */\n    public void copyCurrentEvent(JsonParser p) throws IOException\n    {\n        JsonToken t = p.currentToken();\n        // sanity check; what to do?\n        if (t == null) {\n            _reportError(\"No current event to copy\");\n        }\n        switch (t.id()) {\n        case ID_NOT_AVAILABLE:\n            _reportError(\"No current event to copy\");\n            break; // never gets here\n        case ID_START_OBJECT:\n            writeStartObject();\n            break;\n        case ID_END_OBJECT:\n            writeEndObject();\n            break;\n        case ID_START_ARRAY:\n            writeStartArray();\n            break;\n        case ID_END_ARRAY:\n            writeEndArray();\n            break;\n        case ID_FIELD_NAME:\n            writeFieldName(p.getCurrentName());\n            break;\n        case ID_STRING:\n            if (p.hasTextCharacters()) {\n                writeString(p.getTextCharacters(), p.getTextOffset(), p.getTextLength());\n            } else {\n                writeString(p.getText());\n            }\n            break;\n        case ID_NUMBER_INT:\n        {\n            NumberType n = p.getNumberType();\n            if (n == NumberType.INT) {\n                writeNumber(p.getIntValue());\n            } else if (n == NumberType.BIG_INTEGER) {\n                writeNumber(p.getBigIntegerValue());\n            } else {\n                writeNumber(p.getLongValue());\n            }\n            break;\n        }\n        case ID_NUMBER_FLOAT:\n        {\n            NumberType n = p.getNumberType();\n            if (n == NumberType.BIG_DECIMAL) {\n                writeNumber(p.getDecimalValue());\n            } else if (n == NumberType.FLOAT) {\n                writeNumber(p.getFloatValue());\n            } else {\n                writeNumber(p.getDoubleValue());\n            }\n            break;\n        }\n        case ID_TRUE:\n            writeBoolean(true);\n            break;\n        case ID_FALSE:\n            writeBoolean(false);\n            break;\n        case ID_NULL:\n            writeNull();\n            break;\n        case ID_EMBEDDED_OBJECT:\n            writeObject(p.getEmbeddedObject());\n            break;\n        default:\n            _throwInternal();\n        }\n    }\n\n    /**\n     * Method for copying contents of the current event\n     * <b>and following events that it encloses</b>\n     * the given parser instance points to.\n     *<p>\n     * So what constitutes enclosing? Here is the list of\n     * events that have associated enclosed events that will\n     * get copied:\n     *<ul>\n     * <li>{@link JsonToken#START_OBJECT}:\n     *   all events up to and including matching (closing)\n     *   {@link JsonToken#END_OBJECT} will be copied\n     *  </li>\n     * <li>{@link JsonToken#START_ARRAY}\n     *   all events up to and including matching (closing)\n     *   {@link JsonToken#END_ARRAY} will be copied\n     *  </li>\n     * <li>{@link JsonToken#FIELD_NAME} the logical value (which\n     *   can consist of a single scalar value; or a sequence of related\n     *   events for structured types (JSON Arrays, Objects)) will\n     *   be copied along with the name itself. So essentially the\n     *   whole <b>field entry</b> (name and value) will be copied.\n     *  </li>\n     *</ul>\n     *<p>\n     * After calling this method, parser will point to the\n     * <b>last event</b> that was copied. This will either be\n     * the event parser already pointed to (if there were no\n     * enclosed events), or the last enclosed event copied.\n     */\n    public void copyCurrentStructure(JsonParser p) throws IOException\n    {\n        JsonToken t = p.currentToken();\n        if (t == null) {\n            _reportError(\"No current event to copy\");\n        }\n        // Let's handle field-name separately first\n        int id = t.id();\n        if (id == ID_FIELD_NAME) {\n            writeFieldName(p.getCurrentName());\n            t = p.nextToken();\n            id = t.id();\n            // fall-through to copy the associated value\n        }\n        switch (id) {\n        case ID_START_OBJECT:\n            writeStartObject();\n            while (p.nextToken() != JsonToken.END_OBJECT) {\n                copyCurrentStructure(p);\n            }\n            writeEndObject();\n            break;\n        case ID_START_ARRAY:\n            writeStartArray();\n            while (p.nextToken() != JsonToken.END_ARRAY) {\n                copyCurrentStructure(p);\n            }\n            writeEndArray();\n            break;\n        default:\n            copyCurrentEvent(p);\n        }\n    }\n\n    /*\n    /**********************************************************\n    /* Public API, context access\n    /**********************************************************\n     */\n\n    /**\n     * @return Context object that can give information about logical\n     *   position within generated json content.\n     */\n    public abstract JsonStreamContext getOutputContext();\n\n    /*\n    /**********************************************************\n    /* Public API, buffer handling\n    /**********************************************************\n     */\n\n    /**\n     * Method called to flush any buffered content to the underlying\n     * target (output stream, writer), and to flush the target itself\n     * as well.\n     */\n    @Override\n    public abstract void flush() throws IOException;\n\n    /**\n     * Method that can be called to determine whether this generator\n     * is closed or not. If it is closed, no more output can be done.\n     */\n    public abstract boolean isClosed();\n\n    /*\n    /**********************************************************\n    /* Closeable implementation\n    /**********************************************************\n     */\n\n    /**\n     * Method called to close this generator, so that no more content\n     * can be written.\n     *<p>\n     * Whether the underlying target (stream, writer) gets closed depends\n     * on whether this generator either manages the target (i.e. is the\n     * only one with access to the target -- case if caller passes a\n     * reference to the resource such as File, but not stream); or\n     * has feature {@link Feature#AUTO_CLOSE_TARGET} enabled.\n     * If either of above is true, the target is also closed. Otherwise\n     * (not managing, feature not enabled), target is not closed.\n     */\n    @Override\n    public abstract void close() throws IOException;\n\n    /*\n    /**********************************************************\n    /* Helper methods for sub-classes\n    /**********************************************************\n     */\n\n    /**\n     * Helper method used for constructing and throwing\n     * {@link JsonGenerationException} with given base message.\n     *<p>\n     * Note that sub-classes may override this method to add more detail\n     * or use a {@link JsonGenerationException} sub-class.\n     */\n    protected void _reportError(String msg) throws JsonGenerationException {\n        throw new JsonGenerationException(msg, this);\n    }\n\n    protected final void _throwInternal() { VersionUtil.throwInternal(); }\n\n    protected void _reportUnsupportedOperation() {\n        throw new UnsupportedOperationException(\"Operation not supported by generator of type \"+getClass().getName());\n    }\n\n    /**\n     * @since 2.8\n     */\n    protected final void _verifyOffsets(int arrayLength, int offset, int length)\n    {\n        if ((offset < 0) || (offset + length) > arrayLength) {\n            throw new IllegalArgumentException(String.format(\n                    \"invalid argument(s) (offset=%d, length=%d) for input array of %d element\",\n                    offset, length, arrayLength));\n        }\n    }\n\n    /**\n     * Helper method to try to call appropriate write method for given\n     * untyped Object. At this point, no structural conversions should be done,\n     * only simple basic types are to be coerced as necessary.\n     *\n     * @param value Non-null value to write\n     */\n    protected void _writeSimpleObject(Object value)  throws IOException\n    {\n        /* 31-Dec-2009, tatu: Actually, we could just handle some basic\n         *    types even without codec. This can improve interoperability,\n         *    and specifically help with TokenBuffer.\n         */\n        if (value == null) {\n            writeNull();\n            return;\n        }\n        if (value instanceof String) {\n            writeString((String) value);\n            return;\n        }\n        if (value instanceof Number) {\n            Number n = (Number) value;\n            if (n instanceof Integer) {\n                writeNumber(n.intValue());\n                return;\n            } else if (n instanceof Long) {\n                writeNumber(n.longValue());\n                return;\n            } else if (n instanceof Double) {\n                writeNumber(n.doubleValue());\n                return;\n            } else if (n instanceof Float) {\n                writeNumber(n.floatValue());\n                return;\n            } else if (n instanceof Short) {\n                writeNumber(n.shortValue());\n                return;\n            } else if (n instanceof Byte) {\n                writeNumber(n.byteValue());\n                return;\n            } else if (n instanceof BigInteger) {\n                writeNumber((BigInteger) n);\n                return;\n            } else if (n instanceof BigDecimal) {\n                writeNumber((BigDecimal) n);\n                return;\n\n            // then Atomic types\n            } else if (n instanceof AtomicInteger) {\n                writeNumber(((AtomicInteger) n).get());\n                return;\n            } else if (n instanceof AtomicLong) {\n                writeNumber(((AtomicLong) n).get());\n                return;\n            }\n        } else if (value instanceof byte[]) {\n            writeBinary((byte[]) value);\n            return;\n        } else if (value instanceof Boolean) {\n            writeBoolean((Boolean) value);\n            return;\n        } else if (value instanceof AtomicBoolean) {\n            writeBoolean(((AtomicBoolean) value).get());\n            return;\n        }\n        throw new IllegalStateException(\"No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed \"\n                +value.getClass().getName()+\")\");\n    }    \n}", "writeStartObject": "\n    public abstract void writeStartObject() throws IOException;\n\n    /**\n     * Method for writing starting marker of a JSON Object value\n     * (character '{'; plus possible white space decoration\n     * if pretty-printing is enabled), to represent Java given\n     * as the argument. Argument is offered as metadata, but more\n     * importantly it should be assigned as the \"current value\"\n     * for the Object content that gets constructed and initialized.\n     *<p>\n     * Object values can be written in any context where values\n     * are allowed: meaning everywhere except for when\n     * a field name is expected.\n     *\n     * @since 2.8.\n     */\n    public void writeStartObject(Object forValue) throws IOException\n    {\n        writeStartObject();\n        setCurrentValue(forValue);\n    }\n\n    /**\n     * Method for writing closing marker of a JSON Object value\n     * (character '}'; plus possible white space decoration", "writeEndObject": "\n    public abstract void writeEndObject() throws IOException;\n\n    /**\n     * Method for writing a field name (JSON String surrounded by\n     * double quotes: syntactically identical to a JSON String value),\n     * possibly decorated by white space if pretty-printing is enabled.\n     *<p>\n     * Field names can only be written in Object context (check out\n     * JSON specification for details), when field name is expected\n     * (field names alternate with values).\n     */\n    public abstract void writeFieldName(String name) throws IOException;\n\n    /**\n     * Method similar to {@link #writeFieldName(String)}, main difference", "writeFieldName": "\n    public abstract void writeFieldName(String name) throws IOException;\n\n    /**\n     * Method similar to {@link #writeFieldName(String)}, main difference", "writeFieldId": "\n    public void writeFieldId(long id) throws IOException {\n        writeFieldName(Long.toString(id));\n    }", "writeArray": "\n    public void writeArray(int[] array, int offset, int length) throws IOException\n    {\n        if (array == null) {\n            throw new IllegalArgumentException(\"null array\");\n        }\n        _verifyOffsets(array.length, offset, length);\n        writeStartArray();\n        for (int i = offset, end = offset+length; i < end; ++i) {\n            writeNumber(array[i]);\n        }\n        writeEndArray();\n    }", "writeString": "\n    public abstract void writeString(String text) throws IOException;\n\n    /**\n     * Method for outputting a String value. Depending on context\n     * this means either array element, (object) field value or\n     * a stand alone String; but in all cases, String will be\n     * surrounded in double quotes, and contents will be properly\n     * escaped as required by JSON specification.\n     */\n    public abstract void writeString(char[] text, int offset, int len) throws IOException;\n\n    /**\n     * Method similar to {@link #writeString(String)}, but that takes", "writeRawUTF8String": "\n    public abstract void writeRawUTF8String(byte[] text, int offset, int length)\n        throws IOException;\n\n    /**\n     * Method similar to {@link #writeString(String)} but that takes as its input", "writeUTF8String": "\n    public abstract void writeUTF8String(byte[] text, int offset, int length)\n        throws IOException;\n\n    /*\n    /**********************************************************\n    /* Public API, write methods, binary/raw content\n    /**********************************************************\n     */\n\n    /**\n     * Method that will force generator to copy\n     * input text verbatim with <b>no</b> modifications (including\n     * that no escaping is done and no separators are added even\n     * if context [array, object] would otherwise require such).\n     * If such separators are desired, use\n     * {@link #writeRawValue(String)} instead.", "writeRaw": "\n    public abstract void writeRaw(String text) throws IOException;\n\n    /**\n     * Method that will force generator to copy\n     * input text verbatim with <b>no</b> modifications (including\n     * that no escaping is done and no separators are added even\n     * if context [array, object] would otherwise require such).\n     * If such separators are desired, use\n     * {@link #writeRawValue(String)} instead.", "writeRawValue": "\n    public abstract void writeRawValue(String text) throws IOException;\n\n    public abstract void writeRawValue(String text, int offset, int len) throws IOException;\n\n    public abstract void writeRawValue(char[] text, int offset, int len) throws IOException;\n\n    /**\n     * Method similar to {@link #writeRawValue(String)}, but potentially more", "writeBinary": "\n    public abstract void writeBinary(Base64Variant bv,\n            byte[] data, int offset, int len) throws IOException;\n\n    /**\n     * Similar to {@link #writeBinary(Base64Variant,byte[],int,int)},", "writeNumber": "\n    public void writeNumber(short v) throws IOException { writeNumber((int) v); }", "writeBoolean": "\n    public abstract void writeBoolean(boolean state) throws IOException;\n\n    /**\n     * Method for outputting literal JSON null value.\n     * Can be called in any context where a value is expected\n     * (Array value, Object field value, root-level value).\n     * Additional white space may be added around the value\n     * if pretty-printing is enabled.\n     */\n    public abstract void writeNull() throws IOException;\n\n    /**\n     * Method that can be called on backends that support passing opaque datatypes of\n     * non-JSON formats\n     *\n     * @since 2.8\n     */\n    public void writeEmbeddedObject(Object object) throws IOException {\n        // 01-Sep-2016, tatu: As per [core#318], handle small number of cases\n        throw new JsonGenerationException(\"No native support for writing embedded objects\",\n                this);\n    }", "writeNull": "\n    public abstract void writeNull() throws IOException;\n\n    /**\n     * Method that can be called on backends that support passing opaque datatypes of\n     * non-JSON formats\n     *\n     * @since 2.8\n     */\n    public void writeEmbeddedObject(Object object) throws IOException {\n        // 01-Sep-2016, tatu: As per [core#318], handle small number of cases\n        throw new JsonGenerationException(\"No native support for writing embedded objects\",\n                this);\n    }", "writeEmbeddedObject": "\n    public void writeEmbeddedObject(Object object) throws IOException {\n        // 01-Sep-2016, tatu: As per [core#318], handle small number of cases\n        throw new JsonGenerationException(\"No native support for writing embedded objects\",\n                this);\n    }", "writeObjectId": "\n    public void writeObjectId(Object id) throws IOException {\n        throw new JsonGenerationException(\"No native support for writing Object Ids\", this);\n    }", "writeObjectRef": "\n    public void writeObjectRef(Object id) throws IOException {\n        throw new JsonGenerationException(\"No native support for writing Object Ids\", this);\n    }", "writeTypeId": "\n    public void writeTypeId(Object id) throws IOException {\n        throw new JsonGenerationException(\"No native support for writing Type Ids\", this);\n    }", "writeObject": "\n    public abstract void writeObject(Object pojo) throws IOException;\n\n    /**\n     * Method for writing given JSON tree (expressed as a tree\n     * where given JsonNode is the root) using this generator.\n     * This will generally just call\n     * {@link #writeObject} with given node, but is added", "writeTree": "\n    public abstract void writeTree(TreeNode rootNode) throws IOException;\n\n    /*\n    /**********************************************************\n    /* Public API, convenience field write methods\n    /**********************************************************\n     */\n\n    /**\n     * Convenience method for outputting a field entry (\"member\")\n     * that has a String value. Equivalent to:\n     *<pre>\n     *  writeFieldName(fieldName);\n     *  writeString(value);\n     *</pre>\n     *<p>\n     * Note: many performance-sensitive implementations override this method\n     */\n    public void writeStringField(String fieldName, String value) throws IOException {\n        writeFieldName(fieldName);\n        writeString(value);\n    }", "writeStringField": "\n    public void writeStringField(String fieldName, String value) throws IOException {\n        writeFieldName(fieldName);\n        writeString(value);\n    }", "writeBooleanField": "\n    public final void writeBooleanField(String fieldName, boolean value) throws IOException {\n        writeFieldName(fieldName);\n        writeBoolean(value);\n    }", "writeNullField": "\n    public final void writeNullField(String fieldName) throws IOException {\n        writeFieldName(fieldName);\n        writeNull();\n    }", "writeNumberField": "\n    public final void writeNumberField(String fieldName, int value) throws IOException {\n        writeFieldName(fieldName);\n        writeNumber(value);\n    }", "writeBinaryField": "\n    public final void writeBinaryField(String fieldName, byte[] data) throws IOException {\n        writeFieldName(fieldName);\n        writeBinary(data);\n    }", "writeArrayFieldStart": "\n    public final void writeArrayFieldStart(String fieldName) throws IOException {\n        writeFieldName(fieldName);\n        writeStartArray();\n    }", "writeObjectFieldStart": "\n    public final void writeObjectFieldStart(String fieldName) throws IOException {\n        writeFieldName(fieldName);\n        writeStartObject();\n    }", "writeObjectField": "\n    public final void writeObjectField(String fieldName, Object pojo) throws IOException {\n        writeFieldName(fieldName);\n        writeObject(pojo);\n    }", "writeOmittedField": "\n    public void writeOmittedField(String fieldName) throws IOException { }", "copyCurrentEvent": "\n    public void copyCurrentEvent(JsonParser p) throws IOException\n    {\n        JsonToken t = p.currentToken();\n        // sanity check; what to do?\n        if (t == null) {\n            _reportError(\"No current event to copy\");\n        }\n        switch (t.id()) {\n        case ID_NOT_AVAILABLE:\n            _reportError(\"No current event to copy\");\n            break; // never gets here\n        case ID_START_OBJECT:\n            writeStartObject();\n            break;\n        case ID_END_OBJECT:\n            writeEndObject();\n            break;\n        case ID_START_ARRAY:\n            writeStartArray();\n            break;\n        case ID_END_ARRAY:\n            writeEndArray();\n            break;\n        case ID_FIELD_NAME:\n            writeFieldName(p.getCurrentName());\n            break;\n        case ID_STRING:\n            if (p.hasTextCharacters()) {\n                writeString(p.getTextCharacters(), p.getTextOffset(), p.getTextLength());\n            } else {\n                writeString(p.getText());\n            }\n            break;\n        case ID_NUMBER_INT:\n        {\n            NumberType n = p.getNumberType();\n            if (n == NumberType.INT) {\n                writeNumber(p.getIntValue());\n            } else if (n == NumberType.BIG_INTEGER) {\n                writeNumber(p.getBigIntegerValue());\n            } else {\n                writeNumber(p.getLongValue());\n            }\n            break;\n        }\n        case ID_NUMBER_FLOAT:\n        {\n            NumberType n = p.getNumberType();\n            if (n == NumberType.BIG_DECIMAL) {\n                writeNumber(p.getDecimalValue());\n            } else if (n == NumberType.FLOAT) {\n                writeNumber(p.getFloatValue());\n            } else {\n                writeNumber(p.getDoubleValue());\n            }\n            break;\n        }\n        case ID_TRUE:\n            writeBoolean(true);\n            break;\n        case ID_FALSE:\n            writeBoolean(false);\n            break;\n        case ID_NULL:\n            writeNull();\n            break;\n        case ID_EMBEDDED_OBJECT:\n            writeObject(p.getEmbeddedObject());\n            break;\n        default:\n            _throwInternal();\n        }\n    }", "copyCurrentStructure": "\n    public void copyCurrentStructure(JsonParser p) throws IOException\n    {\n        JsonToken t = p.currentToken();\n        if (t == null) {\n            _reportError(\"No current event to copy\");\n        }\n        // Let's handle field-name separately first\n        int id = t.id();\n        if (id == ID_FIELD_NAME) {\n            writeFieldName(p.getCurrentName());\n            t = p.nextToken();\n            id = t.id();\n            // fall-through to copy the associated value\n        }\n        switch (id) {\n        case ID_START_OBJECT:\n            writeStartObject();\n            while (p.nextToken() != JsonToken.END_OBJECT) {\n                copyCurrentStructure(p);\n            }\n            writeEndObject();\n            break;\n        case ID_START_ARRAY:\n            writeStartArray();\n            while (p.nextToken() != JsonToken.END_ARRAY) {\n                copyCurrentStructure(p);\n            }\n            writeEndArray();\n            break;\n        default:\n            copyCurrentEvent(p);\n        }\n    }", "getOutputContext": "\n    public abstract JsonStreamContext getOutputContext();\n\n    /*\n    /**********************************************************\n    /* Public API, buffer handling\n    /**********************************************************\n     */\n\n    /**\n     * Method called to flush any buffered content to the underlying\n     * target (output stream, writer), and to flush the target itself\n     * as well.\n     */\n    @Override\n    public abstract void flush() throws IOException;\n\n    /**\n     * Method that can be called to determine whether this generator\n     * is closed or not. If it is closed, no more output can be done.\n     */\n    public abstract boolean isClosed();\n\n    /*\n    /**********************************************************\n    /* Closeable implementation\n    /**********************************************************\n     */\n\n    /**\n     * Method called to close this generator, so that no more content\n     * can be written.\n     *<p>\n     * Whether the underlying target (stream, writer) gets closed depends\n     * on whether this generator either manages the target (i.e. is the\n     * only one with access to the target -- case if caller passes a\n     * reference to the resource such as File, but not stream); or\n     * has feature {@link Feature#AUTO_CLOSE_TARGET} enabled.", "flush": "\n    public abstract void flush() throws IOException;\n\n    /**\n     * Method that can be called to determine whether this generator\n     * is closed or not. If it is closed, no more output can be done.\n     */\n    public abstract boolean isClosed();\n\n    /*\n    /**********************************************************\n    /* Closeable implementation\n    /**********************************************************\n     */\n\n    /**\n     * Method called to close this generator, so that no more content\n     * can be written.\n     *<p>\n     * Whether the underlying target (stream, writer) gets closed depends\n     * on whether this generator either manages the target (i.e. is the\n     * only one with access to the target -- case if caller passes a\n     * reference to the resource such as File, but not stream); or\n     * has feature {@link Feature#AUTO_CLOSE_TARGET} enabled.", "isClosed": "\n    public abstract boolean isClosed();\n\n    /*\n    /**********************************************************\n    /* Closeable implementation\n    /**********************************************************\n     */\n\n    /**\n     * Method called to close this generator, so that no more content\n     * can be written.\n     *<p>\n     * Whether the underlying target (stream, writer) gets closed depends\n     * on whether this generator either manages the target (i.e. is the\n     * only one with access to the target -- case if caller passes a\n     * reference to the resource such as File, but not stream); or\n     * has feature {@link Feature#AUTO_CLOSE_TARGET} enabled.", "close": "\n    public abstract void close() throws IOException;\n\n    /*\n    /**********************************************************\n    /* Helper methods for sub-classes\n    /**********************************************************\n     */\n\n    /**\n     * Helper method used for constructing and throwing\n     * {@link JsonGenerationException} with given base message.", "_reportError": "\n    protected void _reportError(String msg) throws JsonGenerationException {\n        throw new JsonGenerationException(msg, this);\n    }", "_throwInternal": "\n    protected final void _throwInternal() { VersionUtil.throwInternal(); }", "_reportUnsupportedOperation": "\n    protected void _reportUnsupportedOperation() {\n        throw new UnsupportedOperationException(\"Operation not supported by generator of type \"+getClass().getName());\n    }", "_verifyOffsets": "\n    protected final void _verifyOffsets(int arrayLength, int offset, int length)\n    {\n        if ((offset < 0) || (offset + length) > arrayLength) {\n            throw new IllegalArgumentException(String.format(\n                    \"invalid argument(s) (offset=%d, length=%d) for input array of %d element\",\n                    offset, length, arrayLength));\n        }\n    }", "_writeSimpleObject": "\n    protected void _writeSimpleObject(Object value)  throws IOException\n    {\n        /* 31-Dec-2009, tatu: Actually, we could just handle some basic\n         *    types even without codec. This can improve interoperability,\n         *    and specifically help with TokenBuffer.\n         */\n        if (value == null) {\n            writeNull();\n            return;\n        }\n        if (value instanceof String) {\n            writeString((String) value);\n            return;\n        }\n        if (value instanceof Number) {\n            Number n = (Number) value;\n            if (n instanceof Integer) {\n                writeNumber(n.intValue());\n                return;\n            } else if (n instanceof Long) {\n                writeNumber(n.longValue());\n                return;\n            } else if (n instanceof Double) {\n                writeNumber(n.doubleValue());\n                return;\n            } else if (n instanceof Float) {\n                writeNumber(n.floatValue());\n                return;\n            } else if (n instanceof Short) {\n                writeNumber(n.shortValue());\n                return;\n            } else if (n instanceof Byte) {\n                writeNumber(n.byteValue());\n                return;\n            } else if (n instanceof BigInteger) {\n                writeNumber((BigInteger) n);\n                return;\n            } else if (n instanceof BigDecimal) {\n                writeNumber((BigDecimal) n);\n                return;\n\n            // then Atomic types\n            } else if (n instanceof AtomicInteger) {\n                writeNumber(((AtomicInteger) n).get());\n                return;\n            } else if (n instanceof AtomicLong) {\n                writeNumber(((AtomicLong) n).get());\n                return;\n            }\n        } else if (value instanceof byte[]) {\n            writeBinary((byte[]) value);\n            return;\n        } else if (value instanceof Boolean) {\n            writeBoolean((Boolean) value);\n            return;\n        } else if (value instanceof AtomicBoolean) {\n            writeBoolean(((AtomicBoolean) value).get());\n            return;\n        }\n        throw new IllegalStateException(\"No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed \"\n                +value.getClass().getName()+\")\");\n    }    "}