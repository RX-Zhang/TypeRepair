{"upgradeFrom": "\n    public static ReferenceType upgradeFrom(JavaType baseType, JavaType refdType) {\n        if (refdType == null) {\n            throw new IllegalArgumentException(\"Missing referencedType\");\n        }\n        // 19-Oct-2015, tatu: Not sure if and how other types could be used as base;\n        //    will cross that bridge if and when need be\n        if (baseType instanceof TypeBase) {\n            return new ReferenceType((TypeBase) baseType, refdType);\n        }\n        throw new IllegalArgumentException(\"Can not upgrade from an instance of \"+baseType.getClass());\n    }", "construct": "\n    public static ReferenceType construct(Class<?> cls, TypeBindings bindings,\n            JavaType superClass, JavaType[] superInts, JavaType refType)\n    {\n        return new ReferenceType(cls, bindings, superClass, superInts,\n                refType, null, null, null, false);\n    }", "withContentType": "\n    public JavaType withContentType(JavaType contentType) {\n        if (_referencedType == contentType) {\n            return this;\n        }\n        return new ReferenceType(_class, _bindings, _superClass, _superInterfaces,\n                contentType, _anchorType, _valueHandler, _typeHandler, _asStatic);\n    }", "withTypeHandler": "\n    public ReferenceType withTypeHandler(Object h)\n    {\n        if (h == _typeHandler) {\n            return this;\n        }\n        return new ReferenceType(_class, _bindings, _superClass, _superInterfaces,\n                _referencedType, _anchorType, _valueHandler, h, _asStatic);\n    }", "withContentTypeHandler": "\n    public ReferenceType withContentTypeHandler(Object h)\n    {\n        if (h == _referencedType.<Object>getTypeHandler()) {\n            return this;\n        }\n        return new ReferenceType(_class, _bindings, _superClass, _superInterfaces,\n                _referencedType.withTypeHandler(h), _anchorType,\n                _valueHandler, _typeHandler, _asStatic);\n    }", "withValueHandler": "\n    public ReferenceType withValueHandler(Object h) {\n        if (h == _valueHandler) {\n            return this;\n        }\n        return new ReferenceType(_class, _bindings,\n                _superClass, _superInterfaces, _referencedType, _anchorType,\n                h, _typeHandler,_asStatic);\n    }", "withContentValueHandler": "\n    public ReferenceType withContentValueHandler(Object h) {\n        if (h == _referencedType.<Object>getValueHandler()) {\n            return this;\n        }\n        JavaType refdType = _referencedType.withValueHandler(h);\n        return new ReferenceType(_class, _bindings,\n                _superClass, _superInterfaces, refdType, _anchorType,\n                _valueHandler, _typeHandler, _asStatic);\n    }", "withStaticTyping": "\n    public ReferenceType withStaticTyping() {\n        if (_asStatic) {\n            return this;\n        }\n        return new ReferenceType(_class, _bindings, _superClass, _superInterfaces,\n                _referencedType.withStaticTyping(), _anchorType,\n                 _valueHandler, _typeHandler, true);\n    }", "refine": "\n    public JavaType refine(Class<?> rawType, TypeBindings bindings,\n            JavaType superClass, JavaType[] superInterfaces) {\n        return new ReferenceType(rawType, _bindings,\n                superClass, superInterfaces, _referencedType, _anchorType,\n                _valueHandler, _typeHandler, _asStatic);\n    }", "buildCanonicalName": "\n    protected String buildCanonicalName()\n    {\n        StringBuilder sb = new StringBuilder();\n        sb.append(_class.getName());\n        sb.append('<');\n        sb.append(_referencedType.toCanonical());\n        return sb.toString();\n    }", "_narrow": "\n    protected JavaType _narrow(Class<?> subclass)\n    {\n        // Should we check that there is a sub-class relationship?\n        return new ReferenceType(subclass, _bindings,\n                _superClass, _superInterfaces, _referencedType, _anchorType,\n                _valueHandler, _typeHandler, _asStatic);\n    }", "getContentType": "\n    public JavaType getContentType() {\n        return _referencedType;\n    }", "getReferencedType": "\n    public JavaType getReferencedType() {\n        return _referencedType;\n    }", "hasContentType": "\n    public boolean hasContentType() {\n        return true;\n    }", "isReferenceType": "\n    public boolean isReferenceType() {\n        return true;\n    }", "getErasedSignature": "\n    public StringBuilder getErasedSignature(StringBuilder sb) {\n        return _classSignature(_class, sb, true);\n    }", "getGenericSignature": "\n    public StringBuilder getGenericSignature(StringBuilder sb)\n    {\n        _classSignature(_class, sb, false);\n        sb.append('<');\n        sb = _referencedType.getGenericSignature(sb);\n        sb.append(\">;\");\n        return sb;\n    }", "getAnchorType": "\n    public JavaType getAnchorType() {\n        return _anchorType;\n    }", "isAnchorType": "\n    public boolean isAnchorType() {\n        return (_anchorType == this);\n    }", "toString": "\n    public String toString()\n    {\n        return new StringBuilder(40)\n            .append(\"[reference type, class \")\n            .append(buildCanonicalName())\n            .append('<')\n            .append(_referencedType)\n            .append('>')\n            .append(']')\n            .toString();\n    }", "equals": "\n    public boolean equals(Object o)\n    {\n        if (o == this) return true;\n        if (o == null) return false;\n        if (o.getClass() != getClass()) return false;\n\n        ReferenceType other = (ReferenceType) o;\n\n        if (other._class != _class) return false;\n        \n        // Otherwise actually mostly worry about referenced type\n        return _referencedType.equals(other._referencedType);\n    }"}