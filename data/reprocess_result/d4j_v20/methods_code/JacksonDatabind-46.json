{"construct": "\n    public static ReferenceType construct(Class<?> cls, JavaType refType,\n            Object valueHandler, Object typeHandler)\n    {\n        return new ReferenceType(cls, refType, null, null, false);\n    }                                   ", "withTypeHandler": "\n    public ReferenceType withTypeHandler(Object h)\n    {\n        if (h == _typeHandler) {\n            return this;\n        }\n        return new ReferenceType(_class, _referencedType, _valueHandler, h, _asStatic);\n    }", "withContentTypeHandler": "\n    public ReferenceType withContentTypeHandler(Object h)\n    {\n        if (h == _referencedType.<Object>getTypeHandler()) {\n            return this;\n        }\n        return new ReferenceType(_class, _referencedType.withTypeHandler(h),\n                _valueHandler, _typeHandler, _asStatic);\n    }", "withValueHandler": "\n    public ReferenceType withValueHandler(Object h) {\n        if (h == _valueHandler) {\n            return this;\n        }\n        return new ReferenceType(_class, _referencedType, h, _typeHandler,_asStatic);\n    }", "withContentValueHandler": "\n    public ReferenceType withContentValueHandler(Object h) {\n        if (h == _referencedType.<Object>getValueHandler()) {\n            return this;\n        }\n        return new ReferenceType(_class, _referencedType.withValueHandler(h),\n                _valueHandler, _typeHandler, _asStatic);\n    }", "withStaticTyping": "\n    public ReferenceType withStaticTyping() {\n        if (_asStatic) {\n            return this;\n        }\n        return new ReferenceType(_class, _referencedType.withStaticTyping(),\n                 _valueHandler, _typeHandler, true);\n    }", "buildCanonicalName": "\n    protected String buildCanonicalName()\n    {\n        StringBuilder sb = new StringBuilder();\n        sb.append(_class.getName());\n        sb.append('<');\n        sb.append(_referencedType.toCanonical());\n        return sb.toString();\n    }", "_narrow": "\n    protected JavaType _narrow(Class<?> subclass)\n    {\n        // Should we check that there is a sub-class relationship?\n        return new ReferenceType(subclass, _referencedType,\n                _valueHandler, _typeHandler, _asStatic);\n    }", "getReferencedType": "\n    public JavaType getReferencedType() {\n        return _referencedType;\n    }", "isReferenceType": "\n    public boolean isReferenceType() {\n        return true;\n    }", "containedTypeCount": "\n    public int containedTypeCount() {\n        return 1;\n    }", "containedType": "\n    public JavaType containedType(int index) {\n        return (index == 0) ? _referencedType : null;\n    }", "containedTypeName": "\n    public String containedTypeName(int index) {\n        return (index == 0) ? \"T\" : null;\n    }", "getParameterSource": "\n    public Class<?> getParameterSource() {\n        // Hmmh. For now, assume it's the raw type\n        return _class;\n    }", "getErasedSignature": "\n    public StringBuilder getErasedSignature(StringBuilder sb) {\n        return _classSignature(_class, sb, true);\n    }", "getGenericSignature": "\n    public StringBuilder getGenericSignature(StringBuilder sb)\n    {\n        _classSignature(_class, sb, false);\n        sb.append('<');\n        sb = _referencedType.getGenericSignature(sb);\n        sb.append(';');\n        return sb;\n    }", "toString": "\n    public String toString()\n    {\n        return new StringBuilder(40)\n            .append(\"[reference type, class \")\n            .append(buildCanonicalName())\n            .append('<')\n            .append(_referencedType)\n            .append('>')\n            .append(']')\n            .toString();\n    }", "equals": "\n    public boolean equals(Object o)\n    {\n        if (o == this) return true;\n        if (o == null) return false;\n        if (o.getClass() != getClass()) return false;\n\n        ReferenceType other = (ReferenceType) o;\n\n        if (other._class != _class) return false;\n        \n        // Otherwise actually mostly worry about referenced type\n        return _referencedType.equals(other._referencedType);\n    }"}