{"rename": "\n    public BeanPropertyWriter rename(NameTransformer transformer) {\n        String newName = transformer.transform(_name.getValue());\n        if (newName.equals(_name.toString())) {\n            return this;\n        }\n        return new BeanPropertyWriter(this, new SerializedString(newName));\n    }", "assignSerializer": "\n    public void assignSerializer(JsonSerializer<Object> ser)\n    {\n        // may need to disable check in future?\n        if (_serializer != null && _serializer != ser) {\n            throw new IllegalStateException(\"Can not override serializer\");\n        }\n        _serializer = ser;\n    }", "assignNullSerializer": "\n    public void assignNullSerializer(JsonSerializer<Object> nullSer)\n    {\n        // may need to disable check in future?\n        if (_nullSerializer != null && _nullSerializer != nullSer) {\n            throw new IllegalStateException(\"Can not override null serializer\");\n        }\n        _nullSerializer = nullSer;\n    }", "unwrappingWriter": "\n    public BeanPropertyWriter unwrappingWriter(NameTransformer unwrapper) {\n        return new UnwrappingBeanPropertyWriter(this, unwrapper);\n    }", "setNonTrivialBaseType": "\n    public void setNonTrivialBaseType(JavaType t) {\n        _nonTrivialBaseType = t;\n    }", "getName": "\n    public String getName() {\n        return _name.getValue();\n    }", "getType": "\n    public JavaType getType() {\n        return _declaredType;\n    }", "getWrapperName": "\n    public PropertyName getWrapperName() {\n        return _wrapperName;\n    }", "isRequired": "\n    public boolean isRequired() {\n        return _isRequired;\n    }", "getAnnotation": "\n    public <A extends Annotation> A getAnnotation(Class<A> acls) {\n        return _member.getAnnotation(acls);\n    }", "getContextAnnotation": "\n    public <A extends Annotation> A getContextAnnotation(Class<A> acls) {\n        return _contextAnnotations.get(acls);\n    }", "getMember": "\n    public AnnotatedMember getMember() {\n        return _member;\n    }", "depositSchemaProperty": "\n    public void depositSchemaProperty(JsonObjectFormatVisitor objectVisitor)\n        throws JsonMappingException\n    {\n        if (objectVisitor != null) {\n            if (isRequired()) {\n                objectVisitor.property(this); \n            } else {\n                objectVisitor.optionalProperty(this);\n            }\n        }\n    }", "getInternalSetting": "\n    public Object getInternalSetting(Object key)\n    {\n        if (_internalSettings == null) {\n            return null;\n        }\n        return _internalSettings.get(key);\n    }", "setInternalSetting": "\n    public Object setInternalSetting(Object key, Object value)\n    {\n        if (_internalSettings == null) {\n            _internalSettings = new HashMap<Object,Object>();\n        }\n        return _internalSettings.put(key, value);\n    }", "removeInternalSetting": "\n    public Object removeInternalSetting(Object key)\n    {\n        Object removed = null;\n        if (_internalSettings != null) {\n            removed = _internalSettings.remove(key);\n            // to reduce memory usage, let's also drop the Map itself, if empty\n            if (_internalSettings.size() == 0) {\n                _internalSettings = null;\n            }\n        }\n        return removed;\n    }", "getSerializedName": "\n    public SerializedString getSerializedName() { return _name; }", "hasSerializer": "\n    public boolean hasSerializer() { return _serializer != null; }", "hasNullSerializer": "\n    public boolean hasNullSerializer() { return _nullSerializer != null; }", "willSuppressNulls": "\n    public boolean willSuppressNulls() { return _suppressNulls; }", "getSerializer": "\n    public JsonSerializer<Object> getSerializer() {\n        return _serializer;\n    }", "getSerializationType": "\n    public JavaType getSerializationType() {\n        return _cfgSerializationType;\n    }", "getRawSerializationType": "\n    public Class<?> getRawSerializationType() {\n        return (_cfgSerializationType == null) ? null : _cfgSerializationType.getRawClass();\n    }", "getPropertyType": "\n    public Class<?> getPropertyType() \n    {\n        if (_accessorMethod != null) {\n            return _accessorMethod.getReturnType();\n        }\n        return _field.getType();\n    }", "getGenericPropertyType": "\n    public Type getGenericPropertyType()\n    {\n        if (_accessorMethod != null) {\n            return _accessorMethod.getGenericReturnType();\n        }\n        return _field.getGenericType();\n    }", "getViews": "\n    public Class<?>[] getViews() { return _includeInViews; }", "serializeAsField": "\n    public void serializeAsField(Object bean, JsonGenerator jgen, SerializerProvider prov)\n        throws Exception\n    {\n        Object value = get(bean);\n        // Null handling is bit different, check that first\n        if (value == null) {\n            if (_nullSerializer != null) {\n                jgen.writeFieldName(_name);\n                _nullSerializer.serialize(null, jgen, prov);\n            }\n            return;\n        }\n        // then find serializer to use\n        JsonSerializer<Object> ser = _serializer;\n        if (ser == null) {\n            Class<?> cls = value.getClass();\n            PropertySerializerMap map = _dynamicSerializers;\n            ser = map.serializerFor(cls);\n            if (ser == null) {\n                ser = _findAndAddDynamic(map, cls, prov);\n            }\n        }\n        // and then see if we must suppress certain values (default, empty)\n        if (_suppressableValue != null) {\n            if (MARKER_FOR_EMPTY == _suppressableValue) {\n                if (ser.isEmpty(value)) {\n                    return;\n                }\n            } else if (_suppressableValue.equals(value)) {\n                return;\n            }\n        }\n        // For non-nulls: simple check for direct cycles\n        if (value == bean) {\n            _handleSelfReference(bean, ser);\n        }\n        jgen.writeFieldName(_name);\n        if (_typeSerializer == null) {\n            ser.serialize(value, jgen, prov);\n        } else {\n            ser.serializeWithType(value, jgen, prov, _typeSerializer);\n        }\n    }", "serializeAsColumn": "\n    public void serializeAsColumn(Object bean, JsonGenerator jgen, SerializerProvider prov)\n        throws Exception\n    {\n        Object value = get(bean);\n        if (value == null) { // nulls need specialized handling\n            if (_nullSerializer != null) {\n                _nullSerializer.serialize(null, jgen, prov);\n            } else { // can NOT suppress entries in tabular output\n                jgen.writeNull();\n            }\n        }\n        // otherwise find serializer to use\n        JsonSerializer<Object> ser = _serializer;\n        if (ser == null) {\n            Class<?> cls = value.getClass();\n            PropertySerializerMap map = _dynamicSerializers;\n            ser = map.serializerFor(cls);\n            if (ser == null) {\n                ser = _findAndAddDynamic(map, cls, prov);\n            }\n        }\n        // and then see if we must suppress certain values (default, empty)\n        if (_suppressableValue != null) {\n            if (MARKER_FOR_EMPTY == _suppressableValue) {\n                if (ser.isEmpty(value)) { // can NOT suppress entries in tabular output\n                    serializeAsPlaceholder(bean, jgen, prov);\n                    return;\n                }\n            } else if (_suppressableValue.equals(value)) { // can NOT suppress entries in tabular output\n                serializeAsPlaceholder(bean, jgen, prov);\n                return;\n            }\n        }\n        // For non-nulls: simple check for direct cycles\n        if (value == bean) {\n            _handleSelfReference(bean, ser);\n        }\n        if (_typeSerializer == null) {\n            ser.serialize(value, jgen, prov);\n        } else {\n            ser.serializeWithType(value, jgen, prov, _typeSerializer);\n        }\n    }", "serializeAsPlaceholder": "\n    public void serializeAsPlaceholder(Object bean, JsonGenerator jgen, SerializerProvider prov)\n        throws Exception\n    {\n        if (_nullSerializer != null) {\n            _nullSerializer.serialize(null, jgen, prov);\n        } else {\n            jgen.writeNull();\n        }\n    }", "_findAndAddDynamic": "\n    protected JsonSerializer<Object> _findAndAddDynamic(PropertySerializerMap map,\n            Class<?> type, SerializerProvider provider) throws JsonMappingException\n    {\n        PropertySerializerMap.SerializerAndMapResult result;\n        if (_nonTrivialBaseType != null) {\n            JavaType t = provider.constructSpecializedType(_nonTrivialBaseType, type);\n            result = map.findAndAddSerializer(t, provider, this);\n        } else {\n            result = map.findAndAddSerializer(type, provider, this);\n        }\n        // did we get a new map of serializers? If so, start using it\n        if (map != result.map) {\n            _dynamicSerializers = result.map;\n        }\n        return result.serializer;\n    }", "get": "\n    public final Object get(Object bean) throws Exception\n    {\n        if (_accessorMethod != null) {\n            return _accessorMethod.invoke(bean);\n        }\n        return _field.get(bean);\n    }", "_handleSelfReference": "\n    protected void _handleSelfReference(Object bean, JsonSerializer<?> ser)\n        throws JsonMappingException\n    {\n        /* 05-Feb-2012, tatu: Usually a problem, but NOT if we are handling\n         *    object id; this may be the case for BeanSerializers at least.\n         */\n        if (ser.usesObjectId()) {\n            return;\n        }\n        throw new JsonMappingException(\"Direct self-reference leading to cycle\");\n    }", "toString": "\n    public String toString()\n    {\n        StringBuilder sb = new StringBuilder(40);\n        sb.append(\"property '\").append(getName()).append(\"' (\");\n        if (_accessorMethod != null) {\n            sb.append(\"via method \").append(_accessorMethod.getDeclaringClass().getName()).append(\"#\").append(_accessorMethod.getName());\n        } else {\n            sb.append(\"field \\\"\").append(_field.getDeclaringClass().getName()).append(\"#\").append(_field.getName());\n        }\n        if (_serializer == null) {\n            sb.append(\", no static serializer\");\n        } else {\n            sb.append(\", static serializer of type \"+_serializer.getClass().getName());\n        }\n        sb.append(')');\n        return sb.toString();\n    }"}