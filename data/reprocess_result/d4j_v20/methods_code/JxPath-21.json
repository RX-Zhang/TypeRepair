{"getPropertyIndex": "\n    public int getPropertyIndex() {\n        return propertyIndex;\n    }", "setPropertyIndex": "\n    public void setPropertyIndex(int index) {\n        if (propertyIndex != index) {\n            propertyIndex = index;\n            setIndex(WHOLE_COLLECTION);\n        }\n    }", "getBean": "\n    public Object getBean() {\n        if (bean == null) {\n            bean = getImmediateParentPointer().getNode();\n        }\n        return bean;\n    }", "getName": "\n    public QName getName() {\n        return new QName(null, getPropertyName());\n    }", "getPropertyName": "\n    public abstract String getPropertyName();\n\n    /**\n     * Set the property name.\n     * @param propertyName property name to set.\n     */\n    public abstract void setPropertyName(String propertyName);\n\n    /**\n     * Count the number of properties represented.\n     * @return int\n     */\n    public abstract int getPropertyCount();\n\n    /**\n     * Get the names of the included properties.\n     * @return String[]\n     */\n    public abstract String[] getPropertyNames();\n\n    /**\n     * Learn whether this pointer references an actual property.\n     * @return true if actual\n     */\n    protected abstract boolean isActualProperty();\n\n    public boolean isActual() {\n        if (!isActualProperty()) {\n            return false;\n        }\n\n        return super.isActual();\n    }", "setPropertyName": "\n    public abstract void setPropertyName(String propertyName);\n\n    /**\n     * Count the number of properties represented.\n     * @return int\n     */\n    public abstract int getPropertyCount();\n\n    /**\n     * Get the names of the included properties.\n     * @return String[]\n     */\n    public abstract String[] getPropertyNames();\n\n    /**\n     * Learn whether this pointer references an actual property.\n     * @return true if actual\n     */\n    protected abstract boolean isActualProperty();\n\n    public boolean isActual() {\n        if (!isActualProperty()) {\n            return false;\n        }\n\n        return super.isActual();\n    }", "getPropertyCount": "\n    public abstract int getPropertyCount();\n\n    /**\n     * Get the names of the included properties.\n     * @return String[]\n     */\n    public abstract String[] getPropertyNames();\n\n    /**\n     * Learn whether this pointer references an actual property.\n     * @return true if actual\n     */\n    protected abstract boolean isActualProperty();\n\n    public boolean isActual() {\n        if (!isActualProperty()) {\n            return false;\n        }\n\n        return super.isActual();\n    }", "getPropertyNames": "\n    public abstract String[] getPropertyNames();\n\n    /**\n     * Learn whether this pointer references an actual property.\n     * @return true if actual\n     */\n    protected abstract boolean isActualProperty();\n\n    public boolean isActual() {\n        if (!isActualProperty()) {\n            return false;\n        }\n\n        return super.isActual();\n    }", "isActualProperty": "\n    protected abstract boolean isActualProperty();\n\n    public boolean isActual() {\n        if (!isActualProperty()) {\n            return false;\n        }\n\n        return super.isActual();\n    }", "isActual": "\n    public boolean isActual() {\n        if (!isActualProperty()) {\n            return false;\n        }\n\n        return super.isActual();\n    }", "getImmediateNode": "\n    public Object getImmediateNode() {\n        if (value == UNINITIALIZED) {\n            value = index == WHOLE_COLLECTION ? ValueUtils.getValue(getBaseValue())\n                    : ValueUtils.getValue(getBaseValue(), index);\n        }\n        return value;\n    }", "isCollection": "\n    public boolean isCollection() {\n        Object value = getBaseValue();\n        return value != null && ValueUtils.isCollection(value);\n    }", "isLeaf": "\n    public boolean isLeaf() {\n        Object value = getNode();\n        return value == null || JXPathIntrospector.getBeanInfo(value.getClass()).isAtomic();\n    }", "getLength": "\n    public int getLength() {\n        return ValueUtils.getLength(getBaseValue());\n    }", "getImmediateValuePointer": "\n    public NodePointer getImmediateValuePointer() {\n        return NodePointer.newChildNodePointer(\n            (NodePointer) this.clone(),\n            getName(),\n            getImmediateNode());\n    }", "createPath": "\n    public NodePointer createPath(JXPathContext context) {\n        if (getImmediateNode() == null) {\n            AbstractFactory factory = getAbstractFactory(context);\n            int inx = (index == WHOLE_COLLECTION ? 0 : index);\n            boolean success =\n                factory.createObject(\n                    context,\n                    this,\n                    getBean(),\n                    getPropertyName(),\n                    inx);\n            if (!success) {\n                throw new JXPathAbstractFactoryException(\"Factory \" + factory\n                        + \" could not create an object for path: \" + asPath());\n            }\n        }\n        return this;\n    }", "createChild": "\n    public NodePointer createChild(\n        JXPathContext context,\n        QName name,\n        int index,\n        Object value) {\n        PropertyPointer prop = (PropertyPointer) clone();\n        if (name != null) {\n            prop.setPropertyName(name.toString());\n        }\n        prop.setIndex(index);\n        return prop.createPath(context, value);\n    }", "hashCode": "\n    public int hashCode() {\n        return getImmediateParentPointer().hashCode() + propertyIndex + index;\n    }", "equals": "\n    public boolean equals(Object object) {\n        if (object == this) {\n            return true;\n        }\n\n        if (!(object instanceof PropertyPointer)) {\n            return false;\n        }\n\n        PropertyPointer other = (PropertyPointer) object;\n        if (parent != other.parent && (parent == null || !parent.equals(other.parent))) {\n            return false;\n        }\n\n        if (getPropertyIndex() != other.getPropertyIndex()\n            || !getPropertyName().equals(other.getPropertyName())) {\n            return false;\n        }\n\n        int iThis = (index == WHOLE_COLLECTION ? 0 : index);\n        int iOther = (other.index == WHOLE_COLLECTION ? 0 : other.index);\n        return iThis == iOther;\n    }", "compareChildNodePointers": "\n    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) {\n        return getValuePointer().compareChildNodePointers(pointer1, pointer2);\n    }"}