{"writeAsId": "\n    public boolean writeAsId(JsonGenerator gen, SerializerProvider provider, ObjectIdWriter w) throws IOException\n    {\n        if ((id != null) && (idWritten || w.alwaysAsId)) {\n            // 03-Aug-2013, tatu: Prefer Native Object Ids if available\n            if (gen.canWriteObjectId()) {\n                gen.writeObjectRef(String.valueOf(id));\n            } else {\n                w.serializer.serialize(id, gen, provider);\n            }\n            return true;\n        }\n        return false;\n    }", "generateId": "\n    public Object generateId(Object forPojo) {\n        // 04-Jun-2016, tatu: As per [databind#1255], need to consider possibility of\n        //    id being generated for \"alwaysAsId\", but not being written as POJO; regardless,\n        //    need to use existing id if there is one:\n            id = generator.generateId(forPojo);\n        return id;\n    }", "writeAsField": "\n    public void writeAsField(JsonGenerator gen, SerializerProvider provider,\n            ObjectIdWriter w) throws IOException\n    {\n        idWritten = true;\n\n        // 03-Aug-2013, tatu: Prefer Native Object Ids if available\n        if (gen.canWriteObjectId()) {\n            // Need to assume String(ified) ids, for now... could add 'long' variant?\n            gen.writeObjectId(String.valueOf(id));\n            return;\n        }\n        \n        SerializableString name = w.propertyName;\n        if (name != null) {\n            gen.writeFieldName(name);\n            w.serializer.serialize(id, gen, provider);\n        }\n    }"}