{"doubleMetaphone": "\n    public String doubleMetaphone(String value) {\n        return doubleMetaphone(value, false);\n    }", "encode": "\n    public Object encode(Object obj) throws EncoderException {\n        if (!(obj instanceof String)) {\n            throw new EncoderException(\"DoubleMetaphone encode parameter is not of type String\"); \n        } \n        return doubleMetaphone((String) obj);\n    }", "isDoubleMetaphoneEqual": "\n    public boolean isDoubleMetaphoneEqual(String value1, String value2) {\n        return isDoubleMetaphoneEqual(value1, value2, false);\n    }", "getMaxCodeLen": "\n    public int getMaxCodeLen() {\n        return this.maxCodeLen;\n    }", "setMaxCodeLen": "\n    public void setMaxCodeLen(int maxCodeLen) {\n        this.maxCodeLen = maxCodeLen;\n    }", "handleAEIOUY": "\n    private int handleAEIOUY(String value, DoubleMetaphoneResult result, int \n                             index) {\n        if (index == 0) {\n            result.append('A');\n        }\n        return index + 1;\n    }", "handleC": "\n    private int handleC(String value, \n                        DoubleMetaphoneResult result, \n                        int index) {\n        if (conditionC0(value, index)) {  // very confusing, moved out\n            result.append('K');\n            index += 2;\n        } else if (index == 0 && contains(value, index, 6, \"CAESAR\")) {\n            result.append('S');\n            index += 2;\n        } else if (contains(value, index, 2, \"CH\")) {\n            index = handleCH(value, result, index);\n        } else if (contains(value, index, 2, \"CZ\") && \n                   !contains(value, index - 2, 4, \"WICZ\")) {\n            //-- \"Czerny\" --//\n            result.append('S', 'X');\n            index += 2;\n        } else if (contains(value, index + 1, 3, \"CIA\")) {\n            //-- \"focaccia\" --//\n            result.append('X');\n            index += 3;\n        } else if (contains(value, index, 2, \"CC\") && \n                   !(index == 1 && charAt(value, 0) == 'M')) {\n            //-- double \"cc\" but not \"McClelland\" --//\n            return handleCC(value, result, index);\n        } else if (contains(value, index, 2, \"CK\", \"CG\", \"CQ\")) {\n            result.append('K');\n            index += 2;\n        } else if (contains(value, index, 2, \"CI\", \"CE\", \"CY\")) {\n            //-- Italian vs. English --//\n            if (contains(value, index, 3, \"CIO\", \"CIE\", \"CIA\")) {\n                result.append('S', 'X');\n            } else {\n                result.append('S');\n            }\n            index += 2;\n        } else {\n            result.append('K');\n            if (contains(value, index + 1, 2, \" C\", \" Q\", \" G\")) { \n                //-- Mac Caffrey, Mac Gregor --//\n                index += 3;\n            } else if (contains(value, index + 1, 1, \"C\", \"K\", \"Q\") && \n                       !contains(value, index + 1, 2, \"CE\", \"CI\")) {\n                index += 2;\n            } else {\n                index++;\n            }\n        }\n        \n        return index;\n    }", "handleCC": "\n    private int handleCC(String value, \n                         DoubleMetaphoneResult result, \n                         int index) {\n        if (contains(value, index + 2, 1, \"I\", \"E\", \"H\") && \n            !contains(value, index + 2, 2, \"HU\")) {\n            //-- \"bellocchio\" but not \"bacchus\" --//\n            if ((index == 1 && charAt(value, index - 1) == 'A') || \n                contains(value, index - 1, 5, \"UCCEE\", \"UCCES\")) {\n                //-- \"accident\", \"accede\", \"succeed\" --//\n                result.append(\"KS\");\n            } else {\n                //-- \"bacci\", \"bertucci\", other Italian --//\n                result.append('X');\n            }\n            index += 3;\n        } else {    // Pierce's rule\n            result.append('K');\n            index += 2;\n        }\n        \n        return index;\n    }", "handleCH": "\n    private int handleCH(String value, \n                         DoubleMetaphoneResult result, \n                         int index) {\n        if (index > 0 && contains(value, index, 4, \"CHAE\")) {   // Michael\n            result.append('K', 'X');\n            return index + 2;\n        } else if (conditionCH0(value, index)) {\n            //-- Greek roots (\"chemistry\", \"chorus\", etc.) --//\n            result.append('K');\n            return index + 2;\n        } else if (conditionCH1(value, index)) {\n            //-- Germanic, Greek, or otherwise 'ch' for 'kh' sound --//\n            result.append('K');\n            return index + 2;\n        } else {\n            if (index > 0) {\n                if (contains(value, 0, 2, \"MC\")) {\n                    result.append('K');\n                } else {\n                    result.append('X', 'K');\n                }\n            } else {\n                result.append('X');\n            }\n            return index + 2;\n        }\n    }", "handleD": "\n    private int handleD(String value, \n                        DoubleMetaphoneResult result, \n                        int index) {\n        if (contains(value, index, 2, \"DG\")) {\n            //-- \"Edge\" --//\n            if (contains(value, index + 2, 1, \"I\", \"E\", \"Y\")) {\n                result.append('J');\n                index += 3;\n                //-- \"Edgar\" --//\n            } else {\n                result.append(\"TK\");\n                index += 2;\n            }\n        } else if (contains(value, index, 2, \"DT\", \"DD\")) {\n            result.append('T');\n            index += 2;\n        } else {\n            result.append('T');\n            index++;\n        }\n        return index;\n    }", "handleG": "\n    private int handleG(String value, \n                        DoubleMetaphoneResult result, \n                        int index, \n                        boolean slavoGermanic) {\n        if (charAt(value, index + 1) == 'H') {\n            index = handleGH(value, result, index);\n        } else if (charAt(value, index + 1) == 'N') {\n            if (index == 1 && isVowel(charAt(value, 0)) && !slavoGermanic) {\n                result.append(\"KN\", \"N\");\n            } else if (!contains(value, index + 2, 2, \"EY\") && \n                       charAt(value, index + 1) != 'Y' && !slavoGermanic) {\n                result.append(\"N\", \"KN\");\n            } else {\n                result.append(\"KN\");\n            }\n            index = index + 2;\n        } else if (contains(value, index + 1, 2, \"LI\") && !slavoGermanic) {\n            result.append(\"KL\", \"L\");\n            index += 2;\n        } else if (index == 0 && (charAt(value, index + 1) == 'Y' || contains(value, index + 1, 2, ES_EP_EB_EL_EY_IB_IL_IN_IE_EI_ER))) {\n            //-- -ges-, -gep-, -gel-, -gie- at beginning --//\n            result.append('K', 'J');\n            index += 2;\n        } else if ((contains(value, index + 1, 2, \"ER\") || \n                    charAt(value, index + 1) == 'Y') &&\n                   !contains(value, 0, 6, \"DANGER\", \"RANGER\", \"MANGER\") &&\n                   !contains(value, index - 1, 1, \"E\", \"I\") && \n                   !contains(value, index - 1, 3, \"RGY\", \"OGY\")) {\n            //-- -ger-, -gy- --//\n            result.append('K', 'J');\n            index += 2;\n        } else if (contains(value, index + 1, 1, \"E\", \"I\", \"Y\") || \n                   contains(value, index - 1, 4, \"AGGI\", \"OGGI\")) {\n            //-- Italian \"biaggi\" --//\n            if ((contains(value, 0 ,4, \"VAN \", \"VON \") || contains(value, 0, 3, \"SCH\")) || contains(value, index + 1, 2, \"ET\")) {\n                //-- obvious germanic --//\n                result.append('K');\n            } else if (contains(value, index + 1, 4, \"IER\")) {\n                result.append('J');\n            } else {\n                result.append('J', 'K');\n            }\n            index += 2;\n        } else if (charAt(value, index + 1) == 'G') {\n            index += 2;\n            result.append('K');\n        } else {\n            index++;\n            result.append('K');\n        }\n        return index;\n    }", "handleGH": "\n    private int handleGH(String value, \n                         DoubleMetaphoneResult result, \n                         int index) {\n        if (index > 0 && !isVowel(charAt(value, index - 1))) {\n            result.append('K');\n            index += 2;\n        } else if (index == 0) {\n            if (charAt(value, index + 2) == 'I') {\n                result.append('J');\n            } else {\n                result.append('K');\n            }\n            index += 2;\n        } else if ((index > 1 && contains(value, index - 2, 1, \"B\", \"H\", \"D\")) ||\n                   (index > 2 && contains(value, index - 3, 1, \"B\", \"H\", \"D\")) ||\n                   (index > 3 && contains(value, index - 4, 1, \"B\", \"H\"))) {\n            //-- Parker's rule (with some further refinements) - \"hugh\"\n            index += 2;\n        } else {\n            if (index > 2 && charAt(value, index - 1) == 'U' && \n                contains(value, index - 3, 1, \"C\", \"G\", \"L\", \"R\", \"T\")) {\n                //-- \"laugh\", \"McLaughlin\", \"cough\", \"gough\", \"rough\", \"tough\"\n                result.append('F');\n            } else if (index > 0 && charAt(value, index - 1) != 'I') {\n                result.append('K');\n            }\n            index += 2;\n        }\n        return index;\n    }", "handleH": "\n    private int handleH(String value, \n                        DoubleMetaphoneResult result, \n                        int index) {\n        //-- only keep if first & before vowel or between 2 vowels --//\n        if ((index == 0 || isVowel(charAt(value, index - 1))) && \n            isVowel(charAt(value, index + 1))) {\n            result.append('H');\n            index += 2;\n            //-- also takes car of \"HH\" --//\n        } else {\n            index++;\n        }\n        return index;\n    }", "handleJ": "\n    private int handleJ(String value, DoubleMetaphoneResult result, int index, \n                        boolean slavoGermanic) {\n        if (contains(value, index, 4, \"JOSE\") || contains(value, 0, 4, \"SAN \")) {\n                //-- obvious Spanish, \"Jose\", \"San Jacinto\" --//\n                if ((index == 0 && (charAt(value, index + 4) == ' ') || \n                     value.length() == 4) || contains(value, 0, 4, \"SAN \")) {\n                    result.append('H');\n                } else {\n                    result.append('J', 'H');\n                }\n                index++;\n            } else {\n                if (index == 0 && !contains(value, index, 4, \"JOSE\")) {\n                    result.append('J', 'A');\n                } else if (isVowel(charAt(value, index - 1)) && !slavoGermanic && \n                              (charAt(value, index + 1) == 'A' || charAt(value, index + 1) == 'O')) {\n                    result.append('J', 'H');\n                } else if (index == value.length() - 1) {\n                    result.append('J', ' ');\n                } else if (!contains(value, index + 1, 1, L_T_K_S_N_M_B_Z) && !contains(value, index - 1, 1, \"S\", \"K\", \"L\")) {\n                    result.append('J');\n                }\n\n                if (charAt(value, index + 1) == 'J') {\n                    index += 2;\n                } else {\n                    index++;\n                }\n            }\n        return index;\n    }", "handleL": "\n    private int handleL(String value, \n                        DoubleMetaphoneResult result, \n                        int index) {\n        if (charAt(value, index + 1) == 'L') {\n            if (conditionL0(value, index)) {\n                result.appendPrimary('L');\n            } else {\n                result.append('L');\n            }\n            index += 2;\n        } else {\n            index++;\n            result.append('L');\n        }\n        return index;\n    }", "handleP": "\n    private int handleP(String value, \n                        DoubleMetaphoneResult result, \n                        int index) {\n        if (charAt(value, index + 1) == 'H') {\n            result.append('F');\n            index += 2;\n        } else {\n            result.append('P');\n            index = contains(value, index + 1, 1, \"P\", \"B\") ? index + 2 : index + 1;\n        }\n        return index;\n    }", "handleR": "\n    private int handleR(String value, \n                        DoubleMetaphoneResult result, \n                        int index, \n                        boolean slavoGermanic) {\n        if (index == value.length() - 1 && !slavoGermanic && \n            contains(value, index - 2, 2, \"IE\") && \n            !contains(value, index - 4, 2, \"ME\", \"MA\")) {\n            result.appendAlternate('R');\n        } else {\n            result.append('R');\n        }\n        return charAt(value, index + 1) == 'R' ? index + 2 : index + 1;\n    }", "handleS": "\n    private int handleS(String value, \n                        DoubleMetaphoneResult result, \n                        int index, \n                        boolean slavoGermanic) {\n        if (contains(value, index - 1, 3, \"ISL\", \"YSL\")) {\n            //-- special cases \"island\", \"isle\", \"carlisle\", \"carlysle\" --//\n            index++;\n        } else if (index == 0 && contains(value, index, 5, \"SUGAR\")) {\n            //-- special case \"sugar-\" --//\n            result.append('X', 'S');\n            index++;\n        } else if (contains(value, index, 2, \"SH\")) {\n            if (contains(value, index + 1, 4, \n                         \"HEIM\", \"HOEK\", \"HOLM\", \"HOLZ\")) {\n                //-- germanic --//\n                result.append('S');\n            } else {\n                result.append('X');\n            }\n            index += 2;\n        } else if (contains(value, index, 3, \"SIO\", \"SIA\") || contains(value, index, 4, \"SIAN\")) {\n            //-- Italian and Armenian --//\n            if (slavoGermanic) {\n                result.append('S');\n            } else {\n                result.append('S', 'X');\n            }\n            index += 3;\n        } else if ((index == 0 && contains(value, index + 1, 1, \"M\", \"N\", \"L\", \"W\")) || contains(value, index + 1, 1, \"Z\")) {\n            //-- german & anglicisations, e.g. \"smith\" match \"schmidt\" //\n            // \"snider\" match \"schneider\" --//\n            //-- also, -sz- in slavic language altho in hungarian it //\n            //   is pronounced \"s\" --//\n            result.append('S', 'X');\n            index = contains(value, index + 1, 1, \"Z\") ? index + 2 : index + 1;\n        } else if (contains(value, index, 2, \"SC\")) {\n            index = handleSC(value, result, index);\n        } else {\n            if (index == value.length() - 1 && contains(value, index - 2, \n                                                        2, \"AI\", \"OI\")){\n                //-- french e.g. \"resnais\", \"artois\" --//\n                result.appendAlternate('S');\n            } else {\n                result.append('S');\n            }\n            index = contains(value, index + 1, 1, \"S\", \"Z\") ? index + 2 : index + 1;\n        }\n        return index;\n    }", "handleSC": "\n    private int handleSC(String value, \n                         DoubleMetaphoneResult result, \n                         int index) {\n        if (charAt(value, index + 2) == 'H') {\n            //-- Schlesinger's rule --//\n            if (contains(value, index + 3, \n                         2, \"OO\", \"ER\", \"EN\", \"UY\", \"ED\", \"EM\")) {\n                //-- Dutch origin, e.g. \"school\", \"schooner\" --//\n                if (contains(value, index + 3, 2, \"ER\", \"EN\")) {\n                    //-- \"schermerhorn\", \"schenker\" --//\n                    result.append(\"X\", \"SK\");\n                } else {\n                    result.append(\"SK\");\n                }\n            } else {\n                if (index == 0 && !isVowel(charAt(value, 3)) && charAt(value, 3) != 'W') {\n                    result.append('X', 'S');\n                } else {\n                    result.append('X');\n                }\n            }\n        } else if (contains(value, index + 2, 1, \"I\", \"E\", \"Y\")) {\n            result.append('S');\n        } else {\n            result.append(\"SK\");\n        }\n        return index + 3;\n    }", "handleT": "\n    private int handleT(String value, \n                        DoubleMetaphoneResult result, \n                        int index) {\n        if (contains(value, index, 4, \"TION\")) {\n            result.append('X');\n            index += 3;\n        } else if (contains(value, index, 3, \"TIA\", \"TCH\")) {\n            result.append('X');\n            index += 3;\n        } else if (contains(value, index, 2, \"TH\") || contains(value, index, \n                                                               3, \"TTH\")) {\n            if (contains(value, index + 2, 2, \"OM\", \"AM\") || \n                //-- special case \"thomas\", \"thames\" or germanic --//\n                contains(value, 0, 4, \"VAN \", \"VON \") || \n                contains(value, 0, 3, \"SCH\")) {\n                result.append('T');\n            } else {\n                result.append('0', 'T');\n            }\n            index += 2;\n        } else {\n            result.append('T');\n            index = contains(value, index + 1, 1, \"T\", \"D\") ? index + 2 : index + 1;\n        }\n        return index;\n    }", "handleW": "\n    private int handleW(String value, \n                        DoubleMetaphoneResult result, \n                        int index) {\n        if (contains(value, index, 2, \"WR\")) {\n            //-- can also be in middle of word --//\n            result.append('R');\n            index += 2;\n        } else {\n            if (index == 0 && (isVowel(charAt(value, index + 1)) || \n                               contains(value, index, 2, \"WH\"))) {\n                if (isVowel(charAt(value, index + 1))) {\n                    //-- Wasserman should match Vasserman --//\n                    result.append('A', 'F');\n                } else {\n                    //-- need Uomo to match Womo --//\n                    result.append('A');\n                }\n                index++;\n            } else if ((index == value.length() - 1 && isVowel(charAt(value, index - 1))) ||\n                       contains(value, index - 1, \n                                5, \"EWSKI\", \"EWSKY\", \"OWSKI\", \"OWSKY\") ||\n                       contains(value, 0, 3, \"SCH\")) {\n                //-- Arnow should match Arnoff --//\n                result.appendAlternate('F');\n                index++;\n            } else if (contains(value, index, 4, \"WICZ\", \"WITZ\")) {\n                //-- Polish e.g. \"filipowicz\" --//\n                result.append(\"TS\", \"FX\");\n                index += 4;\n            } else {\n                index++;\n            }\n        }\n        return index;\n    }", "handleX": "\n    private int handleX(String value, \n                        DoubleMetaphoneResult result, \n                        int index) {\n        if (index == 0) {\n            result.append('S');\n            index++;\n        } else {\n            if (!((index == value.length() - 1) && \n                  (contains(value, index - 3, 3, \"IAU\", \"EAU\") || \n                   contains(value, index - 2, 2, \"AU\", \"OU\")))) {\n                //-- French e.g. breaux --//\n                result.append(\"KS\");\n            }\n            index = contains(value, index + 1, 1, \"C\", \"X\") ? index + 2 : index + 1;\n        }\n        return index;\n    }", "handleZ": "\n    private int handleZ(String value, DoubleMetaphoneResult result, int index, \n                        boolean slavoGermanic) {\n        if (charAt(value, index + 1) == 'H') {\n            //-- Chinese pinyin e.g. \"zhao\" or Angelina \"Zhang\" --//\n            result.append('J');\n            index += 2;\n        } else {\n            if (contains(value, index + 1, 2, \"ZO\", \"ZI\", \"ZA\") || (slavoGermanic && (index > 0 && charAt(value, index - 1) != 'T'))) {\n                result.append(\"S\", \"TS\");\n            } else {\n                result.append('S');\n            }\n            index = charAt(value, index + 1) == 'Z' ? index + 2 : index + 1;\n        }\n        return index;\n    }", "conditionC0": "\n    private boolean conditionC0(String value, int index) {\n        if (contains(value, index, 4, \"CHIA\")) {\n            return true;\n        } else if (index <= 1) {\n            return false;\n        } else if (isVowel(charAt(value, index - 2))) {\n            return false;\n        } else if (!contains(value, index - 1, 3, \"ACH\")) {\n            return false;\n        } else {\n            char c = charAt(value, index + 2);\n            return (c != 'I' && c != 'E') ||\n                    contains(value, index - 2, 6, \"BACHER\", \"MACHER\");\n        }\n    }", "conditionCH0": "\n    private boolean conditionCH0(String value, int index) {\n        if (index != 0) {\n            return false;\n        } else if (!contains(value, index + 1, 5, \"HARAC\", \"HARIS\") && \n                   !contains(value, index + 1, 3, \"HOR\", \"HYM\", \"HIA\", \"HEM\")) {\n            return false;\n        } else if (contains(value, 0, 5, \"CHORE\")) {\n            return false;\n        } else {\n            return true;\n        }\n    }", "conditionCH1": "\n    private boolean conditionCH1(String value, int index) {\n        return ((contains(value, 0, 4, \"VAN \", \"VON \") || contains(value, 0, \n                                                                   3, \"SCH\")) ||\n                contains(value, index - 2, 6, \"ORCHES\", \"ARCHIT\", \"ORCHID\") ||\n                contains(value, index + 2, 1, \"T\", \"S\") ||\n                ((contains(value, index - 1, 1, \"A\", \"O\", \"U\", \"E\") || index == 0) &&\n                 (contains(value, index + 2, 1, L_R_N_M_B_H_F_V_W_SPACE) || index + 1 == value.length() - 1)));\n    }", "conditionL0": "\n    private boolean conditionL0(String value, int index) {\n        if (index == value.length() - 3 && \n            contains(value, index - 1, 4, \"ILLO\", \"ILLA\", \"ALLE\")) {\n            return true;\n        } else if ((contains(value, value.length() - 2, 2, \"AS\", \"OS\") || \n                    contains(value, value.length() - 1, 1, \"A\", \"O\")) &&\n                   contains(value, index - 1, 4, \"ALLE\")) {\n            return true;\n        } else {\n            return false;\n        }\n    }", "conditionM0": "\n    private boolean conditionM0(String value, int index) {\n        if (charAt(value, index + 1) == 'M') {\n            return true;\n        }\n        return contains(value, index - 1, 3, \"UMB\") &&\n                ((index + 1) == value.length() - 1 || contains(value,\n                        index + 2, 2, \"ER\"));\n    }", "isSlavoGermanic": "\n    private boolean isSlavoGermanic(String value) {\n        return value.indexOf('W') > -1 || value.indexOf('K') > -1 || \n            value.indexOf(\"CZ\") > -1 || value.indexOf(\"WITZ\") > -1;\n    }", "isVowel": "\n    private boolean isVowel(char ch) {\n        return VOWELS.indexOf(ch) != -1;\n    }", "isSilentStart": "\n    private boolean isSilentStart(String value) {\n        boolean result = false;\n        for (int i = 0; i < SILENT_START.length; i++) {\n            if (value.startsWith(SILENT_START[i])) {\n                result = true;\n                break;\n            }\n        }\n        return result;\n    }", "cleanInput": "\n    private String cleanInput(String input) {\n        if (input == null) {\n            return null;\n        }\n        input = input.trim();\n        if (input.length() == 0) {\n            return null;\n        }\n        return input.toUpperCase(java.util.Locale.ENGLISH);\n    }", "charAt": "\n    protected char charAt(String value, int index) {\n        if (index < 0 || index >= value.length()) {\n            return Character.MIN_VALUE;\n        } \n        return value.charAt(index);\n    }", "contains": "\n    private static boolean contains(String value, int start, int length, \n                                    String criteria) {\n        return contains(value, start, length, \n                        new String[] { criteria });\n    }", "append": "\n        public void append(char value) {\n            appendPrimary(value);\n            appendAlternate(value);\n        }", "appendPrimary": "\n        public void appendPrimary(char value) {\n            if (this.primary.length() < this.maxLength) {\n                this.primary.append(value);\n            }\n        }", "appendAlternate": "\n        public void appendAlternate(char value) {\n            if (this.alternate.length() < this.maxLength) {\n                this.alternate.append(value);\n            }\n        }", "getPrimary": "\n        public String getPrimary() {\n            return this.primary.toString();\n        }", "getAlternate": "\n        public String getAlternate() {\n            return this.alternate.toString();\n        }", "isComplete": "\n        public boolean isComplete() {\n            return this.primary.length() >= this.maxLength && \n                this.alternate.length() >= this.maxLength;\n        }"}