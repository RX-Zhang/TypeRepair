{"flatten": "\n    protected abstract String[] flatten(Options opts, String[] arguments, \n                                        boolean stopAtNonOption);\n\n    /**\n     * <p>Parses the specified <code>arguments</code> \n     * based on the specifed {@link Options}.</p>", "parse": "\n    public CommandLine parse(Options options, String[] arguments)\n                      throws ParseException\n    {\n        return parse(options, arguments, null, false);\n    }", "processProperties": "\n    private void processProperties(Properties properties)\n    {\n        if (properties == null)\n        {\n            return;\n        }\n\n        for (Enumeration e = properties.propertyNames(); e.hasMoreElements();)\n        {\n            String option = e.nextElement().toString();\n\n            if (!cmd.hasOption(option))\n            {\n                Option opt = options.getOption(option);\n\n                // get the value from the properties instance\n                String value = properties.getProperty(option);\n\n                if (opt.hasArg())\n                {\n                    if ((opt.getValues() == null)\n                        || (opt.getValues().length == 0))\n                    {\n                        try\n                        {\n                            opt.addValue(value);\n                        }\n                        catch (RuntimeException exp)\n                        {\n                            // if we cannot add the value don't worry about it\n                        }\n                    }\n                }\n                else if (!(\"yes\".equalsIgnoreCase(value) \n                           || \"true\".equalsIgnoreCase(value)\n                           || \"1\".equalsIgnoreCase(value)))\n                {\n                    // if the value is not yes, true or 1 then don't add the\n                    // option to the CommandLine\n                    break;\n                }\n\n                cmd.addOption(opt);\n            }\n        }\n    }", "checkRequiredOptions": "\n    private void checkRequiredOptions()\n        throws MissingOptionException\n    {\n        // if there are required options that have not been\n        // processsed\n        if (requiredOptions.size() > 0)\n        {\n            Iterator iter = requiredOptions.iterator();\n            StringBuffer buff = new StringBuffer();\n\n\n            // loop through the required options\n            while (iter.hasNext())\n            {\n                buff.append(iter.next());\n            }\n\n            throw new MissingOptionException(buff.toString());\n        }\n    }", "processArgs": "\n    public void processArgs(Option opt, ListIterator iter)\n        throws ParseException\n    {\n        // loop until an option is found\n        while (iter.hasNext())\n        {\n            String str = (String) iter.next();\n\n            // found an Option, not an argument\n            if (options.hasOption(str) && str.startsWith(\"-\"))\n            {\n                iter.previous();\n                break;\n            }\n\n            // found a value\n            try\n            {\n                opt.addValue( Util.stripLeadingAndTrailingQuotes(str) );\n            }\n            catch (RuntimeException exp)\n            {\n                iter.previous();\n                break;\n            }\n        }\n\n        if ((opt.getValues() == null) && !opt.hasOptionalArg())\n        {\n            throw new MissingArgumentException(\"Missing argument for option:\"\n                                               + opt.getKey());\n        }\n    }", "processOption": "\n    private void processOption(String arg, ListIterator iter)\n        throws ParseException\n    {\n        boolean hasOption = options.hasOption(arg);\n\n        // if there is no option throw an UnrecognisedOptionException\n        if (!hasOption)\n        {\n            throw new UnrecognizedOptionException(\"Unrecognized option: \" \n                                                  + arg);\n        }\n        \n        // get the option represented by arg\n        final Option opt = options.getOption(arg);\n\n        // if the option is a required option remove the option from\n        // the requiredOptions list\n        if (opt.isRequired())\n        {\n            requiredOptions.remove(opt.getKey());\n        }\n\n        // if the option is in an OptionGroup make that option the selected\n        // option of the group\n        if (options.getOptionGroup(opt) != null)\n        {\n            OptionGroup group = options.getOptionGroup(opt);\n\n            if (group.isRequired())\n            {\n                requiredOptions.remove(group);\n            }\n\n            group.setSelected(opt);\n        }\n\n        // if the option takes an argument value\n        if (opt.hasArg())\n        {\n            processArgs(opt, iter);\n        }\n\n\n        // set the option on the command line\n        cmd.addOption(opt);\n    }"}