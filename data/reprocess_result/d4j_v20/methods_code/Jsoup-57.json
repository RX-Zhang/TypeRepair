{"get": "\n    public String get(String key) {\n        Validate.notEmpty(key);\n\n        if (attributes == null)\n            return \"\";\n\n        Attribute attr = attributes.get(key);\n        return attr != null ? attr.getValue() : \"\";\n    }", "getIgnoreCase": "\n    public String getIgnoreCase(String key) {\n        Validate.notEmpty(key);\n        if (attributes == null)\n            return \"\";\n\n        for (String attrKey : attributes.keySet()) {\n            if (attrKey.equalsIgnoreCase(key))\n                return attributes.get(attrKey).getValue();\n        }\n        return \"\";\n    }", "put": "\n    public void put(String key, String value) {\n        Attribute attr = new Attribute(key, value);\n        put(attr);\n    }", "remove": "\n    public void remove(String key) {\n        Validate.notEmpty(key);\n        if (attributes == null)\n            return;\n        attributes.remove(key);\n    }", "removeIgnoreCase": "\n    public void removeIgnoreCase(String key) {\n        Validate.notEmpty(key);\n        if (attributes == null)\n            return;\n        for (Iterator<String> it = attributes.keySet().iterator(); it.hasNext(); ) {\n            String attrKey = it.next();\n            if (attrKey.equalsIgnoreCase(key))\n                attributes.remove(attrKey);\n        }\n    }", "hasKey": "\n    public boolean hasKey(String key) {\n        return attributes != null && attributes.containsKey(key);\n    }", "hasKeyIgnoreCase": "\n    public boolean hasKeyIgnoreCase(String key) {\n        if (attributes == null)\n            return false;\n        for (String attrKey : attributes.keySet()) {\n            if (attrKey.equalsIgnoreCase(key))\n                return true;\n        }\n        return false;\n    }", "size": "\n    public int size() {\n        if (attributes == null)\n            return 0;\n        return attributes.size();\n    }", "addAll": "\n    public void addAll(Attributes incoming) {\n        if (incoming.size() == 0)\n            return;\n        if (attributes == null)\n            attributes = new LinkedHashMap<String, Attribute>(incoming.size());\n        attributes.putAll(incoming.attributes);\n    }", "iterator": "\n    public Iterator<Attribute> iterator() {\n        if (attributes == null || attributes.isEmpty()) {\n            return Collections.<Attribute>emptyList().iterator();\n        }\n\n        return attributes.values().iterator();\n    }", "asList": "\n    public List<Attribute> asList() {\n        if (attributes == null)\n            return Collections.emptyList();\n\n        List<Attribute> list = new ArrayList<Attribute>(attributes.size());\n        for (Map.Entry<String, Attribute> entry : attributes.entrySet()) {\n            list.add(entry.getValue());\n        }\n        return Collections.unmodifiableList(list);\n    }", "dataset": "\n    public Map<String, String> dataset() {\n        return new Dataset();\n    }", "html": "\n    public String html() {\n        StringBuilder accum = new StringBuilder();\n        try {\n            html(accum, (new Document(\"\")).outputSettings()); // output settings a bit funky, but this html() seldom used\n        } catch (IOException e) { // ought never happen\n            throw new SerializationException(e);\n        }\n        return accum.toString();\n    }", "toString": "\n    public String toString() {\n        return html();\n    }", "equals": "\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (!(o instanceof Attributes)) return false;\n\n        Attributes that = (Attributes) o;\n\n        return !(attributes != null ? !attributes.equals(that.attributes) : that.attributes != null);\n    }", "hashCode": "\n    public int hashCode() {\n        return attributes != null ? attributes.hashCode() : 0;\n    }", "clone": "\n    public Attributes clone() {\n        if (attributes == null)\n            return new Attributes();\n\n        Attributes clone;\n        try {\n            clone = (Attributes) super.clone();\n        } catch (CloneNotSupportedException e) {\n            throw new RuntimeException(e);\n        }\n        clone.attributes = new LinkedHashMap<String, Attribute>(attributes.size());\n        for (Attribute attribute: this)\n            clone.attributes.put(attribute.getKey(), attribute.clone());\n        return clone;\n    }", "entrySet": "\n        public Set<Entry<String, String>> entrySet() {\n            return new EntrySet();\n        }", "hasNext": "\n            public boolean hasNext() {\n                while (attrIter.hasNext()) {\n                    attr = attrIter.next();\n                    if (attr.isDataAttribute()) return true;\n                }\n                return false;\n            }", "next": "\n            public Entry<String, String> next() {\n                return new Attribute(attr.getKey().substring(dataPrefix.length()), attr.getValue());\n            }", "dataKey": "\n    private static String dataKey(String key) {\n        return dataPrefix + key;\n    }"}