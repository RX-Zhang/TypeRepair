{"getKey": "\n    public String getKey() {\n        return key;\n    }", "setKey": "\n    public void setKey(String key) {\n        Validate.notNull(key);\n        key = key.trim();\n        Validate.notEmpty(key); // trimming could potentially make empty, so validate here\n        if (parent != null) {\n            int i = parent.indexOfKey(this.key);\n            if (i != Attributes.NotFound)\n                parent.keys[i] = key;\n        }\n        this.key = key;\n    }", "getValue": "\n    public String getValue() {\n        return Attributes.checkNotNull(val);\n    }", "setValue": "\n    public String setValue(String val) {\n        String oldVal = parent.get(this.key);\n        if (parent != null) {\n            int i = parent.indexOfKey(this.key);\n            if (i != Attributes.NotFound)\n                parent.vals[i] = val;\n        }\n        this.val = val;\n        return Attributes.checkNotNull(oldVal);\n    }", "html": "\n    public String html() {\n        StringBuilder sb = StringUtil.borrowBuilder();\n        \n        try {\n        \thtml(sb, (new Document(\"\")).outputSettings());\n        } catch(IOException exception) {\n        \tthrow new SerializationException(exception);\n        }\n        return StringUtil.releaseBuilder(sb);\n    }", "toString": "\n    public String toString() {\n        return html();\n    }", "createFromEncoded": "\n    public static Attribute createFromEncoded(String unencodedKey, String encodedValue) {\n        String value = Entities.unescape(encodedValue, true);\n        return new Attribute(unencodedKey, value, null); // parent will get set when Put\n    }", "isDataAttribute": "\n    protected boolean isDataAttribute() {\n        return isDataAttribute(key);\n    }", "shouldCollapseAttribute": "\n    protected final boolean shouldCollapseAttribute(Document.OutputSettings out) {\n        return shouldCollapseAttribute(key, val, out);\n    }", "isBooleanAttribute": "\n    protected boolean isBooleanAttribute() {\n        return Arrays.binarySearch(booleanAttributes, key) >= 0 || val == null;\n    }", "equals": "\n    public boolean equals(Object o) { // note parent not considered\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n        Attribute attribute = (Attribute) o;\n        if (key != null ? !key.equals(attribute.key) : attribute.key != null) return false;\n        return val != null ? val.equals(attribute.val) : attribute.val == null;\n    }", "hashCode": "\n    public int hashCode() { // note parent not considered\n        int result = key != null ? key.hashCode() : 0;\n        result = 31 * result + (val != null ? val.hashCode() : 0);\n        return result;\n    }", "clone": "\n    public Attribute clone() {\n        try {\n            return (Attribute) super.clone();\n        } catch (CloneNotSupportedException e) {\n            throw new RuntimeException(e);\n        }\n    }"}