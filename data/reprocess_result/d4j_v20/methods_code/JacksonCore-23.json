{"withRootSeparator": "\n    public DefaultPrettyPrinter withRootSeparator(SerializableString rootSeparator)\n    {\n        if (_rootSeparator == rootSeparator ||\n                (rootSeparator != null && rootSeparator.equals(_rootSeparator))) {\n            return this;\n        }\n        return new DefaultPrettyPrinter(this, rootSeparator);\n    }", "indentArraysWith": "\n    public void indentArraysWith(Indenter i) {\n        _arrayIndenter = (i == null) ? NopIndenter.instance : i;\n    }", "indentObjectsWith": "\n    public void indentObjectsWith(Indenter i) {\n        _objectIndenter = (i == null) ? NopIndenter.instance : i;\n    }", "withArrayIndenter": "\n    public DefaultPrettyPrinter withArrayIndenter(Indenter i) {\n        if (i == null) {\n            i = NopIndenter.instance;\n        }\n        if (_arrayIndenter == i) {\n            return this;\n        }\n        DefaultPrettyPrinter pp = new DefaultPrettyPrinter(this);\n        pp._arrayIndenter = i;\n        return pp;\n    }", "withObjectIndenter": "\n    public DefaultPrettyPrinter withObjectIndenter(Indenter i) {\n        if (i == null) {\n            i = NopIndenter.instance;\n        }\n        if (_objectIndenter == i) {\n            return this;\n        }\n        DefaultPrettyPrinter pp = new DefaultPrettyPrinter(this);\n        pp._objectIndenter = i;\n        return pp;\n    }", "withSpacesInObjectEntries": "\n    public DefaultPrettyPrinter withSpacesInObjectEntries() {\n        return _withSpaces(true);\n    }", "withoutSpacesInObjectEntries": "\n    public DefaultPrettyPrinter withoutSpacesInObjectEntries() {\n        return _withSpaces(false);\n    }", "_withSpaces": "\n    protected DefaultPrettyPrinter _withSpaces(boolean state)\n    {\n        if (_spacesInObjectEntries == state) {\n            return this;\n        }\n        DefaultPrettyPrinter pp = new DefaultPrettyPrinter(this);\n        pp._spacesInObjectEntries = state;\n        return pp;\n    }", "withSeparators": "\n    public DefaultPrettyPrinter withSeparators(Separators separators) {\n        _separators = separators;\n        _objectFieldValueSeparatorWithSpaces = \" \" + separators.getObjectFieldValueSeparator() + \" \";\n        return this;\n    }", "createInstance": "\n    public DefaultPrettyPrinter createInstance() {\n        return new DefaultPrettyPrinter(this);\n    }", "writeRootValueSeparator": "\n    public void writeRootValueSeparator(JsonGenerator g) throws IOException\n    {\n        if (_rootSeparator != null) {\n            g.writeRaw(_rootSeparator);\n        }\n    }", "writeStartObject": "\n    public void writeStartObject(JsonGenerator g) throws IOException\n    {\n        g.writeRaw('{');\n        if (!_objectIndenter.isInline()) {\n            ++_nesting;\n        }\n    }\n\n    @Override\n    public void beforeObjectEntries(JsonGenerator g) throws IOException\n    {\n        _objectIndenter.writeIndentation(g, _nesting);\n    }\n\n    /**\n     * Method called after an object field has been output, but\n     * before the value is output.\n     *<p>\n     * Default handling (without pretty-printing) will output a single\n     * colon to separate the two. Pretty-printer is\n     * to output a colon as well, but can surround that with other\n     * (white-space) decoration.\n     */\n    @Override\n    public void writeObjectFieldValueSeparator(JsonGenerator g) throws IOException\n    {\n        if (_spacesInObjectEntries) {\n            g.writeRaw(_objectFieldValueSeparatorWithSpaces);\n        } else {\n            g.writeRaw(_separators.getObjectFieldValueSeparator());\n        }\n    }\n\n    /**\n     * Method called after an object entry (field:value) has been completely\n     * output, and before another value is to be output.\n     *<p>\n     * Default handling (without pretty-printing) will output a single\n     * comma to separate the two. Pretty-printer is\n     * to output a comma as well, but can surround that with other\n     * (white-space) decoration.\n     */\n    @Override\n    public void writeObjectEntrySeparator(JsonGenerator g) throws IOException\n    {\n        g.writeRaw(_separators.getObjectEntrySeparator());\n        _objectIndenter.writeIndentation(g, _nesting);\n    }\n\n    @Override\n    public void writeEndObject(JsonGenerator g, int nrOfEntries) throws IOException\n    {\n        if (!_objectIndenter.isInline()) {\n            --_nesting;\n        }\n        if (nrOfEntries > 0) {\n            _objectIndenter.writeIndentation(g, _nesting);\n        } else {\n            g.writeRaw(' ');\n        }\n        g.writeRaw('}');\n    }", "beforeObjectEntries": "\n    public void beforeObjectEntries(JsonGenerator g) throws IOException\n    {\n        _objectIndenter.writeIndentation(g, _nesting);\n    }", "writeObjectFieldValueSeparator": "\n    public void writeObjectFieldValueSeparator(JsonGenerator g) throws IOException\n    {\n        if (_spacesInObjectEntries) {\n            g.writeRaw(_objectFieldValueSeparatorWithSpaces);\n        } else {\n            g.writeRaw(_separators.getObjectFieldValueSeparator());\n        }\n    }", "writeObjectEntrySeparator": "\n    public void writeObjectEntrySeparator(JsonGenerator g) throws IOException\n    {\n        g.writeRaw(_separators.getObjectEntrySeparator());\n        _objectIndenter.writeIndentation(g, _nesting);\n    }", "writeEndObject": "\n    public void writeEndObject(JsonGenerator g, int nrOfEntries) throws IOException\n    {\n        if (!_objectIndenter.isInline()) {\n            --_nesting;\n        }\n        if (nrOfEntries > 0) {\n            _objectIndenter.writeIndentation(g, _nesting);\n        } else {\n            g.writeRaw(' ');\n        }\n        g.writeRaw('}');", "writeStartArray": "\n    public void writeStartArray(JsonGenerator g) throws IOException\n    {\n        if (!_arrayIndenter.isInline()) {\n            ++_nesting;\n        }\n        g.writeRaw('[');\n    }", "beforeArrayValues": "\n    public void beforeArrayValues(JsonGenerator g) throws IOException {\n        _arrayIndenter.writeIndentation(g, _nesting);\n    }", "writeArrayValueSeparator": "\n    public void writeArrayValueSeparator(JsonGenerator g) throws IOException\n    {\n        g.writeRaw(_separators.getArrayValueSeparator());\n        _arrayIndenter.writeIndentation(g, _nesting);\n    }", "writeEndArray": "\n    public void writeEndArray(JsonGenerator g, int nrOfValues) throws IOException\n    {\n        if (!_arrayIndenter.isInline()) {\n            --_nesting;\n        }\n        if (nrOfValues > 0) {\n            _arrayIndenter.writeIndentation(g, _nesting);\n        } else {\n            g.writeRaw(' ');\n        }\n        g.writeRaw(']');\n    }", "writeIndentation": "\n        public void writeIndentation(JsonGenerator g, int level) throws IOException { }", "isInline": "\n        public boolean isInline() { return true; }"}