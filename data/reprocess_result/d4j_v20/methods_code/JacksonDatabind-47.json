{"managed": "\n        public static ReferenceProperty managed(String name) { return new ReferenceProperty(Type.MANAGED_REFERENCE, name); }", "back": "\n        public static ReferenceProperty back(String name) { return new ReferenceProperty(Type.BACK_REFERENCE, name); }", "getType": "\n        public Type getType() { return _type; }", "getName": "\n        public String getName() { return _name; }", "isManagedReference": "\n        public boolean isManagedReference() { return _type == Type.MANAGED_REFERENCE; }", "isBackReference": "\n        public boolean isBackReference() { return _type == Type.BACK_REFERENCE; }", "nopInstance": "\n    public static AnnotationIntrospector nopInstance() {\n        return NopAnnotationIntrospector.instance;\n    }", "pair": "\n    public static AnnotationIntrospector pair(AnnotationIntrospector a1, AnnotationIntrospector a2) {\n        return new AnnotationIntrospectorPair(a1, a2);\n    }", "allIntrospectors": "\n    public Collection<AnnotationIntrospector> allIntrospectors() {\n        return Collections.singletonList(this);\n    }", "version": "\n    public abstract Version version();\n    \n    /*\n    /**********************************************************\n    /* Meta-annotations (annotations for annotation types)\n    /**********************************************************\n     */\n\n    /**\n     * Method for checking whether given annotation is considered an\n     * annotation bundle: if so, all meta-annotations it has will\n     * be used instead of annotation (\"bundle\") itself.\n     * \n     * @since 2.0\n     */\n    public boolean isAnnotationBundle(Annotation ann) {\n        return false;\n    }", "isAnnotationBundle": "\n    public boolean isAnnotationBundle(Annotation ann) {\n        return false;\n    }", "findObjectIdInfo": "\n    public ObjectIdInfo findObjectIdInfo(Annotated ann) {\n        return null;\n    }", "findObjectReferenceInfo": "\n    public ObjectIdInfo findObjectReferenceInfo(Annotated ann, ObjectIdInfo objectIdInfo) {\n        return objectIdInfo;\n    }", "findRootName": "\n    public PropertyName findRootName(AnnotatedClass ac) {\n        return null;\n    }", "findPropertiesToIgnore": "\n    public String[] findPropertiesToIgnore(Annotated ac, boolean forSerialization) {\n        return null;\n    }", "findIgnoreUnknownProperties": "\n    public Boolean findIgnoreUnknownProperties(AnnotatedClass ac) { return null; }", "isIgnorableType": "\n    public Boolean isIgnorableType(AnnotatedClass ac) { return null; }", "findFilterId": "\n    public Object findFilterId(Annotated ann) { return null; }", "findNamingStrategy": "\n    public Object findNamingStrategy(AnnotatedClass ac) { return null; }", "findClassDescription": "\n    public String findClassDescription(AnnotatedClass ac) { return null; }", "findAutoDetectVisibility": "\n    public VisibilityChecker<?> findAutoDetectVisibility(AnnotatedClass ac, VisibilityChecker<?> checker) {\n        return checker;\n    }", "findTypeResolver": "\n    public TypeResolverBuilder<?> findTypeResolver(MapperConfig<?> config,\n            AnnotatedClass ac, JavaType baseType) {\n        return null;\n    }", "findPropertyTypeResolver": "\n    public TypeResolverBuilder<?> findPropertyTypeResolver(MapperConfig<?> config,\n            AnnotatedMember am, JavaType baseType) {\n        return null;\n    }", "findPropertyContentTypeResolver": "\n    public TypeResolverBuilder<?> findPropertyContentTypeResolver(MapperConfig<?> config,\n            AnnotatedMember am, JavaType containerType) {\n        return null;\n    }", "findSubtypes": "\n    public List<NamedType> findSubtypes(Annotated a) { return null; }", "findTypeName": "\n    public String findTypeName(AnnotatedClass ac) { return null; }", "isTypeId": "\n    public Boolean isTypeId(AnnotatedMember member) { return null; }", "findReferenceType": "\n    public ReferenceProperty findReferenceType(AnnotatedMember member) { return null; }", "findUnwrappingNameTransformer": "\n    public NameTransformer findUnwrappingNameTransformer(AnnotatedMember member) { return null; }", "hasIgnoreMarker": "\n    public boolean hasIgnoreMarker(AnnotatedMember m) { return false; }", "findInjectableValueId": "\n    public Object findInjectableValueId(AnnotatedMember m) { return null; }", "hasRequiredMarker": "\n    public Boolean hasRequiredMarker(AnnotatedMember m) { return null; }", "findViews": "\n    public Class<?>[] findViews(Annotated a) { return null; }", "findFormat": "\n    public JsonFormat.Value findFormat(Annotated memberOrClass) { return null; }", "findWrapperName": "\n    public PropertyName findWrapperName(Annotated ann) { return null; }", "findPropertyDefaultValue": "\n    public String findPropertyDefaultValue(Annotated ann) { return null; }", "findPropertyDescription": "\n    public String findPropertyDescription(Annotated ann) { return null; }", "findPropertyIndex": "\n    public Integer findPropertyIndex(Annotated ann) { return null; }", "findImplicitPropertyName": "\n    public String findImplicitPropertyName(AnnotatedMember member) { return null; }", "findPropertyAccess": "\n    public JsonProperty.Access findPropertyAccess(Annotated ann) { return null; }", "resolveSetterConflict": "\n    public AnnotatedMethod resolveSetterConflict(MapperConfig<?> config,\n            AnnotatedMethod setter1, AnnotatedMethod setter2) {\n        return null;\n    }", "findSerializer": "\n    public Object findSerializer(Annotated am) {\n        return null;\n    }", "findKeySerializer": "\n    public Object findKeySerializer(Annotated am) {\n        return null;\n    }", "findContentSerializer": "\n    public Object findContentSerializer(Annotated am) {\n        return null;\n    }", "findNullSerializer": "\n    public Object findNullSerializer(Annotated am) {\n        return null;\n    }", "findSerializationTyping": "\n    public JsonSerialize.Typing findSerializationTyping(Annotated a) {\n        return null;\n    }", "findSerializationConverter": "\n    public Object findSerializationConverter(Annotated a) {\n        return null;\n    }", "findSerializationContentConverter": "\n    public Object findSerializationContentConverter(AnnotatedMember a) {\n        return null;\n    }", "findSerializationInclusion": "\n    public JsonInclude.Include findSerializationInclusion(Annotated a, JsonInclude.Include defValue) {\n        return defValue;\n    }", "findSerializationInclusionForContent": "\n    public JsonInclude.Include findSerializationInclusionForContent(Annotated a, JsonInclude.Include defValue) {\n        return defValue;\n    }", "findPropertyInclusion": "\n    public JsonInclude.Value findPropertyInclusion(Annotated a) {\n        return JsonInclude.Value.empty();\n    }", "findSerializationType": "\n    public Class<?> findSerializationType(Annotated a) {\n        return null;\n    }", "findSerializationKeyType": "\n    public Class<?> findSerializationKeyType(Annotated am, JavaType baseType) {\n        return null;\n    }", "findSerializationContentType": "\n    public Class<?> findSerializationContentType(Annotated am, JavaType baseType) {\n        return null;\n    }", "refineSerializationType": "\n    public JavaType refineSerializationType(final MapperConfig<?> config,\n            final Annotated a, final JavaType baseType) throws JsonMappingException\n    {\n        JavaType type = baseType;\n        final TypeFactory tf = config.getTypeFactory();\n        \n        // 10-Oct-2015, tatu: For 2.7, we'll need to delegate back to\n        //    now-deprecated secondary methods; this because while\n        //    direct sub-class not yet retrofitted may only override\n        //    those methods. With 2.8 or later we may consider removal\n        //    of these methods\n\n        \n        // Ok: start by refining the main type itself; common to all types\n        Class<?> serClass = findSerializationType(a);\n        if (serClass != null) {\n            if (type.hasRawClass(serClass)) {\n                // 30-Nov-2015, tatu: As per [databind#1023], need to allow forcing of\n                //    static typing this way\n                type = type.withStaticTyping();\n            } else {\n                try {\n                    // 11-Oct-2015, tatu: For deser, we call `TypeFactory.constructSpecializedType()`,\n                    //   may be needed here too in future?\n                        type = tf.constructGeneralizedType(type, serClass);\n                } catch (IllegalArgumentException iae) {\n                    throw new JsonMappingException(null,\n                            String.format(\"Failed to widen type %s with annotation (value %s), from '%s': %s\",\n                                    type, serClass.getName(), a.getName(), iae.getMessage()),\n                                    iae);\n                }\n            }\n        }\n        // Then further processing for container types\n\n        // First, key type (for Maps, Map-like types):\n        if (type.isMapLikeType()) {\n            JavaType keyType = type.getKeyType();\n            Class<?> keyClass = findSerializationKeyType(a, keyType);\n            if (keyClass != null) {\n                if (keyType.hasRawClass(keyClass)) {\n                    keyType = keyType.withStaticTyping();\n                } else {\n                    Class<?> currRaw = keyType.getRawClass();\n                    try {\n                        // 19-May-2016, tatu: As per [databind#1231], [databind#1178] may need to actually\n                        //   specialize (narrow) type sometimes, even if more commonly opposite\n                        //   is needed.\n                        if (keyClass.isAssignableFrom(currRaw)) { // common case\n                            keyType = tf.constructGeneralizedType(keyType, keyClass);\n                        } else if (currRaw.isAssignableFrom(keyClass)) { // specialization, ok as well\n                            keyType = tf.constructSpecializedType(keyType, keyClass);\n                        } else {\n                            throw new JsonMappingException(null,\n                                    String.format(\"Can not refine serialization key type %s into %s; types not related\",\n                                            keyType, keyClass.getName()));\n                        }\n                    } catch (IllegalArgumentException iae) {\n                        throw new JsonMappingException(null,\n                                String.format(\"Failed to widen key type of %s with concrete-type annotation (value %s), from '%s': %s\",\n                                        type, keyClass.getName(), a.getName(), iae.getMessage()),\n                                        iae);\n                    }\n                }\n                type = ((MapLikeType) type).withKeyType(keyType);\n            }\n        }\n\n        JavaType contentType = type.getContentType();\n        if (contentType != null) { // collection[like], map[like], array, reference\n            // And then value types for all containers:\n           Class<?> contentClass = findSerializationContentType(a, contentType);\n           if (contentClass != null) {\n               if (contentType.hasRawClass(contentClass)) {\n                   contentType = contentType.withStaticTyping();\n               } else {\n                   // 03-Apr-2016, tatu: As per [databind#1178], may need to actually\n                   //   specialize (narrow) type sometimes, even if more commonly opposite\n                   //   is needed.\n                   Class<?> currRaw = contentType.getRawClass();\n                   try {\n                       if (contentClass.isAssignableFrom(currRaw)) { // common case\n                           contentType = tf.constructGeneralizedType(contentType, contentClass);\n                       } else if (currRaw.isAssignableFrom(contentClass)) { // specialization, ok as well\n                           contentType = tf.constructSpecializedType(contentType, contentClass);\n                       } else {\n                           throw new JsonMappingException(null,\n                                   String.format(\"Can not refine serialization content type %s into %s; types not related\",\n                                           contentType, contentClass.getName()));\n                       }\n                   } catch (IllegalArgumentException iae) { // shouldn't really happen\n                       throw new JsonMappingException(null,\n                               String.format(\"Internal error: failed to refine value type of %s with concrete-type annotation (value %s), from '%s': %s\",\n                                       type, contentClass.getName(), a.getName(), iae.getMessage()),\n                                       iae);\n                   }\n               }\n               type = type.withContentType(contentType);\n           }\n        }\n        return type;\n    }", "findSerializationPropertyOrder": "\n    public String[] findSerializationPropertyOrder(AnnotatedClass ac) {\n        return null;\n    }", "findSerializationSortAlphabetically": "\n    public Boolean findSerializationSortAlphabetically(Annotated ann) {\n        return null;\n    }", "findAndAddVirtualProperties": "\n    public void findAndAddVirtualProperties(MapperConfig<?> config, AnnotatedClass ac,\n            List<BeanPropertyWriter> properties) { }", "findNameForSerialization": "\n    public PropertyName findNameForSerialization(Annotated a) {\n        /*\n        if (name != null) {\n            if (name.length() == 0) { // empty String means 'default'\n                return PropertyName.USE_DEFAULT;\n            }\n            return new PropertyName(name);\n        }\n        */\n        return null;\n    }", "hasAsValueAnnotation": "\n    public boolean hasAsValueAnnotation(AnnotatedMethod am) {\n        return false;\n    }", "findEnumValue": "\n    public String findEnumValue(Enum<?> value) {\n        return value.name();\n    }", "findEnumValues": "\n    public  String[] findEnumValues(Class<?> enumType, Enum<?>[] enumValues, String[] names) {\n        for (int i = 0, len = enumValues.length; i < len; ++i) {\n            /* 12-Mar-2016, tatu: This is quite tricky, considering that we should NOT\n             *   overwrite values with default `name`... so for now, let's only delegate\n             *   if no value has been set. Still not optimal but has to do\n             */\n            // TODO: In 2.8, stop delegation?\n            if (names[i] == null) {\n                names[i] = findEnumValue(enumValues[i]);\n            }\n        }\n        return names;\n    }", "findDeserializer": "\n    public Object findDeserializer(Annotated am) {\n        return null;\n    }", "findKeyDeserializer": "\n    public Object findKeyDeserializer(Annotated am) {\n        return null;\n    }", "findContentDeserializer": "\n    public Object findContentDeserializer(Annotated am) {\n        return null;\n    }", "findDeserializationConverter": "\n    public Object findDeserializationConverter(Annotated a) {\n        return null;\n    }", "findDeserializationContentConverter": "\n    public Object findDeserializationContentConverter(AnnotatedMember a) {\n        return null;\n    }", "refineDeserializationType": "\n    public JavaType refineDeserializationType(final MapperConfig<?> config,\n            final Annotated a, final JavaType baseType) throws JsonMappingException\n    {\n        JavaType type = baseType;\n        final TypeFactory tf = config.getTypeFactory();\n\n        // 10-Oct-2015, tatu: For 2.7, we'll need to delegate back to\n        //    now-deprecated secondary methods; this because while\n        //    direct sub-class not yet retrofitted may only override\n        //    those methods. With 2.8 or later we may consider removal\n        //    of these methods\n\n        \n        // Ok: start by refining the main type itself; common to all types\n        Class<?> valueClass = findDeserializationType(a, type);\n        if ((valueClass != null) && !type.hasRawClass(valueClass)) {\n            try {\n                type = tf.constructSpecializedType(type, valueClass);\n            } catch (IllegalArgumentException iae) {\n                throw new JsonMappingException(null,\n                        String.format(\"Failed to narrow type %s with annotation (value %s), from '%s': %s\",\n                                type, valueClass.getName(), a.getName(), iae.getMessage()),\n                                iae);\n            }\n        }\n        // Then further processing for container types\n\n        // First, key type (for Maps, Map-like types):\n        if (type.isMapLikeType()) {\n            JavaType keyType = type.getKeyType();\n            Class<?> keyClass = findDeserializationKeyType(a, keyType);\n            if (keyClass != null) {\n                try {\n                    keyType = tf.constructSpecializedType(keyType, keyClass);\n                    type = ((MapLikeType) type).withKeyType(keyType);\n                } catch (IllegalArgumentException iae) {\n                    throw new JsonMappingException(null,\n                            String.format(\"Failed to narrow key type of %s with concrete-type annotation (value %s), from '%s': %s\",\n                                    type, keyClass.getName(), a.getName(), iae.getMessage()),\n                                    iae);\n                }\n            }\n        }\n        JavaType contentType = type.getContentType();\n        if (contentType != null) { // collection[like], map[like], array, reference\n            // And then value types for all containers:\n           Class<?> contentClass = findDeserializationContentType(a, contentType);\n           if (contentClass != null) {\n               try {\n                   contentType = tf.constructSpecializedType(contentType, contentClass);\n                   type = type.withContentType(contentType);\n               } catch (IllegalArgumentException iae) {\n                   throw new JsonMappingException(null,\n                           String.format(\"Failed to narrow value type of %s with concrete-type annotation (value %s), from '%s': %s\",\n                                   type, contentClass.getName(), a.getName(), iae.getMessage()),\n                                   iae);\n               }\n           }\n        }\n        return type;\n    }", "findDeserializationType": "\n    public Class<?> findDeserializationType(Annotated am, JavaType baseType) {\n        return null;\n    }", "findDeserializationKeyType": "\n    public Class<?> findDeserializationKeyType(Annotated am, JavaType baseKeyType) {\n        return null;\n    }", "findDeserializationContentType": "\n    public Class<?> findDeserializationContentType(Annotated am, JavaType baseContentType) {\n        return null;\n    }", "findValueInstantiator": "\n    public Object findValueInstantiator(AnnotatedClass ac) {\n        return null;\n    }", "findPOJOBuilder": "\n    public Class<?> findPOJOBuilder(AnnotatedClass ac) {\n        return null;\n    }", "findPOJOBuilderConfig": "\n    public JsonPOJOBuilder.Value findPOJOBuilderConfig(AnnotatedClass ac) {\n        return null;\n    }", "findNameForDeserialization": "\n    public PropertyName findNameForDeserialization(Annotated a) {\n        /*\n        if (name != null) {\n            if (name.length() == 0) { // empty String means 'default'\n                return PropertyName.USE_DEFAULT;\n            }\n            return new PropertyName(name);\n        }\n        */\n        return null;\n    }", "hasAnySetterAnnotation": "\n    public boolean hasAnySetterAnnotation(AnnotatedMethod am) {\n        return false;\n    }", "hasAnyGetterAnnotation": "\n    public boolean hasAnyGetterAnnotation(AnnotatedMethod am) {\n        return false;\n    }", "hasCreatorAnnotation": "\n    public boolean hasCreatorAnnotation(Annotated a) {\n        return false;\n    }", "findCreatorBinding": "\n    public JsonCreator.Mode findCreatorBinding(Annotated a) {\n        return null;\n    }", "_findAnnotation": "\n    protected <A extends Annotation> A _findAnnotation(Annotated annotated,\n            Class<A> annoClass) {\n        return annotated.getAnnotation(annoClass);\n    }", "_hasAnnotation": "\n    protected boolean _hasAnnotation(Annotated annotated, Class<? extends Annotation> annoClass) {\n        return annotated.hasAnnotation(annoClass);\n    }", "_hasOneOf": "\n    protected boolean _hasOneOf(Annotated annotated, Class<? extends Annotation>[] annoClasses) {\n        return annotated.hasOneOf(annoClasses);\n    }"}