{"releaseBuffers": "\n    public void releaseBuffers()\n    {\n        if (_allocator == null) {\n            resetWithEmpty();\n        } else {\n            if (_currentSegment != null) {\n                // First, let's get rid of all but the largest char array\n                resetWithEmpty();\n                // And then return that array\n                char[] buf = _currentSegment;\n                _currentSegment = null;\n                _allocator.releaseCharBuffer(BufferRecycler.CHAR_TEXT_BUFFER, buf);\n            }\n        }\n    }", "resetWithEmpty": "\n    public void resetWithEmpty()\n    {\n        _inputStart = -1; // indicates shared buffer not used\n        _currentSize = 0;\n        _inputLen = 0;\n\n        _inputBuffer = null;\n        _resultString = null;\n        _resultArray = null;\n\n        // And then reset internal input buffers, if necessary:\n        if (_hasSegments) {\n            clearSegments();\n        }\n    }", "resetWithShared": "\n    public void resetWithShared(char[] buf, int start, int len)\n    {\n        // First, let's clear intermediate values, if any:\n        _resultString = null;\n        _resultArray = null;\n\n        // Then let's mark things we need about input buffer\n        _inputBuffer = buf;\n        _inputStart = start;\n        _inputLen = len;\n\n        // And then reset internal input buffers, if necessary:\n        if (_hasSegments) {\n            clearSegments();\n        }\n    }", "resetWithCopy": "\n    public void resetWithCopy(char[] buf, int start, int len)\n    {\n        _inputBuffer = null;\n        _inputStart = -1; // indicates shared buffer not used\n        _inputLen = 0;\n\n        _resultString = null;\n        _resultArray = null;\n\n        // And then reset internal input buffers, if necessary:\n        if (_hasSegments) {\n            clearSegments();\n        } else if (_currentSegment == null) {\n            _currentSegment = buf(len);\n        }\n        _currentSize = _segmentSize = 0;\n        append(buf, start, len);\n    }", "resetWithString": "\n    public void resetWithString(String value)\n    {\n        _inputBuffer = null;\n        _inputStart = -1;\n        _inputLen = 0;\n\n        _resultString = value;\n        _resultArray = null;\n\n        if (_hasSegments) {\n            clearSegments();\n        }\n        _currentSize = 0;\n        \n    }", "buf": "\n    private char[] buf(int needed)\n    {\n        if (_allocator != null) {\n            return _allocator.allocCharBuffer(BufferRecycler.CHAR_TEXT_BUFFER, needed);\n        }\n        return new char[Math.max(needed, MIN_SEGMENT_LEN)];\n    }", "clearSegments": "\n    private void clearSegments()\n    {\n        _hasSegments = false;\n        /* Let's start using _last_ segment from list; for one, it's\n         * the biggest one, and it's also most likely to be cached\n         */\n        /* 28-Aug-2009, tatu: Actually, the current segment should\n         *   be the biggest one, already\n         */\n        //_currentSegment = _segments.get(_segments.size() - 1);\n        _segments.clear();\n        _currentSize = _segmentSize = 0;\n    }", "size": "\n    public int size() {\n        if (_inputStart >= 0) { // shared copy from input buf\n            return _inputLen;\n        }\n        if (_resultArray != null) {\n            return _resultArray.length;\n        }\n        if (_resultString != null) {\n            return _resultString.length();\n        }\n        // local segmented buffers\n        return _segmentSize + _currentSize;\n    }", "getTextOffset": "\n    public int getTextOffset() {\n        /* Only shared input buffer can have non-zero offset; buffer\n         * segments start at 0, and if we have to create a combo buffer,\n         * that too will start from beginning of the buffer\n         */\n        return (_inputStart >= 0) ? _inputStart : 0;\n    }", "hasTextAsCharacters": "\n    public boolean hasTextAsCharacters()\n    {\n        // if we have array in some form, sure\n        if (_inputStart >= 0 || _resultArray != null)  return true;\n        // not if we have String as value\n        if (_resultString != null) return false;\n        return true;\n    }", "getTextBuffer": "\n    public char[] getTextBuffer()\n    {\n        // Are we just using shared input buffer?\n        if (_inputStart >= 0) return _inputBuffer;\n        if (_resultArray != null)  return _resultArray;\n        if (_resultString != null) {\n            return (_resultArray = _resultString.toCharArray());\n        }\n        // Nope; but does it fit in just one segment?\n        if (!_hasSegments)  return _currentSegment;\n        // Nope, need to have/create a non-segmented array and return it\n        return contentsAsArray();\n    }", "contentsAsString": "\n    public String contentsAsString()\n    {\n        if (_resultString == null) {\n            // Has array been requested? Can make a shortcut, if so:\n            if (_resultArray != null) {\n                _resultString = new String(_resultArray);\n            } else {\n                // Do we use shared array?\n                if (_inputStart >= 0) {\n                    if (_inputLen < 1) {\n                        return (_resultString = \"\");\n                    }\n                    _resultString = new String(_inputBuffer, _inputStart, _inputLen);\n                } else { // nope... need to copy\n                    // But first, let's see if we have just one buffer\n                    int segLen = _segmentSize;\n                    int currLen = _currentSize;\n                    \n                    if (segLen == 0) { // yup\n                        _resultString = (currLen == 0) ? \"\" : new String(_currentSegment, 0, currLen);\n                    } else { // no, need to combine\n                        StringBuilder sb = new StringBuilder(segLen + currLen);\n                        // First stored segments\n                        if (_segments != null) {\n                            for (int i = 0, len = _segments.size(); i < len; ++i) {\n                                char[] curr = _segments.get(i);\n                                sb.append(curr, 0, curr.length);\n                            }\n                        }\n                        // And finally, current segment:\n                        sb.append(_currentSegment, 0, _currentSize);\n                        _resultString = sb.toString();\n                    }\n                }\n            }\n        }\n        return _resultString;\n    }", "contentsAsArray": "\n    public char[] contentsAsArray() {\n        char[] result = _resultArray;\n        if (result == null) {\n            _resultArray = result = resultArray();\n        }\n        return result;\n    }", "contentsAsDecimal": "\n    public BigDecimal contentsAsDecimal() throws NumberFormatException\n    {\n        // Already got a pre-cut array?\n        if (_resultArray != null) {\n            return NumberInput.parseBigDecimal(_resultArray);\n        }\n        // Or a shared buffer?\n        if ((_inputStart >= 0) && (_inputBuffer != null)) {\n            return NumberInput.parseBigDecimal(_inputBuffer, _inputStart, _inputLen);\n        }\n        // Or if not, just a single buffer (the usual case)\n        if ((_segmentSize == 0) && (_currentSegment != null)) {\n            return NumberInput.parseBigDecimal(_currentSegment, 0, _currentSize);\n        }\n        // If not, let's just get it aggregated...\n        return NumberInput.parseBigDecimal(contentsAsArray());\n    }", "contentsAsDouble": "\n    public double contentsAsDouble() throws NumberFormatException {\n        return NumberInput.parseDouble(contentsAsString());\n    }", "ensureNotShared": "\n    public void ensureNotShared() {\n        if (_inputStart >= 0) {\n            unshare(16);\n        }\n    }", "append": "\n    public void append(char c) {\n        // Using shared buffer so far?\n        if (_inputStart >= 0) {\n            unshare(16);\n        }\n        _resultString = null;\n        _resultArray = null;\n        // Room in current segment?\n        char[] curr = _currentSegment;\n        if (_currentSize >= curr.length) {\n            expand(1);\n            curr = _currentSegment;\n        }\n        curr[_currentSize++] = c;\n    }", "getCurrentSegment": "\n    public char[] getCurrentSegment()\n    {\n        /* Since the intention of the caller is to directly add stuff into\n         * buffers, we should NOT have anything in shared buffer... ie. may\n         * need to unshare contents.\n         */\n        if (_inputStart >= 0) {\n            unshare(1);\n        } else {\n            char[] curr = _currentSegment;\n            if (curr == null) {\n                _currentSegment = buf(0);\n            } else if (_currentSize >= curr.length) {\n                // Plus, we better have room for at least one more char\n                expand(1);\n            }\n        }\n        return _currentSegment;\n    }", "emptyAndGetCurrentSegment": "\n    public char[] emptyAndGetCurrentSegment()\n    {\n        // inlined 'resetWithEmpty()'\n        _inputStart = -1; // indicates shared buffer not used\n        _currentSize = 0;\n        _inputLen = 0;\n\n        _inputBuffer = null;\n        _resultString = null;\n        _resultArray = null;\n\n        // And then reset internal input buffers, if necessary:\n        if (_hasSegments) {\n            clearSegments();\n        }\n        char[] curr = _currentSegment;\n        if (curr == null) {\n            _currentSegment = curr = buf(0);\n        }\n        return curr;\n    }", "getCurrentSegmentSize": "\n    public int getCurrentSegmentSize() { return _currentSize; }", "setCurrentLength": "\n    public void setCurrentLength(int len) { _currentSize = len; }", "finishCurrentSegment": "\n    public char[] finishCurrentSegment() {\n        if (_segments == null) {\n            _segments = new ArrayList<char[]>();\n        }\n        _hasSegments = true;\n        _segments.add(_currentSegment);\n        int oldLen = _currentSegment.length;\n        _segmentSize += oldLen;\n        _currentSize = 0;\n\n        // Let's grow segments by 50%\n        int newLen = oldLen + (oldLen >> 1);\n        if (newLen < MIN_SEGMENT_LEN) {\n            newLen = MIN_SEGMENT_LEN;\n        } else if (newLen > MAX_SEGMENT_LEN) {\n            newLen = MAX_SEGMENT_LEN;\n        }\n        char[] curr = carr(newLen);\n        _currentSegment = curr;\n        return curr;\n    }", "expandCurrentSegment": "\n    public char[] expandCurrentSegment()\n    {\n        final char[] curr = _currentSegment;\n        // Let's grow by 50% by default\n        final int len = curr.length;\n        // but above intended maximum, slow to increase by 25%\n        int newLen = (len == MAX_SEGMENT_LEN) ? (MAX_SEGMENT_LEN+1) : Math.min(MAX_SEGMENT_LEN, len + (len >> 1));\n        return (_currentSegment = Arrays.copyOf(curr, newLen));\n    }", "toString": "\n    @Override public String toString() { return contentsAsString(); }", "unshare": "\n    private void unshare(int needExtra)\n    {\n        int sharedLen = _inputLen;\n        _inputLen = 0;\n        char[] inputBuf = _inputBuffer;\n        _inputBuffer = null;\n        int start = _inputStart;\n        _inputStart = -1;\n\n        // Is buffer big enough, or do we need to reallocate?\n        int needed = sharedLen+needExtra;\n        if (_currentSegment == null || needed > _currentSegment.length) {\n            _currentSegment = buf(needed);\n        }\n        if (sharedLen > 0) {\n            System.arraycopy(inputBuf, start, _currentSegment, 0, sharedLen);\n        }\n        _segmentSize = 0;\n        _currentSize = sharedLen;\n    }", "expand": "\n    private void expand(int minNewSegmentSize)\n    {\n        // First, let's move current segment to segment list:\n        if (_segments == null) {\n            _segments = new ArrayList<char[]>();\n        }\n        char[] curr = _currentSegment;\n        _hasSegments = true;\n        _segments.add(curr);\n        _segmentSize += curr.length;\n        _currentSize = 0;\n        int oldLen = curr.length;\n        \n        // Let's grow segments by 50% minimum\n        int newLen = oldLen + (oldLen >> 1);\n        if (newLen < MIN_SEGMENT_LEN) {\n            newLen = MIN_SEGMENT_LEN;\n        } else if (newLen > MAX_SEGMENT_LEN) {\n            newLen = MAX_SEGMENT_LEN;\n        }\n        _currentSegment = carr(newLen);\n    }", "resultArray": "\n    private char[] resultArray()\n    {\n        if (_resultString != null) { // Can take a shortcut...\n            return _resultString.toCharArray();\n        }\n        // Do we use shared array?\n        if (_inputStart >= 0) {\n            final int len = _inputLen;\n            if (len < 1) {\n                return NO_CHARS;\n            }\n            final int start = _inputStart;\n            if (start == 0) {\n                return Arrays.copyOf(_inputBuffer, len);\n            }\n            return Arrays.copyOfRange(_inputBuffer, start, start+len);\n        }\n        // nope, not shared\n        int size = size();\n        if (size < 1) {\n            return NO_CHARS;\n        }\n        int offset = 0;\n        final char[] result = carr(size);\n        if (_segments != null) {\n            for (int i = 0, len = _segments.size(); i < len; ++i) {\n                char[] curr = _segments.get(i);\n                int currLen = curr.length;\n                System.arraycopy(curr, 0, result, offset, currLen);\n                offset += currLen;\n            }\n        }\n        System.arraycopy(_currentSegment, 0, result, offset, _currentSize);\n        return result;\n    }", "carr": "\n    private char[] carr(int len) { return new char[len]; }"}