{"nodeName": "\n    public String nodeName() {\n        return \"#comment\";\n    }", "getData": "\n    public String getData() {\n        return coreValue();\n    }", "outerHtmlHead": "\n\tvoid outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n        if (out.prettyPrint())\n            indent(accum, depth, out);\n        accum\n                .append(\"<!--\")\n                .append(getData())\n                .append(\"-->\");\n    }", "outerHtmlTail": "\n\tvoid outerHtmlTail(Appendable accum, int depth, Document.OutputSettings out) {}", "toString": "\n    public String toString() {\n        return outerHtml();\n    }", "isXmlDeclaration": "\n    public boolean isXmlDeclaration() {\n        String data = getData();\n        return (data.length() > 1 && (data.startsWith(\"!\") || data.startsWith(\"?\")));\n    }", "asXmlDeclaration": "\n    public XmlDeclaration asXmlDeclaration() {\n        String data = getData();\n        Document doc = Jsoup.parse(\"<\" + data.substring(1, data.length() -1) + \">\", baseUri(), Parser.xmlParser());\n        XmlDeclaration decl = null;\n        if (doc.childNodeSize() > 0) {\n            Element el = doc.child(0);\n            decl = new XmlDeclaration(NodeUtils.parser(doc).settings().normalizeTag(el.tagName()), data.startsWith(\"!\"));\n            decl.attributes().addAll(el.attributes());\n        }\n        return decl;\n    }"}