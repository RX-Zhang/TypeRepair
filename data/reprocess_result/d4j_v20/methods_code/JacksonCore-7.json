{"reset": "\n    protected JsonWriteContext reset(int type) {\n        _type = type;\n        _index = -1;\n        _currentName = null;\n        _gotName = false;\n        _currentValue = null;\n        if (_dups != null) { _dups.reset(); }\n        return this;\n    }", "withDupDetector": "\n    public JsonWriteContext withDupDetector(DupDetector dups) {\n        _dups = dups;\n        return this;\n    }", "getCurrentValue": "\n    public Object getCurrentValue() {\n        return _currentValue;\n    }", "setCurrentValue": "\n    public void setCurrentValue(Object v) {\n        _currentValue = v;\n    }", "createRootContext": "\n    public static JsonWriteContext createRootContext() { return createRootContext(null); }", "createChildArrayContext": "\n    public JsonWriteContext createChildArrayContext() {\n        JsonWriteContext ctxt = _child;\n        if (ctxt == null) {\n            _child = ctxt = new JsonWriteContext(TYPE_ARRAY, this, (_dups == null) ? null : _dups.child());\n            return ctxt;\n        }\n        return ctxt.reset(TYPE_ARRAY);\n    }", "createChildObjectContext": "\n    public JsonWriteContext createChildObjectContext() {\n        JsonWriteContext ctxt = _child;\n        if (ctxt == null) {\n            _child = ctxt = new JsonWriteContext(TYPE_OBJECT, this, (_dups == null) ? null : _dups.child());\n            return ctxt;\n        }\n        return ctxt.reset(TYPE_OBJECT);\n    }", "getParent": "\n    @Override public final JsonWriteContext getParent() { return _parent; }", "getCurrentName": "\n    @Override public final String getCurrentName() { return _currentName; }", "getDupDetector": "\n    public DupDetector getDupDetector() {\n        return _dups;\n    }", "writeFieldName": "\n    public int writeFieldName(String name) throws JsonProcessingException {\n        if (_gotName) {\n            return JsonWriteContext.STATUS_EXPECT_VALUE;\n        }\n        _gotName = true;\n        _currentName = name;\n        if (_dups != null) { _checkDup(_dups, name); }\n        return (_index < 0) ? STATUS_OK_AS_IS : STATUS_OK_AFTER_COMMA;\n    }", "_checkDup": "\n    private final void _checkDup(DupDetector dd, String name) throws JsonProcessingException {\n        if (dd.isDup(name)) { throw new JsonGenerationException(\"Duplicate field '\"+name+\"'\"); }\n    }", "writeValue": "\n    public int writeValue() {\n        // Most likely, object:\n        if (_type == TYPE_OBJECT) {\n            _gotName = false;\n            ++_index;\n            return STATUS_OK_AFTER_COLON;\n        }\n\n        // Ok, array?\n        if (_type == TYPE_ARRAY) {\n            int ix = _index;\n            ++_index;\n            return (ix < 0) ? STATUS_OK_AS_IS : STATUS_OK_AFTER_COMMA;\n        }\n        \n        // Nope, root context\n        // No commas within root context, but need space\n        ++_index;\n        return (_index == 0) ? STATUS_OK_AS_IS : STATUS_OK_AFTER_SPACE;\n    }", "appendDesc": "\n    protected void appendDesc(StringBuilder sb) {\n        if (_type == TYPE_OBJECT) {\n            sb.append('{');\n            if (_currentName != null) {\n                sb.append('\"');\n                // !!! TODO: Name chars should be escaped?\n                sb.append(_currentName);\n                sb.append('\"');\n            } else {\n                sb.append('?');\n            }\n            sb.append('}');\n        } else if (_type == TYPE_ARRAY) {\n            sb.append('[');\n            sb.append(getCurrentIndex());\n            sb.append(']');\n        } else {\n            // nah, ROOT:\n            sb.append(\"/\");\n        }\n    }", "toString": "\n    @Override public String toString() {\n        StringBuilder sb = new StringBuilder(64);\n        appendDesc(sb);\n        return sb.toString();\n    }"}