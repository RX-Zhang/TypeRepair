{"newParameterizedTypeWithOwner": "\n  public static ParameterizedType newParameterizedTypeWithOwner(\n      Type ownerType, Type rawType, Type... typeArguments) {\n    return new ParameterizedTypeImpl(ownerType, rawType, typeArguments);\n  }", "arrayOf": "\n  public static GenericArrayType arrayOf(Type componentType) {\n    return new GenericArrayTypeImpl(componentType);\n  }", "subtypeOf": "\n  public static WildcardType subtypeOf(Type bound) {\n    Type[] upperBounds;\n    if (bound instanceof WildcardType) {\n      upperBounds = ((WildcardType) bound).getUpperBounds();\n    } else {\n      upperBounds = new Type[] { bound };\n    }\n    return new WildcardTypeImpl(upperBounds, EMPTY_TYPE_ARRAY);\n  }", "supertypeOf": "\n  public static WildcardType supertypeOf(Type bound) {\n    Type[] lowerBounds;\n    if (bound instanceof WildcardType) {\n      lowerBounds = ((WildcardType) bound).getLowerBounds();\n    } else {\n      lowerBounds = new Type[] { bound };\n    }\n    return new WildcardTypeImpl(new Type[] { Object.class }, lowerBounds);\n  }", "canonicalize": "\n  public static Type canonicalize(Type type) {\n    if (type instanceof Class) {\n      Class<?> c = (Class<?>) type;\n      return c.isArray() ? new GenericArrayTypeImpl(canonicalize(c.getComponentType())) : c;\n\n    } else if (type instanceof ParameterizedType) {\n      ParameterizedType p = (ParameterizedType) type;\n      return new ParameterizedTypeImpl(p.getOwnerType(),\n          p.getRawType(), p.getActualTypeArguments());\n\n    } else if (type instanceof GenericArrayType) {\n      GenericArrayType g = (GenericArrayType) type;\n      return new GenericArrayTypeImpl(g.getGenericComponentType());\n\n    } else if (type instanceof WildcardType) {\n      WildcardType w = (WildcardType) type;\n      return new WildcardTypeImpl(w.getUpperBounds(), w.getLowerBounds());\n\n    } else {\n      // type is either serializable as-is or unsupported\n      return type;\n    }\n  }", "getRawType": "\n  public static Class<?> getRawType(Type type) {\n    if (type instanceof Class<?>) {\n      // type is a normal class.\n      return (Class<?>) type;\n\n    } else if (type instanceof ParameterizedType) {\n      ParameterizedType parameterizedType = (ParameterizedType) type;\n\n      // I'm not exactly sure why getRawType() returns Type instead of Class.\n      // Neal isn't either but suspects some pathological case related\n      // to nested classes exists.\n      Type rawType = parameterizedType.getRawType();\n      checkArgument(rawType instanceof Class);\n      return (Class<?>) rawType;\n\n    } else if (type instanceof GenericArrayType) {\n      Type componentType = ((GenericArrayType)type).getGenericComponentType();\n      return Array.newInstance(getRawType(componentType), 0).getClass();\n\n    } else if (type instanceof TypeVariable) {\n      // we could use the variable's bounds, but that won't work if there are multiple.\n      // having a raw type that's more general than necessary is okay\n      return Object.class;\n\n    } else if (type instanceof WildcardType) {\n      return getRawType(((WildcardType) type).getUpperBounds()[0]);\n\n    } else {\n      String className = type == null ? \"null\" : type.getClass().getName();\n      throw new IllegalArgumentException(\"Expected a Class, ParameterizedType, or \"\n          + \"GenericArrayType, but <\" + type + \"> is of type \" + className);\n    }\n  }", "equal": "\n  static boolean equal(Object a, Object b) {\n    return a == b || (a != null && a.equals(b));\n  }", "equals": "\n  public static boolean equals(Type a, Type b) {\n    if (a == b) {\n      // also handles (a == null && b == null)\n      return true;\n\n    } else if (a instanceof Class) {\n      // Class already specifies equals().\n      return a.equals(b);\n\n    } else if (a instanceof ParameterizedType) {\n      if (!(b instanceof ParameterizedType)) {\n        return false;\n      }\n\n      // TODO: save a .clone() call\n      ParameterizedType pa = (ParameterizedType) a;\n      ParameterizedType pb = (ParameterizedType) b;\n      return equal(pa.getOwnerType(), pb.getOwnerType())\n          && pa.getRawType().equals(pb.getRawType())\n          && Arrays.equals(pa.getActualTypeArguments(), pb.getActualTypeArguments());\n\n    } else if (a instanceof GenericArrayType) {\n      if (!(b instanceof GenericArrayType)) {\n        return false;\n      }\n\n      GenericArrayType ga = (GenericArrayType) a;\n      GenericArrayType gb = (GenericArrayType) b;\n      return equals(ga.getGenericComponentType(), gb.getGenericComponentType());\n\n    } else if (a instanceof WildcardType) {\n      if (!(b instanceof WildcardType)) {\n        return false;\n      }\n\n      WildcardType wa = (WildcardType) a;\n      WildcardType wb = (WildcardType) b;\n      return Arrays.equals(wa.getUpperBounds(), wb.getUpperBounds())\n          && Arrays.equals(wa.getLowerBounds(), wb.getLowerBounds());\n\n    } else if (a instanceof TypeVariable) {\n      if (!(b instanceof TypeVariable)) {\n        return false;\n      }\n      TypeVariable<?> va = (TypeVariable<?>) a;\n      TypeVariable<?> vb = (TypeVariable<?>) b;\n      return va.getGenericDeclaration() == vb.getGenericDeclaration()\n          && va.getName().equals(vb.getName());\n\n    } else {\n      // This isn't a type we support. Could be a generic array type, wildcard type, etc.\n      return false;\n    }\n  }", "hashCodeOrZero": "\n  static int hashCodeOrZero(Object o) {\n    return o != null ? o.hashCode() : 0;\n  }", "typeToString": "\n  public static String typeToString(Type type) {\n    return type instanceof Class ? ((Class<?>) type).getName() : type.toString();\n  }", "getGenericSupertype": "\n  static Type getGenericSupertype(Type context, Class<?> rawType, Class<?> toResolve) {\n    if (toResolve == rawType) {\n      return context;\n    }\n\n    // we skip searching through interfaces if unknown is an interface\n    if (toResolve.isInterface()) {\n      Class<?>[] interfaces = rawType.getInterfaces();\n      for (int i = 0, length = interfaces.length; i < length; i++) {\n        if (interfaces[i] == toResolve) {\n          return rawType.getGenericInterfaces()[i];\n        } else if (toResolve.isAssignableFrom(interfaces[i])) {\n          return getGenericSupertype(rawType.getGenericInterfaces()[i], interfaces[i], toResolve);\n        }\n      }\n    }\n\n    // check our supertypes\n    if (!rawType.isInterface()) {\n      while (rawType != Object.class) {\n        Class<?> rawSupertype = rawType.getSuperclass();\n        if (rawSupertype == toResolve) {\n          return rawType.getGenericSuperclass();\n        } else if (toResolve.isAssignableFrom(rawSupertype)) {\n          return getGenericSupertype(rawType.getGenericSuperclass(), rawSupertype, toResolve);\n        }\n        rawType = rawSupertype;\n      }\n    }\n\n    // we can't resolve this further\n    return toResolve;\n  }", "getSupertype": "\n  static Type getSupertype(Type context, Class<?> contextRawType, Class<?> supertype) {\n    checkArgument(supertype.isAssignableFrom(contextRawType));\n    return resolve(context, contextRawType,\n        $Gson$Types.getGenericSupertype(context, contextRawType, supertype));\n  }", "getArrayComponentType": "\n  public static Type getArrayComponentType(Type array) {\n    return array instanceof GenericArrayType\n        ? ((GenericArrayType) array).getGenericComponentType()\n        : ((Class<?>) array).getComponentType();\n  }", "getCollectionElementType": "\n  public static Type getCollectionElementType(Type context, Class<?> contextRawType) {\n    Type collectionType = getSupertype(context, contextRawType, Collection.class);\n\n    if (collectionType instanceof WildcardType) {\n      collectionType = ((WildcardType)collectionType).getUpperBounds()[0];\n    }\n    if (collectionType instanceof ParameterizedType) {\n      return ((ParameterizedType) collectionType).getActualTypeArguments()[0];\n    }\n    return Object.class;\n  }", "getMapKeyAndValueTypes": "\n  public static Type[] getMapKeyAndValueTypes(Type context, Class<?> contextRawType) {\n    /*\n     * Work around a problem with the declaration of java.util.Properties. That\n     * class should extend Hashtable<String, String>, but it's declared to\n     * extend Hashtable<Object, Object>.\n     */\n    if (context == Properties.class) {\n      return new Type[] { String.class, String.class }; // TODO: test subclasses of Properties!\n    }\n\n    Type mapType = getSupertype(context, contextRawType, Map.class);\n    // TODO: strip wildcards?\n    if (mapType instanceof ParameterizedType) {\n      ParameterizedType mapParameterizedType = (ParameterizedType) mapType;\n      return mapParameterizedType.getActualTypeArguments();\n    }\n    return new Type[] { Object.class, Object.class };\n  }", "resolve": "\n  public static Type resolve(Type context, Class<?> contextRawType, Type toResolve) {\n    return resolve(context, contextRawType, toResolve, new HashSet<TypeVariable>());\n  }", "resolveTypeVariable": "\n  static Type resolveTypeVariable(Type context, Class<?> contextRawType, TypeVariable<?> unknown) {\n    Class<?> declaredByRaw = declaringClassOf(unknown);\n\n    // we can't reduce this further\n    if (declaredByRaw == null) {\n      return unknown;\n    }\n\n    Type declaredBy = getGenericSupertype(context, contextRawType, declaredByRaw);\n    if (declaredBy instanceof ParameterizedType) {\n      int index = indexOf(declaredByRaw.getTypeParameters(), unknown);\n      return ((ParameterizedType) declaredBy).getActualTypeArguments()[index];\n    }\n\n    return unknown;\n  }", "indexOf": "\n  private static int indexOf(Object[] array, Object toFind) {\n    for (int i = 0, length = array.length; i < length; i++) {\n      if (toFind.equals(array[i])) {\n        return i;\n      }\n    }\n    throw new NoSuchElementException();\n  }", "declaringClassOf": "\n  private static Class<?> declaringClassOf(TypeVariable<?> typeVariable) {\n    GenericDeclaration genericDeclaration = typeVariable.getGenericDeclaration();\n    return genericDeclaration instanceof Class\n        ? (Class<?>) genericDeclaration\n        : null;\n  }", "checkNotPrimitive": "\n  static void checkNotPrimitive(Type type) {\n    checkArgument(!(type instanceof Class<?>) || !((Class<?>) type).isPrimitive());\n  }", "getActualTypeArguments": "\n    public Type[] getActualTypeArguments() {\n      return typeArguments.clone();\n    }", "getOwnerType": "\n    public Type getOwnerType() {\n      return ownerType;\n    }", "hashCode": "\n    @Override public int hashCode() {\n      return Arrays.hashCode(typeArguments)\n          ^ rawType.hashCode()\n          ^ hashCodeOrZero(ownerType);\n    }", "toString": "\n    @Override public String toString() {\n      int length = typeArguments.length;\n      if (length == 0) {\n        return typeToString(rawType);\n      }\n\n      StringBuilder stringBuilder = new StringBuilder(30 * (length + 1));\n      stringBuilder.append(typeToString(rawType)).append(\"<\").append(typeToString(typeArguments[0]));\n      for (int i = 1; i < length; i++) {\n        stringBuilder.append(\", \").append(typeToString(typeArguments[i]));\n      }\n      return stringBuilder.append(\">\").toString();\n    }", "getGenericComponentType": "\n    public Type getGenericComponentType() {\n      return componentType;\n    }", "getUpperBounds": "\n    public Type[] getUpperBounds() {\n      return new Type[] { upperBound };\n    }", "getLowerBounds": "\n    public Type[] getLowerBounds() {\n      return lowerBound != null ? new Type[] { lowerBound } : EMPTY_TYPE_ARRAY;\n    }"}