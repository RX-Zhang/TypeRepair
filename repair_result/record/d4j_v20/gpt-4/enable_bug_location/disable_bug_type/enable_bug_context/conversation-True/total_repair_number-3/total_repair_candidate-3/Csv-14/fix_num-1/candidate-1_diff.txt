--- 
+++ 
@@ -36,7 +36,7 @@
             char c = value.charAt(pos);
 
             // RFC4180 (https://tools.ietf.org/html/rfc4180) TEXTDATA =  %x20-21 / %x23-2B / %x2D-7E
-            if (newRecord && (c < '0' || c > '9' && c < 'A' || c > 'Z' && c < 'a' || c > 'z')) {
+            if (newRecord && (c < '0' || (c > '9' && c < 'A') || (c > 'Z' && c < 'a') || c > 'z')) {
                 quote = true;
             } else if (c <= COMMENT) {
                 // Some other chars at the start of a value caused the parser to fail, so for now
@@ -84,6 +84,9 @@
     // we hit something that needed encapsulation
     out.append(quoteChar);
 
+    final boolean hasEscape = isEscapeCharacterSet();
+    final char escapeChar = hasEscape ? getEscapeCharacter().charValue() : 0;
+
     // Pick up where we left off: pos should be positioned on the first character that caused
     // the need for encapsulation.
     while (pos < end) {
@@ -92,10 +95,23 @@
             // write out the chunk up until this point
 
             // add 1 to the length to write out the encapsulator also
-            out.append(value, start, pos + 1);
+            out.append(value, start, pos);
             // put the next starting position on the encapsulator so we will
             // write it out again with the next string (effectively doubling it)
-            start = pos;
+            if (hasEscape) {
+                out.append(escapeChar);
+                out.append(c);
+            } else {
+                out.append(c);
+                out.append(c);
+            }
+            start = pos + 1;
+        } else if (hasEscape && c == escapeChar) {
+            // escape any escape characters in the value
+            out.append(value, start, pos);
+            out.append(escapeChar);
+            out.append(escapeChar);
+            start = pos + 1;
         }
         pos++;
     }
@@ -104,3 +120,4 @@
     out.append(value, start, pos);
     out.append(quoteChar);
 }
+
