--- 
+++ 
@@ -14,13 +14,13 @@
         int signatureLength = in.read(signature);
         in.reset();
         if (ZipArchiveInputStream.matches(signature, signatureLength)) {
-            return new ZipArchiveInputStream(in);
+            return createArchiveInputStream(ArchiveStreamFactory.ZIP, in);
         } else if (JarArchiveInputStream.matches(signature, signatureLength)) {
-            return new JarArchiveInputStream(in);
+            return createArchiveInputStream(ArchiveStreamFactory.JAR, in);
         } else if (ArArchiveInputStream.matches(signature, signatureLength)) {
-            return new ArArchiveInputStream(in);
+            return createArchiveInputStream(ArchiveStreamFactory.AR, in);
         } else if (CpioArchiveInputStream.matches(signature, signatureLength)) {
-            return new CpioArchiveInputStream(in);
+            return createArchiveInputStream(ArchiveStreamFactory.CPIO, in);
         }
 
         // Dump needs a bigger buffer to check the signature;
@@ -29,7 +29,7 @@
         signatureLength = in.read(dumpsig);
         in.reset();
         if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) {
-            return new DumpArchiveInputStream(in);
+            return createArchiveInputStream(ArchiveStreamFactory.DUMP, in);
         }
 
         // Tar needs an even bigger buffer to check the signature; read the first block
@@ -38,7 +38,7 @@
         signatureLength = in.read(tarheader);
         in.reset();
         if (TarArchiveInputStream.matches(tarheader, signatureLength)) {
-            return new TarArchiveInputStream(in);
+            return createArchiveInputStream(ArchiveStreamFactory.TAR, in);
         }
         // COMPRESS-117 - improve auto-recognition
         if (signatureLength >= 512) {
@@ -46,7 +46,7 @@
                 TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader));
                 // COMPRESS-191 - verify the header checksum
                 tais.getNextEntry();
-                    return new TarArchiveInputStream(in);
+                return createArchiveInputStream(ArchiveStreamFactory.TAR, in);
             } catch (Exception e) { // NOPMD
                 // can generate IllegalArgumentException as well
                 // as IOException
@@ -60,3 +60,4 @@
 
     throw new ArchiveException("No Archiver found for the stream signature");
 }
+
