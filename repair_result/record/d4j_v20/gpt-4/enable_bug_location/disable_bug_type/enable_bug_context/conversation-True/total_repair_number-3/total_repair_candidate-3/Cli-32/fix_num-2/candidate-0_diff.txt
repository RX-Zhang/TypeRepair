--- 
+++ 
@@ -1,42 +1,45 @@
 protected int findWrapPos(String text, int width, int startPos)
 {
     int pos;
-    
+
     // the line ends before the max wrap pos or a new line char found
-    if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
-            || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
-    {
-        return pos + 1;
+    int nextLine = text.indexOf('\n', startPos);
+    int nextTab = text.indexOf('\t', startPos);
+
+    if (nextLine != -1 && nextLine <= startPos + width) {
+        return nextLine + 1;
     }
-    else if (startPos + width >= text.length())
+    if (nextTab != -1 && nextTab <= startPos + width) {
+        return nextTab + 1;
+    }
+
+    if (startPos + width >= text.length())
     {
         return -1;
     }
-
 
     // look for the last whitespace character before startPos+width
     pos = startPos + width;
 
     char c;
 
-    while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
-            && (c != '\n') && (c != '\r'))
+    while (pos > startPos && pos < text.length() && (c = text.charAt(pos)) != ' ' && c != '\n' && c != '\r')
     {
         --pos;
     }
 
-    // if we found it - just return
     if (pos > startPos)
     {
         return pos;
     }
-    
-    // if we didn't find one, simply chop at startPos+width
+
+    // no whitespace found, so force a break at startPos + width
     pos = startPos + width;
-    while ((pos <= text.length()) && ((c = text.charAt(pos)) != ' ')
-           && (c != '\n') && (c != '\r'))
+    while (pos < text.length() && (c = text.charAt(pos)) != ' ' && c != '\n' && c != '\r')
     {
         ++pos;
-    }        
+    }
+
     return pos == text.length() ? -1 : pos;
 }
+
