--- 
+++ 
@@ -3,8 +3,8 @@
     int pos;
     
     // the line ends before the max wrap pos or a new line char found
-    if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
-            || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
+    if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= startPos + width)
+            || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= startPos + width))
     {
         return pos + 1;
     }
@@ -13,13 +13,12 @@
         return -1;
     }
 
-
     // look for the last whitespace character before startPos+width
     pos = startPos + width;
 
     char c;
 
-    while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
+    while ((pos > startPos) && ((c = text.charAt(pos)) != ' ')
             && (c != '\n') && (c != '\r'))
     {
         --pos;
@@ -32,11 +31,28 @@
     }
     
     // if we didn't find one, simply chop at startPos+width
-    pos = startPos + width;
-    while ((pos <= text.length()) && ((c = text.charAt(pos)) != ' ')
+    = startPos + width;
+    // ensure pos is less than text.length() before charAt call to avoid IndexOutOfBoundsException
+    while ((pos < text.length()) && ((c = text.charAt(pos)) != ' ')
            && (c != '\n') && (c != '\r'))
     {
         ++pos;
-    }        
-    return pos == text.length() ? -1 : pos;
+    }
+    
+    // trim trailing whitespace if any
+    String trimmedText = rtrim(text.substring(startPos, pos));
+    int trimmedLength = trimmedText.length();
+
+    if (trimmedLength == 0)
+    {
+        return -1;
+    }
+
+    if (pos == text.length())
+    {
+        return -1;
+    }
+    
+    return startPos + trimmedLength;
 }
+
