--- 
+++ 
@@ -9,7 +9,7 @@
         while (numToSkip > 0) {
             long skipped = skip(numToSkip);
             if (skipped <= 0) {
-                throw new RuntimeException("failed to skip current tar entry");
+                throw new IOException("failed to skip current tar entry");
             }
             numToSkip -= skipped;
         }
@@ -19,7 +19,7 @@
 
     byte[] headerBuf = getRecord();
 
-    if (hasHitEOF) {
+    if (hasHitEOF || headerBuf == null) {
         currEntry = null;
         return null;
     }
@@ -30,38 +30,40 @@
 
     if (currEntry.isGNULongNameEntry()) {
         // read in the name
-        StringBuffer longName = new StringBuffer();
+        StringBuilder longName = new StringBuilder();
         byte[] buf = new byte[SMALL_BUFFER_SIZE];
         int length = 0;
-        while ((length = read(buf)) >= 0) {
-            longName.append(new String(buf, 0, length));
+        while ((length = read(buf, 0, buf.length)) > 0) {
+            longName.append(new String(buf, 0, length, "ISO-8859-1"));
         }
-        getNextEntry();
-        if (currEntry == null) {
-            // Bugzilla: 40334
+        // Now, consume the next entry which should contain the real entry.
+        TarArchiveEntry nextEntry = getNextTarEntry();
+        if (nextEntry == null) {
             // Malformed tar file - long entry name not followed by entry
             return null;
         }
-        // remove trailing null terminator
-        if (longName.length() > 0
-            && longName.charAt(longName.length() - 1) == 0) {
-            longName.deleteCharAt(longName.length() - 1);
+        currEntry = nextEntry;
+        // remove trailing null terminator if present
+        int lnLen = longName.length();
+        if (lnLen > 0 && longName.charAt(lnLen - 1) == 0) {
+            longName.deleteCharAt(lnLen - 1);
         }
         currEntry.setName(longName.toString());
+        entrySize = currEntry.getSize();
+        entryOffset = 0;
     }
 
-    if (currEntry.isPaxHeader()){ // Process Pax headers
+    if (currEntry.isPaxHeader()) { // Process Pax headers
         paxHeaders();
     }
 
-    if (currEntry.isGNUSparse()){ // Process sparse files
+    if (currEntry.isGNUSparse()) { // Process sparse files
         readGNUSparse();
     }
 
-    // If the size of the next element in the archive has changed
-    // due to a new size being reported in the posix header
-    // information, we update entrySize here so that it contains
-    // the correct value.
+    // If the size of the entry has changed due to Pax headers or other adjustments,
+    // update entrySize accordingly.
     entrySize = currEntry.getSize();
     return currEntry;
 }
+
