--- 
+++ 
@@ -8,38 +8,24 @@
   // This is described in Draft 2 of the ES4 spec,
   // Section 3.4.7: Subtyping Function Types.
 
-  // this.returnType <: that.returnType (covariant)
-  if (!this.returnType.isSubtype(that.returnType)) {
+  // Covariant return type: this.returnType <: that.returnType
+  if (!that.returnType.isSubtype(this.returnType)) {
     return false;
   }
 
-  // that.paramType[i] <: this.paramType[i] (contravariant)
+  // Contravariant parameter types:
+  // that.paramType[i] <: this.paramType[i]
   //
-  // If this.paramType[i] is required,
-  // then that.paramType[i] is required.
-  //
-  // In theory, the "required-ness" should work in the other direction as
-  // well. In other words, if we have
-  //
-  // function f(number, number) {}
-  // function g(number) {}
-  //
-  // Then f *should* not be a subtype of g, and g *should* not be
-  // a subtype of f. But in practice, we do not implement it this way.
-  // We want to support the use case where you can pass g where f is
-  // expected, and pretend that g ignores the second argument.
-  // That way, you can have a single "no-op" function, and you don't have
-  // to create a new no-op function for every possible type signature.
-  //
-  // So, in this case, g < f, but f !< g
-  Node thisParam = parameters.getFirstChild();
+  // Check parameters contravariantly:
+  Node thisParam = this.parameters.getFirstChild();
   Node thatParam = that.parameters.getFirstChild();
+
   while (thisParam != null && thatParam != null) {
     JSType thisParamType = thisParam.getJSType();
     JSType thatParamType = thatParam.getJSType();
+
     if (thisParamType != null) {
-      if (thatParamType == null ||
-          !thatParamType.isSubtype(thisParamType)) {
+      if (thatParamType == null || !thisParamType.isSubtype(thatParamType)) {
         return false;
       }
     }
@@ -47,14 +33,12 @@
     boolean thisIsVarArgs = thisParam.isVarArgs();
     boolean thatIsVarArgs = thatParam.isVarArgs();
 
-    // "that" can't be a supertype, because it's missing a required argument.
-      // NOTE(nicksantos): In our type system, we use {function(...?)} and
-      // {function(...NoType)} to to indicate that arity should not be
-      // checked. Strictly speaking, this is not a correct formulation,
-      // because now a sub-function can required arguments that are var_args
-      // in the super-function. So we special-case this.
+    // If "that" does not have a required parameter that "this" requires, fail
+    if (thisIsVarArgs && !thatIsVarArgs) {
+      return false;
+    }
 
-    // don't advance if we have variable arguments
+    // Advance nodes unless var args argument is present, in which case don't advance
     if (!thisIsVarArgs) {
       thisParam = thisParam.getNext();
     }
@@ -62,14 +46,19 @@
       thatParam = thatParam.getNext();
     }
 
-    // both var_args indicates the end
     if (thisIsVarArgs && thatIsVarArgs) {
+      // Both have var args at this position means parameter checking ends
       thisParam = null;
       thatParam = null;
     }
   }
 
-  // "that" can't be a supertype, because it's missing a required arguement.
+  // "that" cannot be a supertype if it has fewer parameters than "this" (other parameters remain)
+  // We already handled varargs above, so if thisParam != null then "this" has required parameters missing in "that"
+  if (thisParam != null) {
+    return false;
+  }
 
   return true;
 }
+
