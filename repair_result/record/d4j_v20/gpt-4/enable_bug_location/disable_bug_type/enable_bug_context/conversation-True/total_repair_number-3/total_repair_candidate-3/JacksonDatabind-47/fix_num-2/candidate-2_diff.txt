--- 
+++ 
@@ -3,14 +3,7 @@
 {
     JavaType type = baseType;
     final TypeFactory tf = config.getTypeFactory();
-    
-    // 10-Oct-2015, tatu: For 2.7, we'll need to delegate back to
-    //    now-deprecated secondary methods; this because while
-    //    direct sub-class not yet retrofitted may only override
-    //    those methods. With 2.8 or later we may consider removal
-    //    of these methods
 
-    
     // Ok: start by refining the main type itself; common to all types
     Class<?> serClass = findSerializationType(a);
     if (serClass != null) {
@@ -22,7 +15,16 @@
             try {
                 // 11-Oct-2015, tatu: For deser, we call `TypeFactory.constructSpecializedType()`,
                 //   may be needed here too in future?
+                Class<?> currRaw = type.getRawClass();
+                if (currRaw.isAssignableFrom(serClass)) { // specialization (narrowing)
+                    type = tf.constructSpecializedType(type, serClass);
+                } else if (serClass.isAssignableFrom(currRaw)) { // generalization (widening)
                     type = tf.constructGeneralizedType(type, serClass);
+                } else {
+                    throw new JsonMappingException(null,
+                            String.format("Failed to widen type %s with annotation (value %s), from '%s': types not related",
+                                    type, serClass.getName(), a.getName()));
+                }
             } catch (IllegalArgumentException iae) {
                 throw new JsonMappingException(null,
                         String.format("Failed to widen type %s with annotation (value %s), from '%s': %s",
@@ -46,10 +48,10 @@
                     // 19-May-2016, tatu: As per [databind#1231], [databind#1178] may need to actually
                     //   specialize (narrow) type sometimes, even if more commonly opposite
                     //   is needed.
-                    if (keyClass.isAssignableFrom(currRaw)) { // common case
+                    if (currRaw.isAssignableFrom(keyClass)) { // specialization, ok as well
+                        keyType = tf.constructSpecializedType(keyType, keyClass);
+                    } else if (keyClass.isAssignableFrom(currRaw)) { // common case
                         keyType = tf.constructGeneralizedType(keyType, keyClass);
-                    } else if (currRaw.isAssignableFrom(keyClass)) { // specialization, ok as well
-                        keyType = tf.constructSpecializedType(keyType, keyClass);
                     } else {
                         throw new JsonMappingException(null,
                                 String.format("Can not refine serialization key type %s into %s; types not related",
@@ -69,34 +71,35 @@
     JavaType contentType = type.getContentType();
     if (contentType != null) { // collection[like], map[like], array, reference
         // And then value types for all containers:
-       Class<?> contentClass = findSerializationContentType(a, contentType);
-       if (contentClass != null) {
-           if (contentType.hasRawClass(contentClass)) {
-               contentType = contentType.withStaticTyping();
-           } else {
-               // 03-Apr-2016, tatu: As per [databind#1178], may need to actually
-               //   specialize (narrow) type sometimes, even if more commonly opposite
-               //   is needed.
-               Class<?> currRaw = contentType.getRawClass();
-               try {
-                   if (contentClass.isAssignableFrom(currRaw)) { // common case
-                       contentType = tf.constructGeneralizedType(contentType, contentClass);
-                   } else if (currRaw.isAssignableFrom(contentClass)) { // specialization, ok as well
-                       contentType = tf.constructSpecializedType(contentType, contentClass);
-                   } else {
-                       throw new JsonMappingException(null,
-                               String.format("Can not refine serialization content type %s into %s; types not related",
-                                       contentType, contentClass.getName()));
-                   }
-               } catch (IllegalArgumentException iae) { // shouldn't really happen
-                   throw new JsonMappingException(null,
-                           String.format("Internal error: failed to refine value type of %s with concrete-type annotation (value %s), from '%s': %s",
-                                   type, contentClass.getName(), a.getName(), iae.getMessage()),
-                                   iae);
-               }
-           }
-           type = type.withContentType(contentType);
-       }
+        Class<?> contentClass = findSerializationContentType(a, contentType);
+        if (contentClass != null) {
+            if (contentType.hasRawClass(contentClass)) {
+                contentType = contentType.withStaticTyping();
+            } else {
+                // 03-Apr-2016, tatu: As per [databind#1178], may need to actually
+                //   specialize (narrow) type sometimes, even if more commonly opposite
+                //   is needed.
+                Class<?> currRaw = contentType.getRawClass();
+                try {
+                    if (currRaw.isAssignableFrom(contentClass)) { // specialization, ok as well
+                        contentType = tf.constructSpecializedType(contentType, contentClass);
+                    } else if (contentClass.isAssignableFrom(currRaw)) { // common case
+                        contentType = tf.constructGeneralizedType(contentType, contentClass);
+                    } else {
+                        throw new JsonMappingException(null,
+                                String.format("Can not refine serialization content type %s into %s; types not related",
+                                        contentType, contentClass.getName()));
+                    }
+                } catch (IllegalArgumentException iae) { // shouldn't really happen
+                    throw new JsonMappingException(null,
+                            String.format("Internal error: failed to refine value type of %s with concrete-type annotation (value %s), from '%s': %s",
+                                    type, contentClass.getName(), a.getName(), iae.getMessage()),
+                                    iae);
+                }
+            }
+            type = type.withContentType(contentType);
+        }
     }
     return type;
 }
+
