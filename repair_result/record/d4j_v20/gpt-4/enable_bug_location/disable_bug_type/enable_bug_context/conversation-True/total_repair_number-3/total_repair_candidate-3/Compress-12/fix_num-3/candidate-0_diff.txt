--- 
+++ 
@@ -30,31 +30,40 @@
 
     if (currEntry.isGNULongNameEntry()) {
         // read in the name
-        StringBuffer longName = new StringBuffer();
+        StringBuilder longName = new StringBuilder();
         byte[] buf = new byte[SMALL_BUFFER_SIZE];
         int length = 0;
-        while ((length = read(buf)) >= 0) {
-            longName.append(new String(buf, 0, length));
+        // Read the long name fully, but respecting entry size
+        long numToRead = entrySize;
+        while (numToRead > 0) {
+            int toRead = (int) Math.min(buf.length, numToRead);
+            length = read(buf, 0, toRead);
+            if (length < 0) {
+                break;
+            }
+            longName.append(new String(buf, 0, length, "UTF-8"));
+            numToRead -= length;
         }
-        getNextEntry();
+        // Move to next entry after reading long name
+        currEntry = (TarArchiveEntry) getNextEntry();
         if (currEntry == null) {
             // Bugzilla: 40334
             // Malformed tar file - long entry name not followed by entry
             return null;
         }
         // remove trailing null terminator
-        if (longName.length() > 0
-            && longName.charAt(longName.length() - 1) == 0) {
-            longName.deleteCharAt(longName.length() - 1);
+        int lastCharIdx = longName.length() - 1;
+        if (lastCharIdx >= 0 && longName.charAt(lastCharIdx) == '\0') {
+            longName.deleteCharAt(lastCharIdx);
         }
         currEntry.setName(longName.toString());
     }
 
-    if (currEntry.isPaxHeader()){ // Process Pax headers
+    if (currEntry.isPaxHeader()) { // Process Pax headers
         paxHeaders();
     }
 
-    if (currEntry.isGNUSparse()){ // Process sparse files
+    if (currEntry.isGNUSparse()) { // Process sparse files
         readGNUSparse();
     }
 
@@ -65,3 +74,4 @@
     entrySize = currEntry.getSize();
     return currEntry;
 }
+
