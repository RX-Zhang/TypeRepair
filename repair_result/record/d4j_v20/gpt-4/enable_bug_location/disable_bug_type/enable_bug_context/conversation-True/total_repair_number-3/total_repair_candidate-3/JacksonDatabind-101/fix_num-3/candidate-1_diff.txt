--- 
+++ 
@@ -1,10 +1,6 @@
 protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p, DeserializationContext ctxt)
     throws IOException
 {
-    // 01-Dec-2016, tatu: Note: This IS legal to call, but only when unwrapped
-    //    value itself is NOT passed via `CreatorProperty` (which isn't supported).
-    //    Ok however to pass via setter or field.
-    
     final PropertyBasedCreator creator = _propertyBasedCreator;
     PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);
 
@@ -19,8 +15,8 @@
         SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);
         if (creatorProp != null) {
             // Last creator property to set?
-            if (buffer.assignParameter(creatorProp,
-                    _deserializeWithErrorWrapping(p, ctxt, creatorProp))) {
+            Object value = _deserializeWithErrorWrapping(p, ctxt, creatorProp);
+            if (buffer.assignParameter(creatorProp, value)) {
                 t = p.nextToken(); // to move to following FIELD_NAME/END_OBJECT
                 Object bean;
                 try {
@@ -28,17 +24,20 @@
                 } catch (Exception e) {
                     bean = wrapInstantiationProblem(e, ctxt);
                 }
+                if (bean == null) {
+                    return ctxt.handleInstantiationProblem(handledType(), null,
+                            _creatorReturnedNullException());
+                }
                 // [databind#631]: Assign current value, to be accessible by custom serializers
                 p.setCurrentValue(bean);
                 // if so, need to copy all remaining tokens into buffer
                 while (t == JsonToken.FIELD_NAME) {
                     // NOTE: do NOT skip name as it needs to be copied; `copyCurrentStructure` does that
+                    tokens.writeFieldName(p.getCurrentName());
                     p.nextToken();
                     tokens.copyCurrentStructure(p);
                     t = p.nextToken();
                 }
-                // 28-Aug-2018, tatu: Let's add sanity check here, easier to catch off-by-some
-                //    problems if we maintain invariants
                 tokens.writeEndObject();
                 if (bean.getClass() != _beanType.getRawClass()) {
                     // !!! 08-Jul-2011, tatu: Could probably support; but for now
@@ -66,12 +65,8 @@
             handleIgnoredProperty(p, ctxt, handledType(), propName);
             continue;
         }
-        // 29-Nov-2016, tatu: probably should try to avoid sending content
-        //    both to any setter AND buffer... but, for now, the only thing
-        //    we can do.
-        // how about any setter? We'll get copies but...
         if (_anySetter == null) {
-            // but... others should be passed to unwrapped property deserializers
+            // just buffer it for unwrapped handling
             tokens.writeFieldName(propName);
             tokens.copyCurrentStructure(p);
         } else {
@@ -97,5 +92,10 @@
         wrapInstantiationProblem(e, ctxt);
         return null; // never gets here
     }
+    if (bean == null) {
+        return ctxt.handleInstantiationProblem(handledType(), null,
+                _creatorReturnedNullException());
+    }
     return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
 }
+
