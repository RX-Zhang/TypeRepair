--- 
+++ 
@@ -2,7 +2,7 @@
     // NOTE: Version 1.0 of Caverphone is easily derivable from this code 
     // by commenting out the 2.0 lines and adding in the 1.0 lines
 
-    if( txt == null || txt.length() == 0 ) {
+    if (txt == null || txt.length() == 0) {
         return "1111111111";
     }
 
@@ -13,14 +13,14 @@
     txt = txt.replaceAll("[^a-z]", "");
 
     // 2.5. Remove final e
-    txt = txt.replaceAll("e$", "");             // 2.0 only
+    txt = txt.replaceAll("e$", ""); // 2.0 only
 
     // 3. Handle various start options
     txt = txt.replaceAll("^cough", "cou2f");
     txt = txt.replaceAll("^rough", "rou2f");
     txt = txt.replaceAll("^tough", "tou2f");
-    txt = txt.replaceAll("^enough", "enou2f");  // 2.0 only
-    txt = txt.replaceAll("^trough", "trou2f");  // 2.0 only - note the spec says ^enough here again, c+p error I assume
+    txt = txt.replaceAll("^enough", "enou2f"); // 2.0 only
+    txt = txt.replaceAll("^trough", "trou2f"); // 2.0 only - note the spec says ^enough here again, c+p error I assume
     txt = txt.replaceAll("^gn", "2n");
 
     // End 
@@ -46,10 +46,10 @@
     txt = txt.replaceAll("z", "s");
     txt = txt.replaceAll("^[aeiou]", "A");
     txt = txt.replaceAll("[aeiou]", "3");
-    txt = txt.replaceAll("j", "y");        // 2.0 only
-    txt = txt.replaceAll("^y3", "Y3");     // 2.0 only
-    txt = txt.replaceAll("^y", "A");       // 2.0 only
-    txt = txt.replaceAll("y", "3");        // 2.0 only
+    txt = txt.replaceAll("j", "y"); // 2.0 only
+    txt = txt.replaceAll("^y3", "Y3"); // 2.0 only
+    txt = txt.replaceAll("^y", "A"); // 2.0 only
+    txt = txt.replaceAll("y", "3"); // 2.0 only
     txt = txt.replaceAll("3gh3", "3kh3");
     txt = txt.replaceAll("gh", "22");
     txt = txt.replaceAll("g", "k");
@@ -61,33 +61,37 @@
     txt = txt.replaceAll("m+", "M");
     txt = txt.replaceAll("n+", "N");
     txt = txt.replaceAll("w3", "W3");
-    //txt = txt.replaceAll("wy", "Wy");    // 1.0 only
+    //txt = txt.replaceAll("wy", "Wy"); // 1.0 only
     txt = txt.replaceAll("wh3", "Wh3");
-    txt = txt.replaceAll("w$", "3");       // 2.0 only
-    //txt = txt.replaceAll("why", "Why");  // 1.0 only
+    txt = txt.replaceAll("w$", "3"); // 2.0 only
+    //txt = txt.replaceAll("why", "Why"); // 1.0 only
     txt = txt.replaceAll("w", "2");
     txt = txt.replaceAll("^h", "A");
     txt = txt.replaceAll("h", "2");
     txt = txt.replaceAll("r3", "R3");
-    txt = txt.replaceAll("r$", "3");       // 2.0 only
-    //txt = txt.replaceAll("ry", "Ry");    // 1.0 only
+    txt = txt.replaceAll("r$", "3"); // 2.0 only
+    //txt = txt.replaceAll("ry", "Ry"); // 1.0 only
     txt = txt.replaceAll("r", "2");
     txt = txt.replaceAll("l3", "L3");
-    txt = txt.replaceAll("l$", "3");       // 2.0 only
-    //txt = txt.replaceAll("ly", "Ly");    // 1.0 only
+    txt = txt.replaceAll("l$", "3"); // 2.0 only
+    //txt = txt.replaceAll("ly", "Ly"); // 1.0 only
     txt = txt.replaceAll("l", "2");
-    //txt = txt.replaceAll("j", "y");      // 1.0 only
-    //txt = txt.replaceAll("y3", "Y3");    // 1.0 only
-    //txt = txt.replaceAll("y", "2");      // 1.0 only
+    //txt = txt.replaceAll("j", "y"); // 1.0 only
+    //txt = txt.replaceAll("y3", "Y3"); // 1.0 only
+    //txt = txt.replaceAll("y", "2"); // 1.0 only
 
     // 5. Handle removals
     txt = txt.replaceAll("2", "");
-    txt = txt.replaceAll("3$", "A");       // 2.0 only
+    txt = txt.replaceAll("3$", "A"); // 2.0 only
     txt = txt.replaceAll("3", "");
 
     // 6. put ten 1s on the end
-    txt = txt + "111111" + "1111";        // 1.0 only has 6 1s
+    txt = txt + "111111" + "1111"; // 1.0 only has 6 1s
 
-    // 7. take the first six characters as the code
-    return txt.substring(0, 10);          // 1.0 truncates to 6
+    // 7. take the first ten characters as the code
+    if (txt.length() < 10) {
+        txt = String.format("%-10s", txt).replace(' ', '1'); // Pad with '1' if less than 10 characters
+    }
+    return txt.substring(0, 10); // 1.0 truncates to 6
 }
+
