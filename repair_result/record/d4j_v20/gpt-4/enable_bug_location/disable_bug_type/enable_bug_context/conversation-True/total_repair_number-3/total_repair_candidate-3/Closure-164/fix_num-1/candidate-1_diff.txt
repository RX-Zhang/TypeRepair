--- 
+++ 
@@ -47,29 +47,40 @@
     boolean thisIsVarArgs = thisParam.isVarArgs();
     boolean thatIsVarArgs = thatParam.isVarArgs();
 
-    // "that" can't be a supertype, because it's missing a required argument.
-      // NOTE(nicksantos): In our type system, we use {function(...?)} and
-      // {function(...NoType)} to to indicate that arity should not be
-      // checked. Strictly speaking, this is not a correct formulation,
-      // because now a sub-function can required arguments that are var_args
-      // in the super-function. So we special-case this.
-
-    // don't advance if we have variable arguments
-    if (!thisIsVarArgs) {
-      thisParam = thisParam.getNext();
-    }
-    if (!thatIsVarArgs) {
-      thatParam = thatParam.getNext();
+    // If "that" is missing a required argument, it can't be a supertype.
+    if (!thisIsVarArgs && thatIsVarArgs) {
+      // that is varargs but this param is not varargs,
+      // so that can accept more arguments, so OK to continue
+    } else if (thisIsVarArgs && !thatIsVarArgs) {
+      // this is varargs but that is not, so that is missing args
+      return false;
     }
 
     // both var_args indicates the end
     if (thisIsVarArgs && thatIsVarArgs) {
       thisParam = null;
       thatParam = null;
+    } else {
+      if (!thisIsVarArgs) {
+        thisParam = thisParam.getNext();
+      }
+      if (!thatIsVarArgs) {
+        thatParam = thatParam.getNext();
+      }
     }
   }
 
-  // "that" can't be a supertype, because it's missing a required arguement.
+  // If "that" has more required parameters, it can't be a supertype.
+  if (thatParam != null) {
+    // Check if the remaining parameters of "that" are optional or varargs
+    while (thatParam != null) {
+      if (!thatParam.isOptionalArg() && !thatParam.isVarArgs()) {
+        return false;
+      }
+      thatParam = thatParam.getNext();
+    }
+  }
 
   return true;
 }
+
