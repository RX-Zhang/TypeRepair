--- 
+++ 
@@ -14,42 +14,36 @@
         int signatureLength = in.read(signature);
         in.reset();
         if (ZipArchiveInputStream.matches(signature, signatureLength)) {
-            return new ZipArchiveInputStream(in);
+            return createArchiveInputStream(ArchiveStreamFactory.ZIP, in);
         } else if (JarArchiveInputStream.matches(signature, signatureLength)) {
-            return new JarArchiveInputStream(in);
+            return createArchiveInputStream(ArchiveStreamFactory.JAR, in);
         } else if (ArArchiveInputStream.matches(signature, signatureLength)) {
-            return new ArArchiveInputStream(in);
+            return createArchiveInputStream(ArchiveStreamFactory.AR, in);
         } else if (CpioArchiveInputStream.matches(signature, signatureLength)) {
-            return new CpioArchiveInputStream(in);
+            return createArchiveInputStream(ArchiveStreamFactory.CPIO, in);
         }
 
-        // Dump needs a bigger buffer to check the signature;
         final byte[] dumpsig = new byte[32];
         in.mark(dumpsig.length);
         signatureLength = in.read(dumpsig);
         in.reset();
         if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) {
-            return new DumpArchiveInputStream(in);
+            return createArchiveInputStream(ArchiveStreamFactory.DUMP, in);
         }
 
-        // Tar needs an even bigger buffer to check the signature; read the first block
         final byte[] tarheader = new byte[512];
         in.mark(tarheader.length);
         signatureLength = in.read(tarheader);
         in.reset();
         if (TarArchiveInputStream.matches(tarheader, signatureLength)) {
-            return new TarArchiveInputStream(in);
+            return createArchiveInputStream(ArchiveStreamFactory.TAR, in);
         }
-        // COMPRESS-117 - improve auto-recognition
         if (signatureLength >= 512) {
             try {
                 TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader));
-                // COMPRESS-191 - verify the header checksum
                 tais.getNextEntry();
-                    return new TarArchiveInputStream(in);
+                return createArchiveInputStream(ArchiveStreamFactory.TAR, in);
             } catch (Exception e) { // NOPMD
-                // can generate IllegalArgumentException as well
-                // as IOException
                 // autodetection, simply not a TAR
                 // ignored
             }
@@ -60,3 +54,4 @@
 
     throw new ArchiveException("No Archiver found for the stream signature");
 }
+
