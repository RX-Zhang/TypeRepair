--- 
+++ 
@@ -8,12 +8,12 @@
   // This is described in Draft 2 of the ES4 spec,
   // Section 3.4.7: Subtyping Function Types.
 
-  // this.returnType <: that.returnType (covariant)
-  if (!this.returnType.isSubtype(that.returnType)) {
+  // that.returnType <: this.returnType (covariant)
+  if (!that.returnType.isSubtype(this.returnType)) {
     return false;
   }
 
-  // that.paramType[i] <: this.paramType[i] (contravariant)
+  // this.paramType[i] <: that.paramType[i] (contravariant)
   //
   // If this.paramType[i] is required,
   // then that.paramType[i] is required.
@@ -37,9 +37,9 @@
   while (thisParam != null && thatParam != null) {
     JSType thisParamType = thisParam.getJSType();
     JSType thatParamType = thatParam.getJSType();
+
     if (thisParamType != null) {
-      if (thatParamType == null ||
-          !thatParamType.isSubtype(thisParamType)) {
+      if (thatParamType == null || !thisParamType.isSubtype(thatParamType)) {
         return false;
       }
     }
@@ -48,11 +48,11 @@
     boolean thatIsVarArgs = thatParam.isVarArgs();
 
     // "that" can't be a supertype, because it's missing a required argument.
-      // NOTE(nicksantos): In our type system, we use {function(...?)} and
-      // {function(...NoType)} to to indicate that arity should not be
-      // checked. Strictly speaking, this is not a correct formulation,
-      // because now a sub-function can required arguments that are var_args
-      // in the super-function. So we special-case this.
+    // NOTE(nicksantos): In our type system, we use {function(...?)} and
+    // {function(...NoType)} to indicate that arity should not be
+    // checked. Strictly speaking, this is not a correct formulation,
+    // because now a sub-function can required arguments that are var_args
+    // in the super-function. So we special-case this.
 
     // don't advance if we have variable arguments
     if (!thisIsVarArgs) {
@@ -69,7 +69,8 @@
     }
   }
 
-  // "that" can't be a supertype, because it's missing a required arguement.
-
+  // Allow "that" to have more parameters than "this" (due to ignoring extra parameters)
+  // but not vice versa
   return true;
 }
+
