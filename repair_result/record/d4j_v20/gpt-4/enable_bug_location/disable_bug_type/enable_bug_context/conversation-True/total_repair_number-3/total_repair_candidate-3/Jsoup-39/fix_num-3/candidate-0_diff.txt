--- 
+++ 
@@ -6,30 +6,27 @@
         docData = Charset.forName(defaultCharset).decode(byteData).toString();
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-        if (meta != null) { // if not found, will keep utf-8 as best attempt
-            String foundCharset;
+        String foundCharset = null;
+        if (meta != null) { // if found, will try to use meta charset
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
-                if (foundCharset == null && meta.hasAttr("charset")) {
-                    try {
-                        if (Charset.isSupported(meta.attr("charset"))) {
-                            foundCharset = meta.attr("charset");
-                        }
-                    } catch (IllegalCharsetNameException e) {
-                        foundCharset = null;
+            }
+            if (foundCharset == null && meta.hasAttr("charset")) {
+                try {
+                    if (Charset.isSupported(meta.attr("charset"))) {
+                        foundCharset = meta.attr("charset");
                     }
+                } catch (IllegalCharsetNameException e) {
+                    foundCharset = null;
                 }
-            } else {
-                foundCharset = meta.attr("charset");
             }
-
-            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
-                foundCharset = foundCharset.trim().replaceAll("[\"']", "");
-                charsetName = foundCharset;
-                byteData.rewind();
-                docData = Charset.forName(foundCharset).decode(byteData).toString();
-                doc = null;
-            }
+        }
+        if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equalsIgnoreCase(defaultCharset)) { // need to re-decode
+            foundCharset = foundCharset.trim().replaceAll("[\"']", "");
+            charsetName = foundCharset;
+            byteData.rewind();
+            docData = Charset.forName(foundCharset).decode(byteData).toString();
+            doc = parser.parseInput(docData, baseUri);
         }
     } else { // specified by content type header (or by user on file load)
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
@@ -41,6 +38,9 @@
         docData = Charset.forName(defaultCharset).decode(byteData).toString();
         docData = docData.substring(1);
         charsetName = defaultCharset;
+        // re-parse the document after removing BOM
+        doc = parser.parseInput(docData, baseUri);
+        doc.outputSettings().charset(charsetName);
     }
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
@@ -48,3 +48,4 @@
     }
     return doc;
 }
+
