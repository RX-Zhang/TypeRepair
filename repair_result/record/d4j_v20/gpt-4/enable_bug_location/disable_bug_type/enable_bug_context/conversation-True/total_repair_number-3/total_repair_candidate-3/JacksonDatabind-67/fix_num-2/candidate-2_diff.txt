--- 
+++ 
@@ -16,7 +16,12 @@
     // the only non-standard thing is this:
     if (deser == null) {
         if (type.isEnumType()) {
-            return _createEnumKeyDeserializer(ctxt, type);
+            // use EnumResolver to handle case insensitivity and mappings properly
+            Class<?> enumClass = type.getRawClass();
+            BeanDescription beanDesc = config.introspectForDeserialization(enumClass);
+            AnnotatedMethod jsonValueMethod = _findJsonValueFor(config, type);
+            EnumResolver enumRes = constructEnumResolver(enumClass, config, jsonValueMethod);
+            return _createEnumKeyDeserializer(ctxt, type, enumRes);
         }
         deser = StdKeyDeserializers.findStringBasedKeyDeserializer(config, type);
     }
@@ -30,3 +35,16 @@
     }
     return deser;
 }
+
+// Adjusted _createEnumKeyDeserializer to accept EnumResolver
+private KeyDeserializer _createEnumKeyDeserializer(DeserializationContext ctxt, JavaType type, EnumResolver enumRes) {
+    return new StdKeyDeserializer.EnumKD(type.getRawClass(), enumRes);
+}
+
+// Existing method fallback for _findJsonValueFor as per context
+protected AnnotatedMethod _findJsonValueFor(DeserializationConfig config, JavaType enumType) {
+    // This method should find @JsonValue annotated method on enum, placeholder if needed
+    BeanDescription beanDesc = config.introspect(enumType);
+    return config.getAnnotationIntrospector().findJsonValueMethod(beanDesc.getClassInfo());
+}
+
