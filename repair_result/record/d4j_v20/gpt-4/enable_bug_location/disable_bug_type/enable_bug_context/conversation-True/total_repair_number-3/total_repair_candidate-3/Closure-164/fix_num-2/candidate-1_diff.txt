--- 
+++ 
@@ -8,8 +8,8 @@
   // This is described in Draft 2 of the ES4 spec,
   // Section 3.4.7: Subtyping Function Types.
 
-  // this.returnType <: that.returnType (covariant)
-  if (!this.returnType.isSubtype(that.returnType)) {
+  // that.returnType <: this.returnType (covariant)
+  if (!that.returnType.isSubtype(this.returnType)) {
     return false;
   }
 
@@ -37,9 +37,9 @@
   while (thisParam != null && thatParam != null) {
     JSType thisParamType = thisParam.getJSType();
     JSType thatParamType = thatParam.getJSType();
-    if (thisParamType != null) {
-      if (thatParamType == null ||
-          !thatParamType.isSubtype(thisParamType)) {
+
+    if (thatParamType != null) {
+      if (thisParamType == null || !thisParamType.isSubtype(thatParamType)) {
         return false;
       }
     }
@@ -48,13 +48,9 @@
     boolean thatIsVarArgs = thatParam.isVarArgs();
 
     // "that" can't be a supertype, because it's missing a required argument.
-      // NOTE(nicksantos): In our type system, we use {function(...?)} and
-      // {function(...NoType)} to to indicate that arity should not be
-      // checked. Strictly speaking, this is not a correct formulation,
-      // because now a sub-function can required arguments that are var_args
-      // in the super-function. So we special-case this.
+    // NOTE(nicksantos): In our type system, if one function uses var_args,
+    // make sure not to advance parameters in a way that breaks the subtype check.
 
-    // don't advance if we have variable arguments
     if (!thisIsVarArgs) {
       thisParam = thisParam.getNext();
     }
@@ -69,7 +65,14 @@
     }
   }
 
-  // "that" can't be a supertype, because it's missing a required arguement.
+  // If there are remaining required params in that, this is not a subtype
+  while (thatParam != null) {
+    if (!thatParam.isOptionalArg() && !thatParam.isVarArgs()) {
+      return false;
+    }
+    thatParam = thatParam.getNext();
+  }
 
   return true;
 }
+
