--- 
+++ 
@@ -11,7 +11,12 @@
         //    compatibility -- needed later anyway, and not doing so may open
         //    security issues.
         JavaType t = tf.constructFromCanonical(id);
-            // Probably cleaner to have a method in `TypeFactory` but can't add in patch
+        // Ensure that resolved type is sub-type of base type to avoid unsafe casts
+        if (!_baseType.getRawClass().isAssignableFrom(t.getRawClass())) {
+            throw new JsonMappingException(ctxt.getParser(), String.format(
+                    "Invalid type id '%s': resolved class %s not subtype of base type %s",
+                    id, t.getRawClass().getName(), _baseType.getRawClass().getName()));
+        }
         return t;
     }
     Class<?> cls;
@@ -30,5 +35,11 @@
     } catch (Exception e) {
         throw new IllegalArgumentException("Invalid type id '"+id+"' (for id type 'Id.class'): "+e.getMessage(), e);
     }
+    if (!_baseType.getRawClass().isAssignableFrom(cls)) { // ADD check here to ensure safe casting
+        throw new JsonMappingException(ctxt.getParser(),
+                String.format("Invalid type id '%s': resolved class %s not subtype of base type %s",
+                        id, cls.getName(), _baseType.getRawClass().getName()));
+    }
     return tf.constructSpecializedType(_baseType, cls);
 }
+
