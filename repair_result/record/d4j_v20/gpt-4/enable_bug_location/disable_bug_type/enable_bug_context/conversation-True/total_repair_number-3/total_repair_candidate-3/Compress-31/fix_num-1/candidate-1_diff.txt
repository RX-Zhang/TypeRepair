--- 
+++ 
@@ -1,10 +1,10 @@
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
-    long    result = 0;
-    int     end = offset + length;
-    int     start = offset;
+    long result = 0;
+    int end = offset + length;
+    int start = offset;
 
-    if (length < 2){
-        throw new IllegalArgumentException("Length "+length+" must be at least 2");
+    if (length < 2) {
+        throw new IllegalArgumentException("Length " + length + " must be at least 2");
     }
 
     if (buffer[start] == 0) {
@@ -12,9 +12,12 @@
     }
 
     // Skip leading spaces
-    while (start < end){
-        if (buffer[start] == ' '){
+    while (start < end) {
+        if (buffer[start] == ' ') {
             start++;
+        } else if (buffer[start] == 0) {
+            // Embedded NUL is invalid
+            throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, start, (byte) 0));
         } else {
             break;
         }
@@ -24,21 +27,28 @@
     // The ustar and POSIX tar specs require a trailing NUL or
     // space but some implementations use the extra digit for big
     // sizes/uids/gids ...
-    byte trailer = buffer[end - 1];
-    while (start < end && (trailer == 0 || trailer == ' ')) {
-        end--;
-        trailer = buffer[end - 1];
+    while (end > start) {
+        byte trailer = buffer[end - 1];
+        if (trailer == 0 || trailer == ' ') {
+            end--;
+        } else {
+            if (trailer == 0) {
+                // Embedded NUL is invalid
+                throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, end - 1, trailer));
+            }
+            break;
+        }
     }
 
-    for ( ;start < end; start++) {
+    for (; start < end; start++) {
         final byte currentByte = buffer[start];
         if (currentByte == 0) {
-            break;
+            // Embedded NUL is invalid
+            throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, start, currentByte));
         }
         // CheckStyle:MagicNumber OFF
-        if (currentByte < '0' || currentByte > '7'){
-            throw new IllegalArgumentException(
-                    exceptionMessage(buffer, offset, length, start, currentByte));
+        if (currentByte < '0' || currentByte > '7') {
+            throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, start, currentByte));
         }
         result = (result << 3) + (currentByte - '0'); // convert from ASCII
         // CheckStyle:MagicNumber ON
@@ -46,3 +56,4 @@
 
     return result;
 }
+
