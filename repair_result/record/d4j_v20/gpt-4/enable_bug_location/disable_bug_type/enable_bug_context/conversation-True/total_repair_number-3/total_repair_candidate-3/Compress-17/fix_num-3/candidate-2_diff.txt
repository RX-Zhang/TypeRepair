--- 
+++ 
@@ -1,50 +1,38 @@
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
-    long    result = 0;
-    int     end = offset + length;
-    int     start = offset;
-
     if (length < 2){
         throw new IllegalArgumentException("Length "+length+" must be at least 2");
     }
 
-    if (buffer[start] == 0) {
+    // Skip leading spaces and NULs
+    int start = offset;
+    int end = offset + length;
+
+    while (start < end && (buffer[start] == ' ' || buffer[start] == 0)) {
+        start++;
+    }
+    if (start == end) {
         return 0L;
     }
 
-    // Skip leading spaces
-    while (start < end){
-        if (buffer[start] == ' '){
-            start++;
-        } else {
-            break;
-        }
+    // Must have trailing NUL or space
+    // Skip trailing NULs and spaces
+    int last = end - 1;
+    while (last >= start && (buffer[last] == 0 || buffer[last] == ' ')) {
+        last--;
+    }
+    if (last < start) {
+        return 0L;
     }
 
-    // Must have trailing NUL or space
-    byte trailer;
-    trailer = buffer[end-1];
-    if (trailer == 0 || trailer == ' '){
-        end--;
-    } else {
-        throw new IllegalArgumentException(
-                exceptionMessage(buffer, offset, length, end-1, trailer));
-    }
-    // May have additional NULs or spaces
-    trailer = buffer[end - 1];
-    if (trailer == 0 || trailer == ' '){
-        end--;
-    }
-
-    for ( ;start < end; start++) {
-        final byte currentByte = buffer[start];
-        // CheckStyle:MagicNumber OFF
+    long result = 0;
+    for (int i = start; i <= last; i++) {
+        final byte currentByte = buffer[i];
         if (currentByte < '0' || currentByte > '7'){
             throw new IllegalArgumentException(
-                    exceptionMessage(buffer, offset, length, start, currentByte));
+                    exceptionMessage(buffer, offset, length, i, currentByte));
         }
-        result = (result << 3) + (currentByte - '0'); // convert from ASCII
-        // CheckStyle:MagicNumber ON
+        result = (result << 3) + (currentByte - '0');
     }
-
     return result;
 }
+
