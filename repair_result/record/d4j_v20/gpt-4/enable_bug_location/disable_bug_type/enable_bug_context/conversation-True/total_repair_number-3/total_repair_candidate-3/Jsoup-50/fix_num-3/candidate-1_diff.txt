--- 
+++ 
@@ -6,7 +6,7 @@
 
     if (charsetName == null) { // determine from meta. safe parse as UTF-8
         // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
-        docData = Charset.forName(defaultCharset).decode(byteData).toString();
+        docData = Charset.forName(defaultCharset).decode(byteData.asReadOnlyBuffer()).toString();
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
         if (meta != null) { // if not found, will keep utf-8 as best attempt
@@ -16,16 +16,17 @@
             }
             if (foundCharset == null && meta.hasAttr("charset")) {
                 try {
-                    if (Charset.isSupported(meta.attr("charset"))) {
-                        foundCharset = meta.attr("charset");
+                    String charset = meta.attr("charset").trim();
+                    if (Charset.isSupported(charset)) {
+                        foundCharset = charset;
                     }
                 } catch (IllegalCharsetNameException e) {
                     foundCharset = null;
                 }
             }
 
-            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
-                foundCharset = foundCharset.trim().replaceAll("[\"']", "");
+            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equalsIgnoreCase(defaultCharset)) { // need to re-decode
+                foundCharset = foundCharset.replaceAll("[\"']", "");
                 charsetName = foundCharset;
                 byteData.rewind();
                 docData = Charset.forName(foundCharset).decode(byteData).toString();
@@ -34,11 +35,9 @@
         }
     } else { // specified by content type header (or by user on file load)
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
-        docData = Charset.forName(charsetName).decode(byteData).toString();
+        docData = Charset.forName(charsetName).decode(byteData.asReadOnlyBuffer()).toString();
     }
     if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-        byteData.rewind();
-        docData = Charset.forName(defaultCharset).decode(byteData).toString();
         docData = docData.substring(1);
         charsetName = defaultCharset;
         doc = null;
@@ -49,3 +48,4 @@
     }
     return doc;
 }
+
