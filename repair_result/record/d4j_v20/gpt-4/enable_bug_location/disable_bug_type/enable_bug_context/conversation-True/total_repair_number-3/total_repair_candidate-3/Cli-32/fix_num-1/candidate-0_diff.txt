--- 
+++ 
@@ -2,41 +2,56 @@
 {
     int pos;
     
-    // the line ends before the max wrap pos or a new line char found
-    if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
-            || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
-    {
-        return pos + 1;
-    }
-    else if (startPos + width >= text.length())
+    int max = startPos + width;
+    if (max >= text.length())
     {
         return -1;
     }
+    
+    // the line ends before the max wrap pos or a new line char found
+    int newLinePos = text.indexOf('\n', startPos);
+    if (newLinePos != -1 && newLinePos <= max)
+    {
+        return newLinePos + 1;
+    }
+    int tabPos = text.indexOf('\t', startPos);
+    if (tabPos != -1 && tabPos <= max)
+    {
+        return tabPos + 1;
+    }
 
-
-    // look for the last whitespace character before startPos+width
-    pos = startPos + width;
+    // look for the last whitespace character before max
+    pos = max;
 
     char c;
 
-    while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
-            && (c != '\n') && (c != '\r'))
+    while (pos >= startPos)
     {
-        --pos;
+        c = text.charAt(pos);
+        if (c == ' ' || c == '\n' || c == '\r')
+        {
+            break;
+        }
+        pos--;
     }
 
-    // if we found it - just return
     if (pos > startPos)
     {
         return pos;
     }
-    
-    // if we didn't find one, simply chop at startPos+width
-    pos = startPos + width;
-    while ((pos <= text.length()) && ((c = text.charAt(pos)) != ' ')
-           && (c != '\n') && (c != '\r'))
+
+    // if no whitespace found before max, look for the next whitespace after max
+    pos = max;
+    while (pos < text.length())
     {
-        ++pos;
-    }        
+        c = text.charAt(pos);
+        if (c == ' ' || c == '\n' || c == '\r')
+        {
+            break;
+        }
+        pos++;
+    }
+
     return pos == text.length() ? -1 : pos;
 }
+
