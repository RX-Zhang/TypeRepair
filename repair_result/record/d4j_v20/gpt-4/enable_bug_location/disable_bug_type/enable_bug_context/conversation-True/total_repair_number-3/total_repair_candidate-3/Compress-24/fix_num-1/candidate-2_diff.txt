--- 
+++ 
@@ -1,7 +1,7 @@
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
-    long    result = 0;
-    int     end = offset + length;
-    int     start = offset;
+    long result = 0;
+    int end = offset + length;
+    int start = offset;
 
     if (length < 2){
         throw new IllegalArgumentException("Length "+length+" must be at least 2");
@@ -12,35 +12,37 @@
     }
 
     // Skip leading spaces
-    while (start < end){
-        if (buffer[start] == ' '){
+    while (start < end) {
+        if (buffer[start] == ' ') {
             start++;
         } else {
             break;
         }
     }
 
+    // If the first byte has its highest bit set, handle binary format
+    if ((buffer[start] & 0x80) != 0) {
+        // Defer to parseOctalOrBinary to handle this correctly
+        return parseOctalOrBinary(buffer, offset, length);
+    }
+
     // Trim all trailing NULs and spaces.
     // The ustar and POSIX tar specs require a trailing NUL or
     // space but some implementations use the extra digit for big
     // sizes/uids/gids ...
-    byte trailer = buffer[end - 1];
-    if (trailer == 0 || trailer == ' '){
-        end--;
-    } else {
-        throw new IllegalArgumentException(
-                exceptionMessage(buffer, offset, length, end-1, trailer));
-    }
-    trailer = buffer[end - 1];
-    while (start < end - 1 && (trailer == 0 || trailer == ' ')) {
-        end--;
-        trailer = buffer[end - 1];
+    while (end > start) {
+        byte trailer = buffer[end - 1];
+        if (trailer == 0 || trailer == ' ') {
+            end--;
+        } else {
+            break;
+        }
     }
 
-    for ( ;start < end; start++) {
+    for (; start < end; start++) {
         final byte currentByte = buffer[start];
         // CheckStyle:MagicNumber OFF
-        if (currentByte < '0' || currentByte > '7'){
+        if (currentByte < '0' || currentByte > '7') {
             throw new IllegalArgumentException(
                     exceptionMessage(buffer, offset, length, start, currentByte));
         }
@@ -50,3 +52,4 @@
 
     return result;
 }
+
