--- 
+++ 
@@ -25,16 +25,24 @@
     }
 
     currEntry = new TarArchiveEntry(headerBuf);
+
+    if (currEntry.isEOF()) {
+        // End of archive detected
+        setAtEOF(true);
+        currEntry = null;
+        return null;
+    }
+
     entryOffset = 0;
     entrySize = currEntry.getSize();
 
     if (currEntry.isGNULongNameEntry()) {
         // read in the name
-        StringBuffer longName = new StringBuffer();
+        StringBuilder longName = new StringBuilder();
         byte[] buf = new byte[SMALL_BUFFER_SIZE];
         int length = 0;
-        while ((length = read(buf)) >= 0) {
-            longName.append(new String(buf, 0, length));
+        while ((length = read(buf, 0, buf.length)) >= 0) {
+            longName.append(new String(buf, 0, length, "UTF-8"));
         }
         getNextEntry();
         if (currEntry == null) {
@@ -42,19 +50,19 @@
             // Malformed tar file - long entry name not followed by entry
             return null;
         }
-        // remove trailing null terminator
-        if (longName.length() > 0
-            && longName.charAt(longName.length() - 1) == 0) {
-            longName.deleteCharAt(longName.length() - 1);
+        // remove trailing null terminator if exists
+        int lastCharIndex = longName.length() - 1;
+        if (lastCharIndex >= 0 && longName.charAt(lastCharIndex) == '\0') {
+            longName.deleteCharAt(lastCharIndex);
         }
         currEntry.setName(longName.toString());
     }
 
-    if (currEntry.isPaxHeader()){ // Process Pax headers
+    if (currEntry.isPaxHeader()) { // Process Pax headers
         paxHeaders();
     }
 
-    if (currEntry.isGNUSparse()){ // Process sparse files
+    if (currEntry.isGNUSparse()) { // Process sparse files
         readGNUSparse();
     }
 
@@ -65,3 +73,4 @@
     entrySize = currEntry.getSize();
     return currEntry;
 }
+
