--- 
+++ 
@@ -8,15 +8,16 @@
         }
     }
     // first, sanity checks
-    if (p.getCurrentToken() != JsonToken.START_OBJECT) {
-        throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,
-                "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName());
-    }
-        // should always get field name, but just in case...
+    if (p.getCurrentToken() == JsonToken.START_OBJECT) {
+        // Should always get field name, but just in case...
         if (p.nextToken() != JsonToken.FIELD_NAME) {
             throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,
                     "need JSON String that contains type id (for subtype of "+baseTypeName()+")");
         }
+    } else if (p.getCurrentToken() != JsonToken.FIELD_NAME) {
+        throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,
+                "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName());
+    }
     final String typeId = p.getText();
     JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);
     p.nextToken();
@@ -31,7 +32,7 @@
         p = JsonParserSequence.createFlattened(tb.asParser(p), p);
         p.nextToken();
     }
-    
+
     Object value = deser.deserialize(p, ctxt);
     // And then need the closing END_OBJECT
     if (p.nextToken() != JsonToken.END_OBJECT) {
@@ -40,3 +41,4 @@
     }
     return value;
 }
+
