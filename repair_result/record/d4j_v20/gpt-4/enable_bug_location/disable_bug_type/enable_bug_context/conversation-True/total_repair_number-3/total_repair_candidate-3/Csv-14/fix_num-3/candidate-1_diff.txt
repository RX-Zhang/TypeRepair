--- 
+++ 
@@ -7,6 +7,7 @@
 
     final char delimChar = getDelimiter();
     final char quoteChar = getQuoteCharacter().charValue();
+    final Character escapeChar = getEscapeCharacter();
 
     QuoteMode quoteModePolicy = getQuoteMode();
     if (quoteModePolicy == null) {
@@ -36,7 +37,7 @@
             char c = value.charAt(pos);
 
             // RFC4180 (https://tools.ietf.org/html/rfc4180) TEXTDATA =  %x20-21 / %x23-2B / %x2D-7E
-            if (newRecord && (c < '0' || c > '9' && c < 'A' || c > 'Z' && c < 'a' || c > 'z')) {
+            if (newRecord && (c < '0' || (c > '9' && c < 'A') || (c > 'Z' && c < 'a') || c > 'z')) {
                 quote = true;
             } else if (c <= COMMENT) {
                 // Some other chars at the start of a value caused the parser to fail, so for now
@@ -84,8 +85,6 @@
     // we hit something that needed encapsulation
     out.append(quoteChar);
 
-    // Pick up where we left off: pos should be positioned on the first character that caused
-    // the need for encapsulation.
     while (pos < end) {
         final char c = value.charAt(pos);
         if (c == quoteChar) {
@@ -96,6 +95,12 @@
             // put the next starting position on the encapsulator so we will
             // write it out again with the next string (effectively doubling it)
             start = pos;
+        } else if (escapeChar != null && c == escapeChar) {
+            // write out chunk until this point
+            out.append(value, start, pos);
+            // output the escape character plus the next char if possible
+            out.append(escapeChar);
+            start = pos; // include the escape character in the next segment
         }
         pos++;
     }
@@ -104,3 +109,4 @@
     out.append(value, start, pos);
     out.append(quoteChar);
 }
+
