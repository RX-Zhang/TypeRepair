--- 
+++ 
@@ -1,48 +1,54 @@
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
-    long    result = 0;
-    int     end = offset + length;
-    int     start = offset;
-
     if (length < 2){
         throw new IllegalArgumentException("Length "+length+" must be at least 2");
+    }
+
+    // Skip leading spaces
+    int start = offset;
+    int end = offset + length;
+
+    while (start < end && buffer[start] == ' ') {
+        start++;
+    }
+
+    // If all spaces, return 0;
+    if (start == end) {
+        return 0L;
     }
 
     if (buffer[start] == 0) {
         return 0L;
     }
 
-    // Skip leading spaces
-    while (start < end){
-        if (buffer[start] == ' '){
-            start++;
-        } else {
-            break;
-        }
-    }
-
-    // Trim all trailing NULs and spaces.
-    // The ustar and POSIX tar specs require a trailing NUL or
-    // space but some implementations use the extra digit for big
-    // sizes/uids/gids ...
+    // Trim trailing nulls and spaces
     byte trailer = buffer[end - 1];
     while (start < end && (trailer == 0 || trailer == ' ')) {
         end--;
         trailer = buffer[end - 1];
     }
 
-    for ( ;start < end; start++) {
-        final byte currentByte = buffer[start];
-        if (currentByte == 0) {
-            break;
+    if (start >= end) {
+        return 0L;
+    }
+
+    // Check for embedded NUL or spaces inside the number, invalid input
+    for (int i = start; i < end; i++) {
+        byte currentByte = buffer[i];
+        if (currentByte == 0 || currentByte == ' ') {
+            throw new IllegalArgumentException(
+                    exceptionMessage(buffer, offset, length, i, currentByte));
         }
-        // CheckStyle:MagicNumber OFF
-        if (currentByte < '0' || currentByte > '7'){
+        if (currentByte < '0' || currentByte > '7') {
             throw new IllegalArgumentException(
-                    exceptionMessage(buffer, offset, length, start, currentByte));
+                    exceptionMessage(buffer, offset, length, i, currentByte));
         }
-        result = (result << 3) + (currentByte - '0'); // convert from ASCII
-        // CheckStyle:MagicNumber ON
+    }
+
+    long result = 0;
+    for (int i = start; i < end; i++) {
+        result = (result << 3) + (buffer[i] - '0');
     }
 
     return result;
 }
+
