--- 
+++ 
@@ -54,7 +54,7 @@
                     // milliseconds can be optional in the format
                     if (checkOffset(date, offset, '.')) {
                         offset += 1;
-                        int endOffset = indexOfNonDigit(date, offset + 1); // assume at least one digit
+                        int endOffset = indexOfNonDigit(date, offset); // assume at least one digit
                         int parseEndOffset = Math.min(endOffset, offset + 3); // parse up to 3 digits
                         int fraction = parseInt(date, offset, parseEndOffset);
                         // compensate for "missing" digits
@@ -89,6 +89,11 @@
             String timezoneOffset = date.substring(offset);
 
             // When timezone has no minutes, we should append it, valid timezones are, for example: +00:00, +0000 and +00
+            // Fix: normalize timezone string to include minutes if missing (e.g. "+01" -> "+0100")
+            if (timezoneOffset.length() == 3) {
+                // timezone like "+01" or "-05"
+                timezoneOffset = timezoneOffset + "00";
+            }
 
             offset += timezoneOffset.length();
             // 18-Jun-2015, tatu: Minor simplification, skip offset of "+0000"/"+00:00"
@@ -100,7 +105,6 @@
                 //    `java.util.TimeZone` specifically instruct use of GMT as base for
                 //    custom timezones... odd.
                 String timezoneId = "GMT" + timezoneOffset;
-                  String timezoneId = "UTC" + timezoneOffset;
 
                 timezone = TimeZone.getTimeZone(timezoneId);
 
@@ -143,7 +147,7 @@
     } catch (IllegalArgumentException e) {
         fail = e;
     }
-    String input = (date == null) ? null : ('"' + date + "'");
+    String input = (date == null) ? null : ('"' + date + '"');
     String msg = fail.getMessage();
     if (msg == null || msg.isEmpty()) {
         msg = "("+fail.getClass().getName()+")";
@@ -152,3 +156,4 @@
     ex.initCause(fail);
     throw ex;
 }
+
