--- 
+++ 
@@ -13,15 +13,22 @@
         return deser.deserialize(p, ctxt);
     }
     // or, perhaps we just bumped into a "natural" value (boolean/int/double/String)?
+    // additionally handle empty String as null if enabled in ctxt
+    JsonToken current = p.getCurrentToken();
+    if (current == JsonToken.VALUE_STRING && ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)
+            && p.getText().isEmpty()) {
+        return null;
+    }
     Object result = TypeDeserializer.deserializeIfNatural(p, ctxt, _baseType);
     if (result != null) {
         return result;
     }
     // or, something for which "as-property" won't work, changed into "wrapper-array" type:
-    if (p.getCurrentToken() == JsonToken.START_ARRAY) {
+    if (current == JsonToken.START_ARRAY) {
         return super.deserializeTypedFromAny(p, ctxt);
     }
     ctxt.reportWrongTokenException(p, JsonToken.FIELD_NAME,
             "missing property '"+_typePropertyName+"' that is to contain type id  (for class "+baseTypeName()+")");
     return null;
 }
+
