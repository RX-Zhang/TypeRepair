--- 
+++ 
@@ -12,7 +12,7 @@
         switch (modulus) {
             case 1:
                 buf[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                buf[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+                buf[pos++] = encodeTable[(x <<4) & MASK_6BITS];
                 // URL-SAFE skips the padding to further reduce size.
                 if (encodeTable == STANDARD_ENCODE_TABLE) {
                     buf[pos++] = PAD;
@@ -29,19 +29,23 @@
                     buf[pos++] = PAD;
                 }
                 break;
+
+            case 0:
+                // When modulus is 0 at EOF, no partial bytes to encode/pad
+                break;
         }
-        if (lineLength > 0) {
+        if (lineLength > 0 && pos > 0) {
             System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length);
             pos += lineSeparator.length;
         }
     } else {
         for (int i = 0; i < inAvail; i++) {
             if (buf == null || buf.length - pos < encodeSize) {
-                resizeBuf();
+                resize();
             }
             modulus = (++modulus) % 3;
             int b = in[inPos++];
-            if (b < 0) { b += 256; }
+            (b < 0) { b += 256; }
             x = (x << 8) + b;
             if (0 == modulus) {
                 buf[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
@@ -58,3 +62,4 @@
         }
     }
 }
+
