--- 
+++ 
@@ -2,36 +2,44 @@
     throws IOException {
     final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);
     // Format is "length keyword=value\n";
-    while(true){ // get length
+    while (true) { // get length
         int ch;
         int len = 0;
         int read = 0;
-        while((ch = i.read()) != -1) {
+        while ((ch = i.read()) != -1) {
             read++;
-            if (ch == ' '){
+            if (ch == ' ') {
                 // Get keyword
                 final ByteArrayOutputStream coll = new ByteArrayOutputStream();
-                while((ch = i.read()) != -1) {
+                while ((ch = i.read()) != -1) {
                     read++;
-                    if (ch == '='){ // end of keyword
+                    if (ch == '=') { // end of keyword
                         final String keyword = coll.toString(CharsetNames.UTF_8);
-                        // Get rest of entry
                         final int restLen = len - read;
+                        if (restLen < 0) {
+                            throw new IOException("Invalid pax header length " + len +
+                                    " for keyword '" + keyword + "'");
+                        }
+                        if (restLen == 0) {
+                            // blank line: ignore, continue parsing next header
+                            break;
+                        }
                         if (restLen == 1) { // only NL
+                            // Remove the header: e.g., key with no value
                             headers.remove(keyword);
                         } else {
                             final byte[] rest = new byte[restLen];
                             final int got = IOUtils.readFully(i, rest);
                             if (got != restLen) {
                                 throw new IOException("Failed to read "
-                                                      + "Paxheader. Expected "
-                                                      + restLen
-                                                      + " bytes, read "
-                                                      + got);
+                                        + "Paxheader. Expected "
+                                        + restLen
+                                        + " bytes, read "
+                                        + got);
                             }
                             // Drop trailing NL
                             final String value = new String(rest, 0,
-                                                      restLen - 1, CharsetNames.UTF_8);
+                                    restLen - 1, CharsetNames.UTF_8);
                             headers.put(keyword, value);
                         }
                         break;
@@ -40,12 +48,16 @@
                 }
                 break; // Processed single header
             }
+            if (ch < '0' || ch > '9') {
+                throw new IOException("Invalid character '" + (char) ch + "' in pax header length");
+            }
             len *= 10;
             len += ch - '0';
         }
-        if (ch == -1){ // EOF
+        if (ch == -1) { // EOF
             break;
         }
     }
     return headers;
 }
+
