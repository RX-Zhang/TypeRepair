--- 
+++ 
@@ -4,18 +4,29 @@
                                         boolean hasDiskStart)
     throws ZipException {
     if (rawCentralDirectoryData != null) {
-        int expectedLength = (hasUncompressedSize ? DWORD : 0)
-            + (hasCompressedSize ? DWORD : 0)
+        int actualLength = rawCentralDirectoryData.length;
+        int minExpectedLength = 2 * DWORD; // size + compressedSize must be present
+
+        // The central directory entry can have additional fields like relativeHeaderOffset and diskStart
+        int maxExpectedLength = 2 * DWORD  // size + compressedSize
             + (hasRelativeHeaderOffset ? DWORD : 0)
             + (hasDiskStart ? WORD : 0);
-        if (rawCentralDirectoryData.length != expectedLength) {
+
+        // Validate minimum requirements: size and compressedSize must both be present
+        if (!hasUncompressedSize || !hasCompressedSize) {
+            throw new ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);
+        }
+
+        if (actualLength < minExpectedLength || actualLength > maxExpectedLength) {
             throw new ZipException("central directory zip64 extended"
                                    + " information extra field's length"
                                    + " doesn't match central directory"
-                                   + " data.  Expected length "
-                                   + expectedLength + " but is "
-                                   + rawCentralDirectoryData.length);
+                                   + " data.  Expected length between "
+                                   + minExpectedLength + " and "
+                                   + maxExpectedLength + " but is "
+                                   + actualLength);
         }
+
         int offset = 0;
         if (hasUncompressedSize) {
             size = new ZipEightByteInteger(rawCentralDirectoryData, offset);
@@ -26,14 +37,19 @@
                                                      offset);
             offset += DWORD;
         }
-        if (hasRelativeHeaderOffset) {
+        if (hasRelativeHeaderOffset && offset + DWORD <= actualLength) {
             relativeHeaderOffset =
                 new ZipEightByteInteger(rawCentralDirectoryData, offset);
             offset += DWORD;
+        } else {
+            relativeHeaderOffset = null;
         }
-        if (hasDiskStart) {
+        if (hasDiskStart && offset + WORD <= actualLength) {
             diskStart = new ZipLong(rawCentralDirectoryData, offset);
             offset += WORD;
+        } else {
+            diskStart = null;
         }
     }
 }
+
