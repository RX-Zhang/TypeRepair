--- 
+++ 
@@ -6,7 +6,8 @@
     final int end = offset + len;
 
     final char delimChar = getDelimiter();
-    final char quoteChar = getQuoteCharacter().charValue();
+    final Character quoteCharObj = getQuoteCharacter();
+    final char quoteChar = quoteCharObj != null ? quoteCharObj.charValue() : '"';
 
     QuoteMode quoteModePolicy = getQuoteMode();
     if (quoteModePolicy == null) {
@@ -36,7 +37,7 @@
         } else {
             char c = value.charAt(pos);
 
-            if (newRecord && (c < 0x20 || c > 0x21 && c < 0x23 || c > 0x2B && c < 0x2D || c > 0x7E)) {
+            if (newRecord && (c < 0x20 || (c > 0x21 && c < 0x23) || (c > 0x2B && c < 0x2D) || c > 0x7E)) {
                 quote = true;
             } else if (c <= COMMENT) {
                 // Some other chars at the start of a value caused the parser to fail, so for now
@@ -75,22 +76,15 @@
         throw new IllegalStateException("Unexpected Quote value: " + quoteModePolicy);
     }
 
-    if (!quote) {
-        // no encapsulation needed - write out the original value
-        out.append(value, start, end);
-        return;
-    }
-
     // we hit something that needed encapsulation
     out.append(quoteChar);
 
-    // Pick up where we left off: pos should be positioned on the first character that caused
-    // the need for encapsulation.
+    // Reset pos to start for scanning
+    pos = start;
     while (pos < end) {
         final char c = value.charAt(pos);
         if (c == quoteChar) {
             // write out the chunk up until this point
-
             // add 1 to the length to write out the encapsulator also
             out.append(value, start, pos + 1);
             // put the next starting position on the encapsulator so we will
@@ -104,3 +98,4 @@
     out.append(value, start, pos);
     out.append(quoteChar);
 }
+
