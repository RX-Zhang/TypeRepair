--- 
+++ 
@@ -19,9 +19,14 @@
 
     byte[] headerBuf = getRecord();
 
-    if (hasHitEOF) {
+    if (headerBuf == null) {
         currEntry = null;
         return null;
+    }
+
+    // Input validation: ensure headerBuf is expected size and format
+    if (headerBuf.length != buffer.getRecordSize()) {
+        throw new IOException("Invalid header block size: " + headerBuf.length);
     }
 
     currEntry = new TarArchiveEntry(headerBuf);
@@ -30,38 +35,62 @@
 
     if (currEntry.isGNULongNameEntry()) {
         // read in the name
-        StringBuffer longName = new StringBuffer();
+        StringBuilder longName = new StringBuilder();
         byte[] buf = new byte[SMALL_BUFFER_SIZE];
         int length = 0;
-        while ((length = read(buf)) >= 0) {
-            longName.append(new String(buf, 0, length));
+        long bytesRead = 0;
+        long longNameSize = entrySize; // size of the long name from the entry
+
+        // read only as many bytes as indicated by entrySize, to avoid over-read
+        while (bytesRead < longNameSize) {
+            int bytesToRead = (int) Math.min(buf.length, longNameSize - bytesRead);
+            length = read(buf, 0, bytesToRead);
+            if (length < 0) {
+                // premature EOF while reading long name
+                throw new IOException("Unexpected EOF while reading long name");
+            }
+            longName.append(new String(buf, 0, length, "UTF-8"));
+            bytesRead += length;
         }
-        getNextEntry();
-        if (currEntry == null) {
-            // Bugzilla: 40334
+
+        // After reading the long name, consume any remaining bytes to reach the block size
+        long numToSkip = entrySize - bytesRead;
+        while (numToSkip > 0) {
+            long skipped = skip(numToSkip);
+            if (skipped <= 0) {
+                throw new IOException("Failed to skip padding after long name");
+            }
+            numToSkip -= skipped;
+        }
+
+        // move to next header entry
+        TarArchiveEntry next = getNextTarEntry();
+        if (next == null) {
             // Malformed tar file - long entry name not followed by entry
             return null;
         }
-        // remove trailing null terminator
-        if (longName.length() > 0
-            && longName.charAt(longName.length() - 1) == 0) {
-            longName.deleteCharAt(longName.length() - 1);
+
+        // remove trailing null terminator if present
+        int len = longName.length();
+        if (len > 0 && longName.charAt(len - 1) == '\0') {
+            longName.deleteCharAt(len - 1);
         }
-        currEntry.setName(longName.toString());
+        next.setName(longName.toString());
+        currEntry = next;
+        entrySize = currEntry.getSize();
+        entryOffset = 0;
     }
 
-    if (currEntry.isPaxHeader()){ // Process Pax headers
+    if (currEntry.isPaxHeader()) { // Process Pax headers
         paxHeaders();
     }
 
-    if (currEntry.isGNUSparse()){ // Process sparse files
+    if (currEntry.isGNUSparse()) { // Process sparse files
         readGNUSparse();
     }
 
-    // If the size of the next element in the archive has changed
-    // due to a new size being reported in the posix header
-    // information, we update entrySize here so that it contains
-    // the correct value.
+    // Update entrySize again in case it changed due to pax headers or sparse info
     entrySize = currEntry.getSize();
     return currEntry;
 }
+
