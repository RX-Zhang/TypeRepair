--- 
+++ 
@@ -1,37 +1,54 @@
 protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                          int nextLineTabStop, String text)
 {
-    int pos = findWrapPos(text, width, 0);
-
-    if (pos == -1)
+    if (width <= 0)
     {
-        sb.append(rtrim(text));
-
+        throw new IllegalArgumentException("Width must be positive.");
+    }
+    if (text == null)
+    {
         return sb;
     }
-    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
-    // all following lines must be padded with nextLineTabStop space 
-    // characters
+    int pos = -1;
+    int startPos = 0;
     final String padding = createPadding(nextLineTabStop);
 
-    while (true)
+    while (startPos < text.length())
     {
-        int lastPos = pos;
-        text = padding + text.substring(pos).trim();
-        pos = findWrapPos(text, width, 0);
+        pos = findWrapPos(text, width, startPos);
 
+        // no wrap position found or line fits in width
         if (pos == -1)
         {
-            sb.append(text);
-
-            return sb;
-        } else
-        if (pos == lastPos)
-        {
-            throw new RuntimeException("Text too long for line - throwing exception to avoid infinite loop [CLI-162]: " + text);
+            sb.append(rtrim(text.substring(startPos)));
+            break;
         }
 
-        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+        // avoid infinite loop when findWrapPos returns startPos or less
+        if (pos <= startPos)
+        {
+            // forcibly wrap at width (or end of line if shorter)
+            pos = Math.min(startPos + width, text.length());
+            sb.append(rtrim(text.substring(startPos, pos))).append(defaultNewLine);
+            startPos = pos;
+        }
+        else
+        {
+            sb.append(rtrim(text.substring(startPos, pos))).append(defaultNewLine);
+            startPos = pos;
+
+            // skip whitespace characters at start of next line
+            while (startPos < text.length() && Character.isWhitespace(text.charAt(startPos)))
+            {
+                startPos++;
+            }
+
+            // insert padding before next line text
+            sb.append(padding);
+        }
     }
+
+    return sb;
 }
+
