--- 
+++ 
@@ -2,7 +2,7 @@
         BeanProperty property) throws JsonMappingException
 {
     // May need to resolve types for delegate-based creators:
-    JsonDeserializer<Object> delegateDeser = null;
+    JsonDeserializer<Object> delegateDeser = _delegateDeserializer;
     if (_valueInstantiator != null) {
         if (_valueInstantiator.canCreateUsingDelegate()) {
             JavaType delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());
@@ -11,12 +11,14 @@
                         +": value instantiator ("+_valueInstantiator.getClass().getName()
                         +") returned true for 'canCreateUsingDelegate()', but null for 'getDelegateType()'");
             }
-            delegateDeser = findDeserializer(ctxt, delegateType, property);
+            if (delegateDeser == null) {
+                delegateDeser = findDeserializer(ctxt, delegateType, property);
+            } else {
+                delegateDeser = ctxt.handleSecondaryContextualization(delegateDeser, property, delegateType);
+            }
         }
     }
     // [databind#1043]: allow per-property allow-wrapping of single overrides:
-    // 11-Dec-2015, tatu: Should we pass basic `Collection.class`, or more refined? Mostly
-    //   comes down to "List vs Collection" I suppose... for now, pass Collection
     Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,
             JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);
     // also, often value deserializer is resolved here:
@@ -37,3 +39,4 @@
     }
     return withResolved(delegateDeser, valueDeser, valueTypeDeser, unwrapSingle);
 }
+
