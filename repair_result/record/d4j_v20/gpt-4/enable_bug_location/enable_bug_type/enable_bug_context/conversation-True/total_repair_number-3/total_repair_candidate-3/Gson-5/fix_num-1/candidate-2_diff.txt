--- 
+++ 
@@ -25,7 +25,7 @@
 
         // if the value has no time component (and no time zone), we are done
         boolean hasT = checkOffset(date, offset, 'T');
-        
+
         if (!hasT && (date.length() <= offset)) {
             Calendar calendar = new GregorianCalendar(year, month - 1, day);
 
@@ -54,7 +54,7 @@
                     // milliseconds can be optional in the format
                     if (checkOffset(date, offset, '.')) {
                         offset += 1;
-                        int endOffset = indexOfNonDigit(date, offset + 1); // assume at least one digit
+                        int endOffset = indexOfNonDigit(date, offset); // assume at least one digit
                         int parseEndOffset = Math.min(endOffset, offset + 3); // parse up to 3 digits
                         int fraction = parseInt(date, offset, parseEndOffset);
                         // compensate for "missing" digits
@@ -89,18 +89,20 @@
             String timezoneOffset = date.substring(offset);
 
             // When timezone has no minutes, we should append it, valid timezones are, for example: +00:00, +0000 and +00
+            // Normalize timezone offset to format +HH:mm for TimeZone parsing
+
+            if (timezoneOffset.length() == 3) { // e.g., +01
+                timezoneOffset = timezoneOffset + ":00";
+            } else if (timezoneOffset.length() == 5 && timezoneOffset.indexOf(':') == -1) { // e.g., +0100
+                timezoneOffset = timezoneOffset.substring(0, 3) + ":" + timezoneOffset.substring(3, 5);
+            }
 
             offset += timezoneOffset.length();
-            // 18-Jun-2015, tatu: Minor simplification, skip offset of "+0000"/"+00:00"
-            if ("+0000".equals(timezoneOffset) || "+00:00".equals(timezoneOffset)) {
+
+            if ("+00:00".equals(timezoneOffset) || "+0000".equals(timezoneOffset) || "+00".equals(timezoneOffset)) {
                 timezone = TIMEZONE_UTC;
             } else {
-                // 18-Jun-2015, tatu: Looks like offsets only work from GMT, not UTC...
-                //    not sure why, but that's the way it looks. Further, Javadocs for
-                //    `java.util.TimeZone` specifically instruct use of GMT as base for
-                //    custom timezones... odd.
                 String timezoneId = "GMT" + timezoneOffset;
-                  String timezoneId = "UTC" + timezoneOffset;
 
                 timezone = TimeZone.getTimeZone(timezoneId);
 
@@ -112,7 +114,7 @@
                      *   If it becomes a perf problem, add 'loose' comparison instead.
                      */
                     String cleaned = act.replace(":", "");
-                    if (!cleaned.equals(timezoneId)) {
+                    if (!cleaned.equals(timezoneId.replace(":", ""))) {
                         throw new IndexOutOfBoundsException("Mismatching time zone indicator: "+timezoneId+" given, resolves to "
                                 +timezone.getID());
                     }
@@ -143,7 +145,7 @@
     } catch (IllegalArgumentException e) {
         fail = e;
     }
-    String input = (date == null) ? null : ('"' + date + "'");
+    String input = (date == null) ? null : ('"' + date + '"');
     String msg = fail.getMessage();
     if (msg == null || msg.isEmpty()) {
         msg = "("+fail.getClass().getName()+")";
@@ -152,3 +154,4 @@
     ex.initCause(fail);
     throw ex;
 }
+
