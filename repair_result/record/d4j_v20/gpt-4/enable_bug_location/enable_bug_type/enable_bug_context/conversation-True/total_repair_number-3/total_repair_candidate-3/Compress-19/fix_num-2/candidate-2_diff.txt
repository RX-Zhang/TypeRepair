--- 
+++ 
@@ -4,11 +4,36 @@
                                         boolean hasDiskStart)
     throws ZipException {
     if (rawCentralDirectoryData != null) {
-        int expectedLength = (hasUncompressedSize ? DWORD : 0)
-            + (hasCompressedSize ? DWORD : 0)
-            + (hasRelativeHeaderOffset ? DWORD : 0)
-            + (hasDiskStart ? WORD : 0);
-        if (rawCentralDirectoryData.length != expectedLength) {
+        int expectedLength = 0;
+        if (hasUncompressedSize) {
+            expectedLength += DWORD;
+        }
+        if (hasCompressedSize) {
+            expectedLength += DWORD;
+        }
+        if (hasRelativeHeaderOffset) {
+            expectedLength += DWORD;
+        }
+        if (hasDiskStart) {
+            expectedLength += WORD;
+        }
+
+        // Adjust expected length according to actual non-null fields
+        int actualLength = 0;
+        if (size != null) {
+            actualLength += DWORD;
+        }
+        if (compressedSize != null) {
+            actualLength += DWORD;
+        }
+        if (relativeHeaderOffset != null) {
+            actualLength += DWORD;
+        }
+        if (diskStart != null) {
+            actualLength += WORD;
+        }
+
+        if (rawCentralDirectoryData.length < expectedLength) {
             throw new ZipException("central directory zip64 extended"
                                    + " information extra field's length"
                                    + " doesn't match central directory"
@@ -16,6 +41,7 @@
                                    + expectedLength + " but is "
                                    + rawCentralDirectoryData.length);
         }
+
         int offset = 0;
         if (hasUncompressedSize) {
             size = new ZipEightByteInteger(rawCentralDirectoryData, offset);
@@ -37,3 +63,4 @@
         }
     }
 }
+
