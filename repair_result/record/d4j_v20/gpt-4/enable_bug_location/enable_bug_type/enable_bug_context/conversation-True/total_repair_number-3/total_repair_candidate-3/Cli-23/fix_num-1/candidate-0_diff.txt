--- 
+++ 
@@ -1,6 +1,10 @@
 protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                          int nextLineTabStop, String text)
 {
+    if (width < 1) {
+        throw new IllegalArgumentException("Width must be positive");
+    }
+
     int pos = findWrapPos(text, width, 0);
 
     if (pos == -1)
@@ -15,10 +19,13 @@
     // characters
     final String padding = createPadding(nextLineTabStop);
 
+    int startPos = pos;
     while (true)
     {
         int lastPos = pos;
-        text = padding + text.substring(pos).trim();
+        // Trim text from startPos, add padding at the beginning
+        String trimmedText = text.substring(startPos).trim();
+        text = padding + trimmedText;
         pos = findWrapPos(text, width, 0);
 
         if (pos == -1)
@@ -26,12 +33,25 @@
             sb.append(text);
 
             return sb;
-        } else
-        if (pos == lastPos)
+        }
+        else if (pos == lastPos)
         {
-            throw new RuntimeException("Text too long for line - throwing exception to avoid infinite loop [CLI-162]: " + text);
+            // This indicates no progress in wrapping; to avoid infinite loop, 
+            // forcibly break the line at width or at the length of the text
+            if (width < text.length()) {
+                sb.append(rtrim(text.substring(0, width))).append(defaultNewLine);
+                text = padding + text.substring(width).trim();
+                pos = findWrapPos(text, width, 0);
+                startPos = 0;
+                continue;
+            } else {
+                sb.append(text);
+                return sb;
+            }
         }
 
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+        startPos = pos;
     }
 }
+
