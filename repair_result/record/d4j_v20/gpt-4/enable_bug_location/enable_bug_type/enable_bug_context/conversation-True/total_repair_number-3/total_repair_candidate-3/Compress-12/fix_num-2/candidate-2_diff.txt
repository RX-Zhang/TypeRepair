--- 
+++ 
@@ -9,7 +9,7 @@
         while (numToSkip > 0) {
             long skipped = skip(numToSkip);
             if (skipped <= 0) {
-                throw new RuntimeException("failed to skip current tar entry");
+                throw new IOException("failed to skip current tar entry");
             }
             numToSkip -= skipped;
         }
@@ -19,7 +19,7 @@
 
     byte[] headerBuf = getRecord();
 
-    if (hasHitEOF) {
+    if (headerBuf == null) {
         currEntry = null;
         return null;
     }
@@ -30,38 +30,47 @@
 
     if (currEntry.isGNULongNameEntry()) {
         // read in the name
-        StringBuffer longName = new StringBuffer();
+        StringBuilder longName = new StringBuilder();
         byte[] buf = new byte[SMALL_BUFFER_SIZE];
-        int length = 0;
-        while ((length = read(buf)) >= 0) {
-            longName.append(new String(buf, 0, length));
+        int length;
+        long remaining = (entrySize > 0) ? entrySize : Long.MAX_VALUE;
+
+        while (remaining > 0 && (length = read(buf, 0, (int) Math.min(buf.length, remaining))) > 0) {
+            longName.append(new String(buf, 0, length, "UTF-8"));
+            remaining -= length;
         }
-        getNextEntry();
-        if (currEntry == null) {
-            // Bugzilla: 40334
+
+        // Skip the GNULongNameEntry header that follows the long name
+        TarArchiveEntry nextEntry = getNextTarEntry();
+        if (nextEntry == null) {
             // Malformed tar file - long entry name not followed by entry
             return null;
         }
+        currEntry = nextEntry;
+
         // remove trailing null terminator
-        if (longName.length() > 0
-            && longName.charAt(longName.length() - 1) == 0) {
-            longName.deleteCharAt(longName.length() - 1);
+        int lastIndex = longName.length() - 1;
+        if (lastIndex >= 0 && longName.charAt(lastIndex) == '\0') {
+            longName.deleteCharAt(lastIndex);
         }
         currEntry.setName(longName.toString());
+        entrySize = currEntry.getSize();
+        entryOffset = 0;
+        readBuf = null;
     }
 
-    if (currEntry.isPaxHeader()){ // Process Pax headers
+    if (currEntry.isPaxHeader()) { // Process Pax headers
         paxHeaders();
+        entrySize = currEntry.getSize();
+        entryOffset = 0;
     }
 
-    if (currEntry.isGNUSparse()){ // Process sparse files
+    if (currEntry.isGNUSparse()) { // Process sparse files
         readGNUSparse();
+        entrySize = currEntry.getSize();
+        entryOffset = 0;
     }
 
-    // If the size of the next element in the archive has changed
-    // due to a new size being reported in the posix header
-    // information, we update entrySize here so that it contains
-    // the correct value.
-    entrySize = currEntry.getSize();
     return currEntry;
 }
+
