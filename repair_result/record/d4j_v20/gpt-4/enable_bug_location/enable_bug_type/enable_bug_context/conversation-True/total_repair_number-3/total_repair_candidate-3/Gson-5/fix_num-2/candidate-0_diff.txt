--- 
+++ 
@@ -54,7 +54,7 @@
                     // milliseconds can be optional in the format
                     if (checkOffset(date, offset, '.')) {
                         offset += 1;
-                        int endOffset = indexOfNonDigit(date, offset + 1); // assume at least one digit
+                        int endOffset = indexOfNonDigit(date, offset); // assume at least one digit
                         int parseEndOffset = Math.min(endOffset, offset + 3); // parse up to 3 digits
                         int fraction = parseInt(date, offset, parseEndOffset);
                         // compensate for "missing" digits
@@ -86,11 +86,29 @@
             timezone = TIMEZONE_UTC;
             offset += 1;
         } else if (timezoneIndicator == '+' || timezoneIndicator == '-') {
-            String timezoneOffset = date.substring(offset);
+            int timezoneEndOffset = offset + 3;
+            if (date.length() > offset + 5 && date.charAt(offset + 3) == ':') {
+                // e.g. +01:00 format
+                timezoneEndOffset = offset + 6;
+            } else if (date.length() > offset + 4 && !Character.isDigit(date.charAt(offset + 3))) {
+                // handle shorter tz like +01, +11 etc
+                timezoneEndOffset = offset + 3;
+            } else if (date.length() > offset + 5) {
+                timezoneEndOffset = offset + 5;
+            } else {
+                timezoneEndOffset = date.length();
+            }
+
+            // Adjust timezoneEndOffset if it exceeds string length
+            if (timezoneEndOffset > date.length()) {
+                timezoneEndOffset = date.length();
+            }
+
+            String timezoneOffset = date.substring(offset, timezoneEndOffset);
+            offset = timezoneEndOffset;
 
             // When timezone has no minutes, we should append it, valid timezones are, for example: +00:00, +0000 and +00
 
-            offset += timezoneOffset.length();
             // 18-Jun-2015, tatu: Minor simplification, skip offset of "+0000"/"+00:00"
             if ("+0000".equals(timezoneOffset) || "+00:00".equals(timezoneOffset)) {
                 timezone = TIMEZONE_UTC;
@@ -100,7 +118,6 @@
                 //    `java.util.TimeZone` specifically instruct use of GMT as base for
                 //    custom timezones... odd.
                 String timezoneId = "GMT" + timezoneOffset;
-                  String timezoneId = "UTC" + timezoneOffset;
 
                 timezone = TimeZone.getTimeZone(timezoneId);
 
@@ -112,7 +129,7 @@
                      *   If it becomes a perf problem, add 'loose' comparison instead.
                      */
                     String cleaned = act.replace(":", "");
-                    if (!cleaned.equals(timezoneId)) {
+                    if (!cleaned.equals(timezoneId.replace(":", ""))) {
                         throw new IndexOutOfBoundsException("Mismatching time zone indicator: "+timezoneId+" given, resolves to "
                                 +timezone.getID());
                     }
@@ -143,7 +160,7 @@
     } catch (IllegalArgumentException e) {
         fail = e;
     }
-    String input = (date == null) ? null : ('"' + date + "'");
+    String input = (date == null) ? null : ('"' + date + '"');
     String msg = fail.getMessage();
     if (msg == null || msg.isEmpty()) {
         msg = "("+fail.getClass().getName()+")";
@@ -152,3 +169,4 @@
     ex.initCause(fail);
     throw ex;
 }
+
