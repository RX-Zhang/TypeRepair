--- 
+++ 
@@ -5,7 +5,19 @@
     while (bitsCachedSize < count) {
         final long nextByte = in.read();
         if (nextByte < 0) {
-            return nextByte;
+            if (bitsCachedSize == 0) {
+                return -1;
+            }
+            // Return the remaining bits if any, or -1 if none.
+            final long bitsOut;
+            if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
+                bitsOut = bitsCached & MASKS[bitsCachedSize];
+            } else {
+                bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];
+            }
+            bitsCachedSize = 0;
+            bitsCached = 0;
+            return bitsOut;
         }
         if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
             bitsCached |= (nextByte << bitsCachedSize);
@@ -15,15 +27,16 @@
         }
         bitsCachedSize += 8;
     }
-        // bitsCachedSize >= 57 and left-shifting it 8 bits would cause an overflow
-    
+
     final long bitsOut;
-        if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
-            bitsOut = (bitsCached & MASKS[count]);
-            bitsCached >>>= count;
-        } else {
-            bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];
-        }
-        bitsCachedSize -= count;
+    if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
+        bitsOut = (bitsCached & MASKS[count]);
+        bitsCached >>>= count;
+    } else {
+        bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];
+        bitsCached &= MASKS[bitsCachedSize - count];  // Clear the bits that have been read
+    }
+    bitsCachedSize -= count;
     return bitsOut;
 }
+
