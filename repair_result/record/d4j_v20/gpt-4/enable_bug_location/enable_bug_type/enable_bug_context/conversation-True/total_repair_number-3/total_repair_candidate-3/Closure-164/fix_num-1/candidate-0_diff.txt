--- 
+++ 
@@ -8,68 +8,70 @@
   // This is described in Draft 2 of the ES4 spec,
   // Section 3.4.7: Subtyping Function Types.
 
-  // this.returnType <: that.returnType (covariant)
-  if (!this.returnType.isSubtype(that.returnType)) {
+  // that.returnType <: this.returnType (covariant return type)
+  if (!that.returnType.isSubtype(this.returnType)) {
     return false;
   }
 
-  // that.paramType[i] <: this.paramType[i] (contravariant)
+  // this.paramType[i] <: that.paramType[i] (contravariant parameters)
   //
   // If this.paramType[i] is required,
   // then that.paramType[i] is required.
   //
-  // In theory, the "required-ness" should work in the other direction as
-  // well. In other words, if we have
-  //
-  // function f(number, number) {}
-  // function g(number) {}
-  //
-  // Then f *should* not be a subtype of g, and g *should* not be
-  // a subtype of f. But in practice, we do not implement it this way.
-  // We want to support the use case where you can pass g where f is
-  // expected, and pretend that g ignores the second argument.
-  // That way, you can have a single "no-op" function, and you don't have
-  // to create a new no-op function for every possible type signature.
-  //
-  // So, in this case, g < f, but f !< g
-  Node thisParam = parameters.getFirstChild();
+  // We want to support the use case where a function with fewer parameters
+  // can be a subtype of a function with more parameters if the extra 
+  // parameters are ignored. Hence, we allow that.paramType list to be 
+  // shorter than this.paramType list if that corresponds to optional 
+  // parameters or var_args.
+
+  Node thisParam = this.parameters.getFirstChild();
   Node thatParam = that.parameters.getFirstChild();
-  while (thisParam != null && thatParam != null) {
+
+  while (thisParam != null) {
     JSType thisParamType = thisParam.getJSType();
-    JSType thatParamType = thatParam.getJSType();
-    if (thisParamType != null) {
-      if (thatParamType == null ||
-          !thatParamType.isSubtype(thisParamType)) {
+
+    if (thatParam == null) {
+      // If that is missing parameters that this has and this parameter is required
+      // then that cannot be a supertype.
+      if (!thisParam.isOptionalArg() && !thisParam.isVarArgs()) {
         return false;
+      }
+      // Otherwise, treat missing thatParam as unknown which is supertype of thisParamType
+      // so continue checking other parameters
+    } else {
+      JSType thatParamType = thatParam.getJSType();
+      if (thisParamType != null) {
+        if (thatParamType == null || !thisParamType.isSubtype(thatParamType)) {
+          return false;
+        }
       }
     }
 
     boolean thisIsVarArgs = thisParam.isVarArgs();
-    boolean thatIsVarArgs = thatParam.isVarArgs();
+    boolean thatIsVarArgs = thatParam != null && thatParam.isVarArgs();
 
-    // "that" can't be a supertype, because it's missing a required argument.
-      // NOTE(nicksantos): In our type system, we use {function(...?)} and
-      // {function(...NoType)} to to indicate that arity should not be
-      // checked. Strictly speaking, this is not a correct formulation,
-      // because now a sub-function can required arguments that are var_args
-      // in the super-function. So we special-case this.
+    if (thisIsVarArgs && thatIsVarArgs) {
+      // Both var_args indicate end of parameters
+      break;
+    }
 
-    // don't advance if we have variable arguments
     if (!thisIsVarArgs) {
       thisParam = thisParam.getNext();
-    }
-    if (!thatIsVarArgs) {
-      thatParam = thatParam.getNext();
+    } else {
+      // If this is var_args, no advance since var_args represents remaining args
+      thisParam = null;
     }
 
-    // both var_args indicates the end
-    if (thisIsVarArgs && thatIsVarArgs) {
-      thisParam = null;
+    if (thatParam != null && !thatIsVarArgs) {
+      thatParam = thatParam.getNext();
+    } else {
       thatParam = null;
     }
   }
 
-  // "that" can't be a supertype, because it's missing a required arguement.
+  // We allow that to have more parameters than this, because extra parameters
+  // in a supertype function can be ignored by a subtype function.
 
   return true;
 }
+
