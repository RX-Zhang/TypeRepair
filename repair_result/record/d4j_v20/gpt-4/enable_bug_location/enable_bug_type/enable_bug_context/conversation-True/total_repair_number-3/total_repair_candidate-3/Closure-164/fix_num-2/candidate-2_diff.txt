--- 
+++ 
@@ -48,13 +48,13 @@
     boolean thatIsVarArgs = thatParam.isVarArgs();
 
     // "that" can't be a supertype, because it's missing a required argument.
-      // NOTE(nicksantos): In our type system, we use {function(...?)} and
-      // {function(...NoType)} to to indicate that arity should not be
-      // checked. Strictly speaking, this is not a correct formulation,
-      // because now a sub-function can required arguments that are var_args
-      // in the super-function. So we special-case this.
+    // NOTE(nicksantos): In our type system, we use {function(...?)} and
+    // {function(...NoType)} to to indicate that arity should not be
+    // checked. Strictly speaking, this is not a correct formulation,
+    // because now a sub-function can required arguments that are var_args
+    // in the super-function. So we special-case this.
 
-    // don't advance if we have variable arguments
+    // Don't advance parameters if variable arguments are involved.
     if (!thisIsVarArgs) {
       thisParam = thisParam.getNext();
     }
@@ -69,7 +69,18 @@
     }
   }
 
-  // "that" can't be a supertype, because it's missing a required arguement.
+  // Ensure all remaining required parameters in "that" are also in "this"
+  // If "that" has more parameters, they must all be optional or varargs
+  while (thatParam != null) {
+    if (!thatParam.isOptionalArg() && !thatParam.isVarArgs()) {
+      return false;
+    }
+    thatParam = thatParam.getNext();
+  }
+
+  // If "this" has more parameters than "that", it is allowed to be a subtype,
+  // because of the no-arity checking exceptions explained above.
 
   return true;
 }
+
