--- 
+++ 
@@ -3,22 +3,22 @@
     // 23-May-2017, tatu: To be honest, code here is rather hairy and I don't like all
     //    conditionals; and it seems odd to return `null` but NOT considering input
     //    as closed... would love a rewrite to simplify/clear up logic here.
-    
+
     // Check for _allowMultipleMatches - false and at least there is one token - which is _currToken
     // check for no buffered context _exposedContext - null
     // If all the conditions matches then check for scalar / non-scalar property
     if (!_allowMultipleMatches && (_currToken != null) && (_exposedContext == null)) {
         //if not scalar and ended successfully, and !includePath, then return null
-            if (_currToken.isStructEnd()) {
-                if (_headContext.isStartHandled()) {
-                    return (_currToken = null);
-                }
-            } else if (_currToken.isScalarValue()) {
-                //else if scalar, and scalar not present in obj/array and !includePath and INCLUDE_ALL matched once
-                // then return null 
-                if (!_headContext.isStartHandled() && (_itemFilter == TokenFilter.INCLUDE_ALL)) {
-                    return (_currToken = null);
-                }
+        if (_currToken.isStructEnd()) {
+            if (_headContext.isStartHandled()) {
+                return (_currToken = null);
+            }
+        } else if (_currToken.isScalarValue()) {
+            //else if scalar, and scalar not present in obj/array and !includePath and INCLUDE_ALL matched once
+            // then return null 
+            if (!_headContext.isStartHandled() && (_itemFilter == TokenFilter.INCLUDE_ALL)) {
+                return (_currToken = null);
+            }
         }
     }
     // Anything buffered?
@@ -36,21 +36,11 @@
                 _exposedContext = null;
                 if (ctxt.inArray()) {
                     t = delegate.getCurrentToken();
-s this guaranteed to work without further checks?
-                      if (t != JsonToken.START_ARRAY) {
-                    _currToken = t;
-                    return t;
-                }
-
-                // Almost! Most likely still have the current token;
-                // with the sole exception of 
-                /*
-                t = delegate.getCurrentToken();
-                if (t != JsonToken.FIELD_NAME) {
-                    _currToken = t;
-                    return t;
-                }
-                */
+                    if (t != JsonToken.START_ARRAY) {
+                        _currToken = t;
+                        return t;
+                    }
+                }
                 break;
             }
             // If not, traverse down the context chain
@@ -72,7 +62,7 @@
 
     // otherwise... to include or not?
     TokenFilter f;
-    
+
     switch (t.id()) {
     case ID_START_ARRAY:
         f = _itemFilter;
@@ -99,7 +89,7 @@
             return (_currToken = t);
         }
         _headContext = _headContext.createChildArrayContext(f, false);
-        
+
         // Also: only need buffering if parent path to be included
         if (_includePath) {
             t = _nextTokenWithBuffering(_headContext);
@@ -176,9 +166,11 @@
                     if (_includeImmediateParent && !_headContext.isStartHandled()) {
                         t = _headContext.nextTokenToRead(); // returns START_OBJECT but also marks it handled
                         _exposedContext = _headContext;
+                        return (_currToken = t);
                     }
-                }
-                return (_currToken = t);
+                } else {
+                    return (_currToken = t);
+                }
             }
             if (f == null) {
                 delegate.nextToken();
@@ -204,8 +196,8 @@
                     return t;
                 }
             }
-            break;
-        }
+        }
+        break;
 
     default: // scalar value
         f = _itemFilter;
@@ -226,3 +218,4 @@
     // We get here if token was not yet found; offlined handling
     return _nextToken2();
 }
+
