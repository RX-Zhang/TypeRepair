--- 
+++ 
@@ -1,37 +1,63 @@
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
-    long    result = 0;
+    if (length < 2) {
+        throw new IllegalArgumentException("length should be at least 2 bytes long");
+    }
+    long result = 0;
     boolean stillPadding = true;
-    int     end = offset + length;
-    int     start = offset;
+    int end = offset + length;
+    int start = offset;
 
-    for (int i = start; i < end; i++){
+    // Validate that the entire buffer consists only of NULs when expected
+    boolean allZero = true;
+    for (int i = start; i < end; i++) {
+        if (buffer[i] != 0) {
+            allZero = false;
+            break;
+        }
+    }
+    if (allZero) {
+        throw new IllegalArgumentException("Buffer is all NUL bytes");
+    }
+
+    for (int i = start; i < end; i++) {
         final byte currentByte = buffer[i];
+
         if (currentByte == 0) {
+            // Trailing NUL - end of number
             break;
         }
 
-    // Skip leading spaces
-        if (currentByte == (byte) ' ' || currentByte == '0') {
+        // Skip leading spaces and zeros
+        if (currentByte == (byte) ' ' || currentByte == (byte) '0') {
             if (stillPadding) {
-               continue;
-        }
+                continue;
+            }
             if (currentByte == (byte) ' ') {
-            break;
+                // Trailing space after number
+                break;
             }
+        } else if (currentByte == (byte) ' ') {
+            // Embedded space not allowed
+            throw new IllegalArgumentException(
+                exceptionMessage(buffer, offset, length, i, currentByte));
         }
 
-    // Must have trailing NUL or space
-    // May have additional NUL or space
+        stillPadding = false;
 
-        stillPadding = false;
-        // CheckStyle:MagicNumber OFF
-        if (currentByte < '0' || currentByte > '7'){
+        // Check for valid octal digit
+        if (currentByte < '0' || currentByte > '7') {
             throw new IllegalArgumentException(
-                    exceptionMessage(buffer, offset, length, start, currentByte));
+                    exceptionMessage(buffer, offset, length, i, currentByte));
         }
         result = (result << 3) + (currentByte - '0'); // convert from ASCII
-        // CheckStyle:MagicNumber ON
+    }
+
+    // Confirm that the last byte is either NUL or space (trailer)
+    byte lastByte = buffer[end - 1];
+    if (lastByte != 0 && lastByte != (byte) ' ') {
+        throw new IllegalArgumentException("No trailing NUL or space byte");
     }
 
     return result;
 }
+
