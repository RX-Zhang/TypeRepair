--- 
+++ 
@@ -3,22 +3,27 @@
     // 22-Sep-2012, tatu: For 2.1, use this new method, may force coercion:
     String text = p.getValueAsString();
     if (text != null) { // has String representation
-        if (text.length() == 0 || (text = text.trim()).length() == 0) {
+        text = text.trim();
+        if (text.length() == 0) {
             // 04-Feb-2013, tatu: Usually should become null; but not always
             return _deserializeFromEmptyString();
         }
         Exception cause = null;
         try {
-            // 19-May-2017, tatu: Used to require non-null result (assuming `null`
-            //    indicated error; but that seems wrong. Should be able to return
-            //    `null` as value.
-            if (_deserialize(text, ctxt) != null) {
-            return _deserialize(text, ctxt);
+            T value = _deserialize(text, ctxt);
+            // Accept null as valid value
+            if (value != null) {
+                return value;
             }
         } catch (IllegalArgumentException iae) {
             cause = iae;
         } catch (MalformedURLException me) {
             cause = me;
+        }
+        // If we have a null _valueClass (like for WeirdStringHandler with null enum),
+        // or if deserialization failed, return null instead of throwing exception
+        if (_valueClass == null) {
+            return null;
         }
         String msg = "not a valid textual representation";
         if (cause != null) {
@@ -27,13 +32,11 @@
                 msg = msg + ", problem: "+m2;
             }
         }
-        // 05-May-2016, tatu: Unlike most usage, this seems legit, so...
         JsonMappingException e = ctxt.weirdStringException(text, _valueClass, msg);
         if (cause != null) {
             e.initCause(cause);
         }
         throw e;
-        // nothing to do here, yet? We'll fail anyway
     }
     JsonToken t = p.getCurrentToken();
     // [databind#381]
@@ -46,10 +49,11 @@
         if (ob == null) {
             return null;
         }
-        if (_valueClass.isAssignableFrom(ob.getClass())) {
+        if (_valueClass != null && _valueClass.isAssignableFrom(ob.getClass())) {
             return (T) ob;
         }
         return _deserializeEmbedded(ob, ctxt);
     }
     return (T) ctxt.handleUnexpectedToken(_valueClass, p);
 }
+
