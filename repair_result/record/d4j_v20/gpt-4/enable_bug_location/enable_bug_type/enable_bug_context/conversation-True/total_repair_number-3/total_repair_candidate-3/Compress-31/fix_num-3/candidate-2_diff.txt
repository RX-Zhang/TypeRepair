--- 
+++ 
@@ -1,15 +1,10 @@
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
-    long    result = 0;
-    int     end = offset + length;
-    int     start = offset;
-
     if (length < 2){
         throw new IllegalArgumentException("Length "+length+" must be at least 2");
     }
 
-    if (buffer[start] == 0) {
-        return 0L;
-    }
+    int end = offset + length;
+    int start = offset;
 
     // Skip leading spaces
     while (start < end){
@@ -20,6 +15,18 @@
         }
     }
 
+    // If the entire buffer is zeros or spaces, return 0
+    boolean allZeroOrSpace = true;
+    for (int i = start; i < end; i++) {
+        if (buffer[i] != 0 && buffer[i] != ' ') {
+            allZeroOrSpace = false;
+            break;
+        }
+    }
+    if (allZeroOrSpace) {
+        return 0L;
+    }
+
     // Trim all trailing NULs and spaces.
     // The ustar and POSIX tar specs require a trailing NUL or
     // space but some implementations use the extra digit for big
@@ -27,10 +34,13 @@
     byte trailer = buffer[end - 1];
     while (start < end && (trailer == 0 || trailer == ' ')) {
         end--;
-        trailer = buffer[end - 1];
+        if (start < end) {
+            trailer = buffer[end - 1];
+        }
     }
 
-    for ( ;start < end; start++) {
+    long result = 0;
+    for (; start < end; start++) {
         final byte currentByte = buffer[start];
         if (currentByte == 0) {
             break;
@@ -46,3 +56,4 @@
 
     return result;
 }
+
