--- 
+++ 
@@ -11,7 +11,11 @@
         //    compatibility -- needed later anyway, and not doing so may open
         //    security issues.
         JavaType t = tf.constructFromCanonical(id);
-            // Probably cleaner to have a method in `TypeFactory` but can't add in patch
+        // ensure that the resulting type is a subtype of _baseType
+        if (!_baseType.getRawClass().isAssignableFrom(t.getRawClass())) {
+            throw new JsonMappingException(ctxt.getParser(),
+                String.format("Invalid type id '%s': not subtype of %s", id, _baseType));
+        }
         return t;
     }
     Class<?> cls;
@@ -30,5 +34,12 @@
     } catch (Exception e) {
         throw new IllegalArgumentException("Invalid type id '"+id+"' (for id type 'Id.class'): "+e.getMessage(), e);
     }
+    // ensure that the found class is subtype of _baseType
+    if (!_baseType.getRawClass().isAssignableFrom(cls)) {
+        throw new JsonMappingException(ctxt.getParser(),
+            String.format("Invalid type id '%s': class %s not subtype of %s",
+                id, cls.getName(), _baseType));
+    }
     return tf.constructSpecializedType(_baseType, cls);
 }
+
