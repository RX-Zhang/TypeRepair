--- 
+++ 
@@ -8,11 +8,13 @@
         throw new IllegalArgumentException("Mark is not supported.");
     }
 
-    final byte[] signature = new byte[12];
-    in.mark(signature.length);
     try {
+        // Read first 12 bytes for initial signature check
+        final byte[] signature = new byte[12];
+        in.mark(signature.length);
         int signatureLength = in.read(signature);
         in.reset();
+
         if (ZipArchiveInputStream.matches(signature, signatureLength)) {
             return new ZipArchiveInputStream(in);
         } else if (JarArchiveInputStream.matches(signature, signatureLength)) {
@@ -28,6 +30,7 @@
         in.mark(dumpsig.length);
         signatureLength = in.read(dumpsig);
         in.reset();
+
         if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) {
             return new DumpArchiveInputStream(in);
         }
@@ -37,22 +40,31 @@
         in.mark(tarheader.length);
         signatureLength = in.read(tarheader);
         in.reset();
+
         if (TarArchiveInputStream.matches(tarheader, signatureLength)) {
             return new TarArchiveInputStream(in);
         }
+        
         // COMPRESS-117 - improve auto-recognition
         try {
+            // Use the available tarheader bytes to test whether it's a tar archive
             TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader));
-            tais.getNextEntry();
-            return new TarArchiveInputStream(in);
+            ArchiveEntry entry = tais.getNextEntry();
+
+            if (entry != null) {
+                // If we can read an entry, assume this is a TAR archive
+                return new TarArchiveInputStream(in);
+            }
         } catch (Exception e) { // NOPMD
             // can generate IllegalArgumentException as well as IOException
             // autodetection, simply not a TAR
             // ignored
         }
+
     } catch (IOException e) {
         throw new ArchiveException("Could not use reset and mark operations.", e);
     }
 
     throw new ArchiveException("No Archiver found for the stream signature");
 }
+
