--- 
+++ 
@@ -1,51 +1,61 @@
-Map<String, String> parsePaxHeaders(final InputStream i)
-    throws IOException {
+Map<String, String> parsePaxHeaders(final InputStream i) throws IOException {
     final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);
     // Format is "length keyword=value\n";
-    while(true){ // get length
+    while (true) { // get length
         int ch;
         int len = 0;
         int read = 0;
-        while((ch = i.read()) != -1) {
-            read++;
-            if (ch == ' '){
-                // Get keyword
-                final ByteArrayOutputStream coll = new ByteArrayOutputStream();
-                while((ch = i.read()) != -1) {
-                    read++;
-                    if (ch == '='){ // end of keyword
-                        final String keyword = coll.toString(CharsetNames.UTF_8);
-                        // Get rest of entry
-                        final int restLen = len - read;
-                        if (restLen == 1) { // only NL
-                            headers.remove(keyword);
-                        } else {
-                            final byte[] rest = new byte[restLen];
-                            final int got = IOUtils.readFully(i, rest);
-                            if (got != restLen) {
-                                throw new IOException("Failed to read "
-                                                      + "Paxheader. Expected "
-                                                      + restLen
-                                                      + " bytes, read "
-                                                      + got);
-                            }
-                            // Drop trailing NL
-                            final String value = new String(rest, 0,
-                                                      restLen - 1, CharsetNames.UTF_8);
-                            headers.put(keyword, value);
-                        }
-                        break;
-                    }
-                    coll.write((byte) ch);
-                }
-                break; // Processed single header
+
+        // Read length field until space or EOF
+        while ((ch = i.read()) != -1) {
+            if (ch == ' ') {
+                break;
+            }
+            if (ch < '0' || ch > '9') {
+                // Invalid length character - skip this entry or break parsing
+                throw new IOException("Invalid pax header length");
             }
             len *= 10;
             len += ch - '0';
+            read++;
         }
-        if (ch == -1){ // EOF
+        if (ch == -1) { // EOF
             break;
+        }
+        if (len == 0) {
+            // No length specified, possible blank lines or invalid header; skip
+            continue;
+        }
+        // Read the rest of the record into a buffer
+        byte[] buffer = new byte[len - read];
+        int got = IOUtils.readFully(i, buffer);
+        if (got != buffer.length) {
+            throw new IOException("Failed to read PaxHeader. Expected "
+                    + buffer.length + " bytes, read " + got);
+        }
+        String entry = new String(buffer, 0, buffer.length, CharsetNames.UTF_8);
+
+        // The last character must be a newline; if not, invalid record
+        if (!entry.endsWith("\n")) {
+            throw new IOException("PaxHeader record does not end with newline");
+        }
+
+        // Remove trailing newline
+        entry = entry.substring(0, entry.length() - 1);
+
+        int equalsIndex = entry.indexOf('=');
+        if (equalsIndex == -1) {
+            throw new IOException("PaxHeader record does not contain '=': " + entry);
+        }
+        String keyword = entry.substring(0, equalsIndex);
+        String value = entry.substring(equalsIndex + 1);
+
+        if (value.isEmpty()) {
+            headers.remove(keyword);
+        } else {
+            headers.put(keyword, value);
         }
     }
     return headers;
 }
+
