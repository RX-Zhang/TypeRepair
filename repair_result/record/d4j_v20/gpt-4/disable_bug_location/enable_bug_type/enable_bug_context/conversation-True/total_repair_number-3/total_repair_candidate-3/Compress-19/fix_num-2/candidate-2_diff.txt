--- 
+++ 
@@ -4,10 +4,20 @@
                                         boolean hasDiskStart)
     throws ZipException {
     if (rawCentralDirectoryData != null) {
-        int expectedLength = (hasUncompressedSize ? DWORD : 0)
-            + (hasCompressedSize ? DWORD : 0)
-            + (hasRelativeHeaderOffset ? DWORD : 0)
-            + (hasDiskStart ? WORD : 0);
+        int expectedLength = 0;
+        if (hasUncompressedSize && hasCompressedSize) {
+            expectedLength += DWORD * 2;
+        } else if (hasUncompressedSize || hasCompressedSize) {
+            // According to LFH_MUST_HAVE_BOTH_SIZES_MSG, both sizes must be present or neither.
+            throw new ZipException("Local File Header must have both uncompressed size and compressed size");
+        }
+        if (hasRelativeHeaderOffset) {
+            expectedLength += DWORD;
+        }
+        if (hasDiskStart) {
+            expectedLength += WORD;
+        }
+
         if (rawCentralDirectoryData.length != expectedLength) {
             throw new ZipException("central directory zip64 extended"
                                    + " information extra field's length"
@@ -16,16 +26,16 @@
                                    + expectedLength + " but is "
                                    + rawCentralDirectoryData.length);
         }
+
         int offset = 0;
-        if (hasUncompressedSize) {
+        if (hasUncompressedSize && hasCompressedSize) {
             size = new ZipEightByteInteger(rawCentralDirectoryData, offset);
             offset += DWORD;
-        }
-        if (hasCompressedSize) {
             compressedSize = new ZipEightByteInteger(rawCentralDirectoryData,
                                                      offset);
             offset += DWORD;
         }
+        // If only one size is present, this is an error and should have thrown above.
         if (hasRelativeHeaderOffset) {
             relativeHeaderOffset =
                 new ZipEightByteInteger(rawCentralDirectoryData, offset);
@@ -37,3 +47,4 @@
         }
     }
 }
+
