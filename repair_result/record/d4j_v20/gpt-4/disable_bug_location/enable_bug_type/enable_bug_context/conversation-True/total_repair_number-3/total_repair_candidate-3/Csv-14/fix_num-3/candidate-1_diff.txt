--- 
+++ 
@@ -6,6 +6,7 @@
     final int end = offset + len;
 
     final char delimChar = getDelimiter();
+    final Character escapeChar = getEscapeCharacter();
     final char quoteChar = getQuoteCharacter().charValue();
 
     QuoteMode quoteModePolicy = getQuoteMode();
@@ -33,42 +34,39 @@
                 quote = true;
             }
         } else {
-            char c = value.charAt(pos);
+            // Check each character for needing quotes
+            for (int i = offset; i < end; i++) {
+                char c = value.charAt(i);
 
-            // RFC4180 (https://tools.ietf.org/html/rfc4180) TEXTDATA =  %x20-21 / %x23-2B / %x2D-7E
-            if (newRecord && (c < '0' || c > '9' && c < 'A' || c > 'Z' && c < 'a' || c > 'z')) {
-                quote = true;
-            } else if (c <= COMMENT) {
-                // Some other chars at the start of a value caused the parser to fail, so for now
-                // encapsulate if we start in anything less than '#'. We are being conservative
-                // by including the default comment char too.
-                quote = true;
-            } else {
-                while (pos < end) {
-                    c = value.charAt(pos);
-                    if (c == LF || c == CR || c == quoteChar || c == delimChar) {
-                        quote = true;
-                        break;
-                    }
-                    pos++;
+                // RFC4180 (https://tools.ietf.org/html/rfc4180) TEXTDATA =  %x20-21 / %x23-2B / %x2D-7E
+                // For the first character, also check if it requires quoting when first on new record
+                if (i == offset && newRecord && (c < '0' || (c > '9' && c < 'A') || (c > 'Z' && c < 'a') || c > 'z')) {
+                    quote = true;
+                    break;
                 }
 
-                if (!quote) {
-                    pos = end - 1;
-                    c = value.charAt(pos);
-                    // Some other chars at the end caused the parser to fail, so for now
-                    // encapsulate if we end in anything less than ' '
-                    if (c <= SP) {
-                        quote = true;
-                    }
+                if (c <= COMMENT) {
+                    // Some other chars at the start of a value caused the parser to fail, so for now
+                    // encapsulate if we start in anything less than '#'. We are being conservative
+                    // by including the default comment char too.
+                    quote = true;
+                    break;
+                }
+
+                if (c == LF || c == CR || c == quoteChar || c == delimChar) {
+                    quote = true;
+                    break;
                 }
             }
-        }
 
-        if (!quote) {
-            // no encapsulation needed - write out the original value
-            out.append(value, start, end);
-            return;
+            if (!quote) {
+                char lastChar = value.charAt(end - 1);
+                // Some other chars at the end caused the parser to fail, so for now
+                // encapsulate if we end in anything less than ' '
+                if (lastChar <= SP) {
+                    quote = true;
+                }
+            }
         }
         break;
     default:
@@ -104,3 +102,4 @@
     out.append(value, start, pos);
     out.append(quoteChar);
 }
+
