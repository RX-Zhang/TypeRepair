--- 
+++ 
@@ -1,15 +1,15 @@
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
-    long    result = 0;
-    int     end = offset + length;
-    int     start = offset;
+    long result = 0;
+    int end = offset + length;
+    int start = offset;
 
-    if (length < 2){
-        throw new IllegalArgumentException("Length "+length+" must be at least 2");
+    if (length < 2) {
+        throw new IllegalArgumentException("Length " + length + " must be at least 2");
     }
 
     boolean allNUL = true;
-    for (int i = start; i < end; i++){
-        if (buffer[i] != 0){
+    for (int i = start; i < end; i++) {
+        if (buffer[i] != 0) {
             allNUL = false;
             break;
         }
@@ -19,8 +19,8 @@
     }
 
     // Skip leading spaces
-    while (start < end){
-        if (buffer[start] == ' '){
+    while (start < end) {
+        if (buffer[start] == ' ') {
             start++;
         } else {
             break;
@@ -28,24 +28,30 @@
     }
 
     // Must have trailing NUL or space
-    byte trailer;
-    trailer = buffer[end-1];
-    if (trailer == 0 || trailer == ' '){
+    if (end - 1 < 0 || end - 1 >= buffer.length) {
+        throw new IllegalArgumentException("Invalid buffer boundaries");
+    }
+
+    byte trailer = buffer[end - 1];
+    if (trailer == 0 || trailer == ' ') {
         end--;
     } else {
         throw new IllegalArgumentException(
-                exceptionMessage(buffer, offset, length, end-1, trailer));
-    }
-    // May have additional NUL or space
-    trailer = buffer[end-1];
-    if (trailer == 0 || trailer == ' '){
-        end--;
+                exceptionMessage(buffer, offset, length, end - 1, trailer));
     }
 
-    for ( ;start < end; start++) {
+    // May have additional NUL or space
+    if (end - 1 >= 0 && end - 1 < buffer.length) {
+        trailer = buffer[end - 1];
+        if (trailer == 0 || trailer == ' ') {
+            end--;
+        }
+    }
+
+    for (; start < end; start++) {
         final byte currentByte = buffer[start];
         // CheckStyle:MagicNumber OFF
-        if (currentByte < '0' || currentByte > '7'){
+        if (currentByte < '0' || currentByte > '7') {
             throw new IllegalArgumentException(
                     exceptionMessage(buffer, offset, length, start, currentByte));
         }
@@ -55,3 +61,4 @@
 
     return result;
 }
+
