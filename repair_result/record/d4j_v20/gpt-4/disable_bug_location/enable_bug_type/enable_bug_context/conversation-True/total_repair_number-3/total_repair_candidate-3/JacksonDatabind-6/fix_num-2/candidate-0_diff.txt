--- 
+++ 
@@ -38,30 +38,45 @@
                 StringBuilder sb = new StringBuilder(dateStr);
                 sb.delete(len-3, len-2);
                 dateStr = sb.toString();
+                len = dateStr.length();
             } else if (c == '+' || c == '-') { // missing minutes
                 // let's just append '00'
                 dateStr += "00";
+                len = dateStr.length();
             }
             // Milliseconds partial or missing; and even seconds are optional
-            len = dateStr.length();
-            // remove 'T', '+'/'-' and 4-digit timezone-offset
-            c = dateStr.charAt(len-9);
-            if (Character.isDigit(c)) {
+            // Check if milliseconds missing before timezone offset
+            // We expect: date string format with timezone offset of length 5 (e.g. +hhmm)
+            // so position to insert .000 is len-5
+            c = dateStr.charAt(len-5);
+            if (c == '+' || c == '-') {
+                // timezone starts exactly here, so insert milliseconds before that
+                StringBuilder sb = new StringBuilder(dateStr);
+                // Insert .000 if missing
+                // We detect if there is already a '.' before timezone
+                int tIndex = len - 5;
+                if (dateStr.indexOf(".", tIndex - 4) == -1) {
+                    sb.insert(tIndex, ".000");
+                    dateStr = sb.toString();
+                    len = dateStr.length();
+                }
+            } else if (Character.isDigit(c)) {
                 StringBuilder sb = new StringBuilder(dateStr);
                 sb.insert(len-5, ".000");
                 dateStr = sb.toString();
+                len = dateStr.length();
             }
             df = _formatISO8601;
             if (_formatISO8601 == null) {
                 df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);
             }
         } else {
-            // If not, plain date. Easiest to just patch 'Z' in the end?
+            // If no timezone, treat as ISO8601 with Z appended and possibly milliseconds
             StringBuilder sb = new StringBuilder(dateStr);
-            // And possible also millisecond part if missing
-            int timeLen = len - dateStr.lastIndexOf('T') - 1;
-            if (timeLen <= 8) {
-                    sb.append(".000");
+            int timeIndex = dateStr.indexOf('T');
+            int timeLen = (timeIndex < 0) ? 0 : (len - timeIndex - 1);
+            if (timeLen > 0 && timeLen <= 8 && dateStr.indexOf('.') == -1) {
+                sb.append(".000");
             }
             sb.append('Z');
             dateStr = sb.toString();
@@ -74,3 +89,4 @@
     }
     return df.parse(dateStr, pos);
 }
+
