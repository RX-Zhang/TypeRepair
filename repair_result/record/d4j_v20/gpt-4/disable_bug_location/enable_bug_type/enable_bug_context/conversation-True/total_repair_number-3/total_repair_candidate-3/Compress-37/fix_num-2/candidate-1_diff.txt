--- 
+++ 
@@ -2,50 +2,59 @@
     throws IOException {
     final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);
     // Format is "length keyword=value\n";
-    while(true){ // get length
+    while (true) { // get length
         int ch;
         int len = 0;
         int read = 0;
-        while((ch = i.read()) != -1) {
+        // Read length prefix digits
+        while ((ch = i.read()) != -1) {
+            if (ch == ' ') {
+                break;
+            }
+            if (ch < '0' || ch > '9') {
+                // Invalid character in length field; skip this header
+                throw new IOException("Malformed Pax Header: invalid length field");
+            }
+            len = len * 10 + (ch - '0');
             read++;
-            if (ch == ' '){
-                // Get keyword
-                final ByteArrayOutputStream coll = new ByteArrayOutputStream();
-                while((ch = i.read()) != -1) {
-                    read++;
-                    if (ch == '='){ // end of keyword
-                        final String keyword = coll.toString(CharsetNames.UTF_8);
-                        // Get rest of entry
-                        final int restLen = len - read;
-                        if (restLen == 1) { // only NL
-                            headers.remove(keyword);
-                        } else {
-                            final byte[] rest = new byte[restLen];
-                            final int got = IOUtils.readFully(i, rest);
-                            if (got != restLen) {
-                                throw new IOException("Failed to read "
-                                                      + "Paxheader. Expected "
-                                                      + restLen
-                                                      + " bytes, read "
-                                                      + got);
-                            }
-                            // Drop trailing NL
-                            final String value = new String(rest, 0,
-                                                      restLen - 1, CharsetNames.UTF_8);
-                            headers.put(keyword, value);
-                        }
-                        break;
-                    }
-                    coll.write((byte) ch);
-                }
-                break; // Processed single header
+        }
+        if (ch == -1) { // EOF before space after length
+            break;
+        }
+        if (len == 0) {
+            // No length found or zero length, stop parsing
+            break;
+        }
+        // Now read the "keyword=value\n"
+        final ByteArrayOutputStream coll = new ByteArrayOutputStream();
+        int keywordEnd = -1;
+        for (int iRead = 0; iRead < len - (read + 1); iRead++) {
+            int b = i.read();
+            if (b == -1) {
+                throw new IOException("Unexpected EOF reading Pax header");
             }
-            len *= 10;
-            len += ch - '0';
+            coll.write(b);
+            if (keywordEnd == -1 && b == '=') {
+                keywordEnd = coll.size() - 1;
+            }
         }
-        if (ch == -1){ // EOF
-            break;
+        int trailingByte = i.read();
+        if (trailingByte != '\n') {
+            throw new IOException("Malformed Pax Header: missing trailing newline");
+        }
+
+        if (keywordEnd == -1) {
+            throw new IOException("Malformed Pax Header: missing '=' in header");
+        }
+
+        final String keyword = new String(coll.toByteArray(), 0, keywordEnd, CharsetNames.UTF_8);
+        final String value = new String(coll.toByteArray(), keywordEnd + 1, coll.size() - keywordEnd -1, CharsetNames.UTF_8);
+        if (value.length() == 0) {
+            headers.remove(keyword);
+        } else {
+            headers.put(keyword, value);
         }
     }
     return headers;
 }
+
