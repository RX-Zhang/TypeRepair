--- 
+++ 
@@ -1,11 +1,14 @@
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
-    long    result = 0;
-    int     end = offset + length;
-    int     start = offset;
+    if (buffer == null) {
+        throw new IllegalArgumentException("Buffer cannot be null");
+    }
+    if (offset < 0 || length < 2 || offset + length > buffer.length) {
+        throw new IllegalArgumentException("Invalid offset/length for buffer");
+    }
 
-    if (length < 2){
-        throw new IllegalArgumentException("Length "+length+" must be at least 2");
-    }
+    long result = 0;
+    int end = offset + length;
+    int start = offset;
 
     if (buffer[start] == 0) {
         return 0L;
@@ -24,26 +27,24 @@
     // The ustar and POSIX tar specs require a trailing NUL or
     // space but some implementations use the extra digit for big
     // sizes/uids/gids ...
-    byte trailer = buffer[end - 1];
-    while (start < end && (trailer == 0 || trailer == ' ')) {
+    while (start < end && (buffer[end - 1] == 0 || buffer[end - 1] == ' ')) {
         end--;
-        trailer = buffer[end - 1];
     }
+
     if (start == end) {
         throw new IllegalArgumentException(
-                exceptionMessage(buffer, offset, length, start, trailer));
+                exceptionMessage(buffer, offset, length, start, buffer[start]));
     }
 
-    for ( ;start < end; start++) {
+    for (; start < end; start++) {
         final byte currentByte = buffer[start];
-        // CheckStyle:MagicNumber OFF
-        if (currentByte < '0' || currentByte > '7'){
+        if (currentByte < '0' || currentByte > '7') {
             throw new IllegalArgumentException(
                     exceptionMessage(buffer, offset, length, start, currentByte));
         }
         result = (result << 3) + (currentByte - '0'); // convert from ASCII
-        // CheckStyle:MagicNumber ON
     }
 
     return result;
 }
+
