--- 
+++ 
@@ -1,10 +1,16 @@
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
-    long    result = 0;
-    int     end = offset + length;
-    int     start = offset;
+    long result = 0;
+    int end = offset + length;
+    int start = offset;
 
     if (length < 2){
         throw new IllegalArgumentException("Length "+length+" must be at least 2");
+    }
+    if (buffer == null) {
+        throw new IllegalArgumentException("Buffer is null");
+    }
+    if (offset < 0 || length < 0 || offset + length > buffer.length) {
+        throw new IllegalArgumentException("Invalid offset or length");
     }
 
     boolean allNUL = true;
@@ -28,30 +34,34 @@
     }
 
     // Must have trailing NUL or space
-    byte trailer;
-    trailer = buffer[end-1];
-    if (trailer == 0 || trailer == ' '){
+    if (end == 0) {
+        throw new IllegalArgumentException("Invalid length: zero");
+    }
+    byte trailer = buffer[end - 1];
+    if (trailer == 0 || trailer == ' ') {
         end--;
     } else {
         throw new IllegalArgumentException(
                 exceptionMessage(buffer, offset, length, end-1, trailer));
     }
+
     // May have additional NUL or space
-    trailer = buffer[end-1];
-    if (trailer == 0 || trailer == ' '){
-        end--;
+    if (end > start) {
+        trailer = buffer[end - 1];
+        if (trailer == 0 || trailer == ' ') {
+            end--;
+        }
     }
 
-    for ( ;start < end; start++) {
+    for (; start < end; start++) {
         final byte currentByte = buffer[start];
-        // CheckStyle:MagicNumber OFF
-        if (currentByte < '0' || currentByte > '7'){
+        if (currentByte < '0' || currentByte > '7') {
             throw new IllegalArgumentException(
                     exceptionMessage(buffer, offset, length, start, currentByte));
         }
         result = (result << 3) + (currentByte - '0'); // convert from ASCII
-        // CheckStyle:MagicNumber ON
     }
 
     return result;
 }
+
