--- 
+++ 
@@ -4,16 +4,17 @@
     NodePointer p2,
     int depth2) 
 {
+    if (p1 == null && p2 == null) {
+        return 0;
+    }
+
     if (depth1 < depth2) {
-        int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);
+        int r = compareNodePointers(p1, depth1, p2.getParent(), depth2 - 1);
         return r == 0 ? -1 : r;
     }
     if (depth1 > depth2) {
-        int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);
+        int r = compareNodePointers(p1.getParent(), depth1 - 1, p2, depth2);
         return r == 0 ? 1 : r;
-    }
-    if (p1 == null && p2 == null) {
-        return 0;
     }
 
     if (p1 != null && p1.equals(p2)) {
@@ -21,14 +22,21 @@
     }
 
     if (depth1 == 1) {
-        throw new JXPathException(
-                "Cannot compare pointers that do not belong to the same tree: '"
-                        + p1 + "' and '" + p2 + "'");
+        Object root1 = p1.getRootNode();
+        Object root2 = p2.getRootNode();
+        if (root1 != null && root2 != null && !root1.equals(root2)) {
+            throw new JXPathException(
+                    "Cannot compare pointers that do not belong to the same tree: '"
+                            + p1 + "' and '" + p2 + "'");
+        }
+        // If roots are equal or unavailable, fall through.
     }
-    int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);
+
+    int r = compareNodePointers(p1.getParent(), depth1 - 1, p2.getParent(), depth2 - 1);
     if (r != 0) {
         return r;
     }
 
-    return p1.parent.compareChildNodePointers(p1, p2);
+    return p1.getParent().compareChildNodePointers(p1, p2);
 }
+
