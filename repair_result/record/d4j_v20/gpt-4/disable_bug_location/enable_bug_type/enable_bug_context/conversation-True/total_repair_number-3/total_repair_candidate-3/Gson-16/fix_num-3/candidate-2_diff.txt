--- 
+++ 
@@ -1,10 +1,12 @@
 private static Type resolve(Type context, Class<?> contextRawType, Type toResolve,
                             Collection<TypeVariable> visitedTypeVariables) {
-  // this implementation is made a little more complicated in an attempt to avoid object-creation
   while (true) {
     if (toResolve instanceof TypeVariable) {
       TypeVariable<?> typeVariable = (TypeVariable<?>) toResolve;
-        // cannot reduce due to infinite recursion
+      if (visitedTypeVariables.contains(typeVariable)) {
+        return toResolve; // prevent infinite recursion by returning if already visited
+      }
+      visitedTypeVariables.add(typeVariable);
       toResolve = resolveTypeVariable(context, contextRawType, typeVariable);
       if (toResolve == typeVariable) {
         return toResolve;
@@ -30,12 +32,12 @@
       ParameterizedType original = (ParameterizedType) toResolve;
       Type ownerType = original.getOwnerType();
       Type newOwnerType = resolve(context, contextRawType, ownerType, visitedTypeVariables);
-      boolean changed = newOwnerType != ownerType;
+      boolean changed = !equal(newOwnerType, ownerType);
 
       Type[] args = original.getActualTypeArguments();
       for (int t = 0, length = args.length; t < length; t++) {
         Type resolvedTypeArgument = resolve(context, contextRawType, args[t], visitedTypeVariables);
-        if (resolvedTypeArgument != args[t]) {
+        if (!equal(resolvedTypeArgument, args[t])) {
           if (!changed) {
             args = args.clone();
             changed = true;
@@ -55,12 +57,12 @@
 
       if (originalLowerBound.length == 1) {
         Type lowerBound = resolve(context, contextRawType, originalLowerBound[0], visitedTypeVariables);
-        if (lowerBound != originalLowerBound[0]) {
+        if (!equal(lowerBound, originalLowerBound[0])) {
           return supertypeOf(lowerBound);
         }
       } else if (originalUpperBound.length == 1) {
         Type upperBound = resolve(context, contextRawType, originalUpperBound[0], visitedTypeVariables);
-        if (upperBound != originalUpperBound[0]) {
+        if (!equal(upperBound, originalUpperBound[0])) {
           return subtypeOf(upperBound);
         }
       }
@@ -71,3 +73,4 @@
     }
   }
 }
+
