--- 
+++ 
@@ -7,15 +7,27 @@
   // Warning about typeOfThis if it doesn't resolve to an ObjectType
   // is handled further upstream.
   // TODO(nicksantos): Handle this correctly if we have a UnionType.
-  typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);
+  JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);
+  if (resolvedTypeOfThis instanceof ObjectType) {
+    typeOfThis = (ObjectType) resolvedTypeOfThis;
+  } else {
+    // If it's not an ObjectType, retain the original or process accordingly.
+    typeOfThis = null; // or keep previous or handle as needed
+  }
 
   boolean changed = false;
   ImmutableList.Builder<ObjectType> resolvedInterfaces =
       ImmutableList.builder();
   for (ObjectType iface : implementedInterfaces) {
-    ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);
-    resolvedInterfaces.add(resolvedIface);
-    changed |= (resolvedIface != iface);
+    JSType resolved = iface.resolve(t, scope);
+    if (resolved instanceof ObjectType) {
+      ObjectType resolvedIface = (ObjectType) resolved;
+      resolvedInterfaces.add(resolvedIface);
+      changed |= (resolvedIface != iface);
+    } else {
+      // If not ObjectType after resolve, add original iface or handle accordingly
+      resolvedInterfaces.add(iface);
+    }
   }
   if (changed) {
     implementedInterfaces = resolvedInterfaces.build();
@@ -23,9 +35,14 @@
 
   if (subTypes != null) {
     for (int i = 0; i < subTypes.size(); i++) {
-      subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));
+      JSType resolvedSubType = subTypes.get(i).resolve(t, scope);
+      if (resolvedSubType instanceof FunctionType) {
+        subTypes.set(i, (FunctionType) resolvedSubType);
+      }
+      // else keep original or handle error as needed
     }
   }
 
   return super.resolveInternal(t, scope);
 }
+
