--- 
+++ 
@@ -2,7 +2,7 @@
         BeanProperty property) throws JsonMappingException
 {
     // May need to resolve types for delegate-based creators:
-    JsonDeserializer<Object> delegateDeser = null;
+    JsonDeserializer<Object> delegateDeser = _delegateDeserializer;
     if (_valueInstantiator != null) {
         if (_valueInstantiator.canCreateUsingDelegate()) {
             JavaType delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());
@@ -12,28 +12,33 @@
                         +") returned true for 'canCreateUsingDelegate()', but null for 'getDelegateType()'");
             }
             delegateDeser = findDeserializer(ctxt, delegateType, property);
+            if (delegateDeser == null) {
+                // Defensive check: If no deserializer found for delegate, fallback or error
+                throw new JsonMappingException(ctxt.getParser(),
+                    "Could not find delegate deserializer for type " + delegateType);
+            }
         }
     }
-    // [databind#1043]: allow per-property allow-wrapping of single overrides:
-    // 11-Dec-2015, tatu: Should we pass basic `Collection.class`, or more refined? Mostly
-    //   comes down to "List vs Collection" I suppose... for now, pass Collection
+    // Determine unwrapSingle feature flag (may be null if not set)
     Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,
             JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);
-    // also, often value deserializer is resolved here:
+
+    // Resolve and contextualize value deserializer
     JsonDeserializer<?> valueDeser = _valueDeserializer;
-    
-    // May have a content converter
     valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);
     final JavaType vt = _collectionType.getContentType();
     if (valueDeser == null) {
         valueDeser = ctxt.findContextualValueDeserializer(vt, property);
-    } else { // if directly assigned, probably not yet contextual, so:
+    } else {
         valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, vt);
     }
-    // and finally, type deserializer needs context as well
+
+    // Contextualize the type deserializer if present
     TypeDeserializer valueTypeDeser = _valueTypeDeserializer;
     if (valueTypeDeser != null) {
         valueTypeDeser = valueTypeDeser.forProperty(property);
     }
+
     return withResolved(delegateDeser, valueDeser, valueTypeDeser, unwrapSingle);
 }
+
