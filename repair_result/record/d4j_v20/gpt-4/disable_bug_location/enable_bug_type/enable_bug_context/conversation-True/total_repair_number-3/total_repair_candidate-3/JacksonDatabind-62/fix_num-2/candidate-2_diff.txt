--- 
+++ 
@@ -2,7 +2,7 @@
         BeanProperty property) throws JsonMappingException
 {
     // May need to resolve types for delegate-based creators:
-    JsonDeserializer<Object> delegateDeser = null;
+    JsonDeserializer<Object> delegateDeser = _delegateDeserializer;
     if (_valueInstantiator != null) {
         if (_valueInstantiator.canCreateUsingDelegate()) {
             JavaType delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());
@@ -15,13 +15,11 @@
         }
     }
     // [databind#1043]: allow per-property allow-wrapping of single overrides:
-    // 11-Dec-2015, tatu: Should we pass basic `Collection.class`, or more refined? Mostly
-    //   comes down to "List vs Collection" I suppose... for now, pass Collection
     Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,
             JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);
     // also, often value deserializer is resolved here:
     JsonDeserializer<?> valueDeser = _valueDeserializer;
-    
+
     // May have a content converter
     valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);
     final JavaType vt = _collectionType.getContentType();
@@ -35,5 +33,16 @@
     if (valueTypeDeser != null) {
         valueTypeDeser = valueTypeDeser.forProperty(property);
     }
-    return withResolved(delegateDeser, valueDeser, valueTypeDeser, unwrapSingle);
+
+    try {
+        return withResolved(delegateDeser, valueDeser, valueTypeDeser, unwrapSingle);
+    } catch (IllegalStateException e) {
+        // Defensive handling for cases like no default constructor for collection type
+        // fall back to default withResolved without delegate deserializer if possible
+        if (delegateDeser != null) {
+            return withResolved(null, valueDeser, valueTypeDeser, unwrapSingle);
+        }
+        throw e;
+    }
 }
+
