--- 
+++ 
@@ -1,10 +1,10 @@
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
-    long    result = 0;
-    int     end = offset + length;
-    int     start = offset;
+    long result = 0;
+    int end = offset + length;
+    int start = offset;
 
-    if (length < 2){
-        throw new IllegalArgumentException("Length "+length+" must be at least 2");
+    if (length < 2) {
+        throw new IllegalArgumentException("Length " + length + " must be at least 2");
     }
 
     if (buffer[start] == 0) {
@@ -12,41 +12,43 @@
     }
 
     // Skip leading spaces
-    while (start < end){
-        if (buffer[start] == ' '){
+    while (start < end) {
+        if (buffer[start] == ' ') {
             start++;
         } else {
             break;
         }
     }
 
-    // Trim all trailing NULs and spaces.
-    // The ustar and POSIX tar specs require a trailing NUL or
-    // space but some implementations use the extra digit for big
-    // sizes/uids/gids ...
-    byte trailer = buffer[end - 1];
-    if (trailer == 0 || trailer == ' '){
-        end--;
-    } else {
-        throw new IllegalArgumentException(
-                exceptionMessage(buffer, offset, length, end-1, trailer));
-    }
-    trailer = buffer[end - 1];
-    while (start < end - 1 && (trailer == 0 || trailer == ' ')) {
-        end--;
-        trailer = buffer[end - 1];
+    // At least one non-space byte should be present
+    if (start == end) {
+        return 0L;
     }
 
-    for ( ;start < end; start++) {
+    // Trim trailing NULs and spaces
+    while (end > start) {
+        byte trailer = buffer[end - 1];
+        if (trailer == 0 || trailer == ' ') {
+            end--;
+        } else {
+            break;
+        }
+    }
+
+    if (start == end) {
+        return 0L;
+    }
+
+    for (; start < end; start++) {
         final byte currentByte = buffer[start];
-        // CheckStyle:MagicNumber OFF
-        if (currentByte < '0' || currentByte > '7'){
+        // Validate octal digit
+        if (currentByte < '0' || currentByte > '7') {
             throw new IllegalArgumentException(
-                    exceptionMessage(buffer, offset, length, start, currentByte));
+                exceptionMessage(buffer, offset, length, start, currentByte));
         }
-        result = (result << 3) + (currentByte - '0'); // convert from ASCII
-        // CheckStyle:MagicNumber ON
+        result = (result << 3) + (currentByte - '0'); // convert from ASCII octal digit
     }
 
     return result;
 }
+
