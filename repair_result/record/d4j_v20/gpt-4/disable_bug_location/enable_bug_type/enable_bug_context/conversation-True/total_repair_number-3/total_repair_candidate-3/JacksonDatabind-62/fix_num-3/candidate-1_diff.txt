--- 
+++ 
@@ -1,7 +1,6 @@
 public CollectionDeserializer createContextual(DeserializationContext ctxt,
         BeanProperty property) throws JsonMappingException
 {
-    // May need to resolve types for delegate-based creators:
     JsonDeserializer<Object> delegateDeser = null;
     if (_valueInstantiator != null) {
         if (_valueInstantiator.canCreateUsingDelegate()) {
@@ -12,28 +11,35 @@
                         +") returned true for 'canCreateUsingDelegate()', but null for 'getDelegateType()'");
             }
             delegateDeser = findDeserializer(ctxt, delegateType, property);
+            if (delegateDeser == null) {
+                throw new JsonMappingException(ctxt.getParser(),
+                    "Failed to find delegate deserializer for type " + delegateType);
+            }
         }
     }
-    // [databind#1043]: allow per-property allow-wrapping of single overrides:
-    // 11-Dec-2015, tatu: Should we pass basic `Collection.class`, or more refined? Mostly
-    //   comes down to "List vs Collection" I suppose... for now, pass Collection
     Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,
             JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);
-    // also, often value deserializer is resolved here:
     JsonDeserializer<?> valueDeser = _valueDeserializer;
     
-    // May have a content converter
     valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);
     final JavaType vt = _collectionType.getContentType();
     if (valueDeser == null) {
         valueDeser = ctxt.findContextualValueDeserializer(vt, property);
-    } else { // if directly assigned, probably not yet contextual, so:
+    } else {
         valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, vt);
     }
-    // and finally, type deserializer needs context as well
+
     TypeDeserializer valueTypeDeser = _valueTypeDeserializer;
     if (valueTypeDeser != null) {
         valueTypeDeser = valueTypeDeser.forProperty(property);
     }
-    return withResolved(delegateDeser, valueDeser, valueTypeDeser, unwrapSingle);
+
+    try {
+        return withResolved(delegateDeser, valueDeser, valueTypeDeser, unwrapSingle);
+    } catch (IllegalStateException e) {
+        // Catching the case where no default constructor is available for certain collection types
+        throw JsonMappingException.from(ctxt,
+                "Cannot create CollectionDeserializer for type "+_collectionType+": " + e.getMessage(), e);
+    }
 }
+
