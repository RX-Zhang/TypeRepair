--- 
+++ 
@@ -1,6 +1,22 @@
 protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                          int nextLineTabStop, String text)
 {
+    // Defensive check to avoid IllegalStateException
+    if (width <= 0)
+    {
+        throw new IllegalArgumentException("Width must be positive");
+    }
+    if (nextLineTabStop < 0)
+    {
+        throw new IllegalArgumentException("nextLineTabStop cannot be negative");
+    }
+    if (nextLineTabStop >= width)
+    {
+        // stops infinite loop happening
+        throw new IllegalStateException("Total width is less than the width of the argument and indent " + 
+                                        "- no room for the description");
+    }
+
     int pos = findWrapPos(text, width, 0);
 
     if (pos == -1)
@@ -11,17 +27,10 @@
     }
     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
-    if (nextLineTabStop >= width)
-    {
-        // stops infinite loop happening
-        throw new IllegalStateException("Total width is less than the width of the argument and indent " + 
-                                        "- no room for the description");
-    }
-
     // all following lines must be padded with nextLineTabStop space 
     // characters
     final String padding = createPadding(nextLineTabStop);
-
+    
     while (true)
     {
         text = padding + text.substring(pos).trim();
@@ -34,7 +43,8 @@
             return sb;
         }
         
-        if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) 
+        // Fix logical condition to avoid infinite loop when pos == nextLineTabStop
+        if ((text.length() > width) && (pos <= nextLineTabStop))
         {
             pos = width;
         }
@@ -42,3 +52,4 @@
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
     }
 }
+
