--- 
+++ 
@@ -6,28 +6,33 @@
     // already had an explicitly marked one?
     if (oldOne != null) {
 
-        if ((_explicitCreators & mask) != 0) { // already had explicitly annotated, leave as-is
-            // but skip, if new one not annotated
+        if ((_explicitCreators & mask) != 0) { // already had explicitly annotated, leave as-is if new one not explicit
             if (!explicit) {
                 return;
             }
-            // both explicit: verify
-            // otherwise only verify if neither explicitly annotated.
+            // if both are explicit, conflict check below
+        } else if (!explicit) {
+            // if neither old nor new is explicit, conflict check below
+        } else {
+            // old was not explicit but new is explicit:
+            // allow new explicit to override old non-explicit
+            _creators[typeIndex] = _fixAccess(newOne);
+            _explicitCreators |= mask;
+            return;
         }
 
-        // one more thing: ok to override in sub-class
+        // both explicit or both not explicit: verify duplication further
         if (oldOne.getClass() == newOne.getClass()) {
             // [databind#667]: avoid one particular class of bogus problems
+            throw new IllegalArgumentException("Conflicting " + TYPE_DESCS[typeIndex]
+                    + " creators: already had explicitly marked " + oldOne + ", encountered " + newOne);
+        }
+        // otherwise, determine which type to choose could be added here, but left out for now
+    }
 
-                throw new IllegalArgumentException("Conflicting "+TYPE_DESCS[typeIndex]
-                        +" creators: already had explicitly marked "+oldOne+", encountered "+newOne);
-            // otherwise, which one to choose?
-                // new type more generic, use old
-            // new type more specific, use it
-        }
-    }
     if (explicit) {
         _explicitCreators |= mask;
     }
     _creators[typeIndex] = _fixAccess(newOne);
 }
+
