--- 
+++ 
@@ -5,11 +5,11 @@
     int depth2) 
 {
     if (depth1 < depth2) {
-        int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);
+        int r = compareNodePointers(p1, depth1, p2.getParent(), depth2 - 1);
         return r == 0 ? -1 : r;
     }
     if (depth1 > depth2) {
-        int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);
+        int r = compareNodePointers(p1.getParent(), depth1 - 1, p2, depth2);
         return r == 0 ? 1 : r;
     }
     if (p1 == null && p2 == null) {
@@ -21,14 +21,17 @@
     }
 
     if (depth1 == 1) {
-        throw new JXPathException(
-                "Cannot compare pointers that do not belong to the same tree: '"
-                        + p1 + "' and '" + p2 + "'");
+        if (!p1.getRootNode().equals(p2.getRootNode())) {
+            throw new JXPathException(
+                    "Cannot compare pointers that do not belong to the same tree: '"
+                            + p1 + "' and '" + p2 + "'");
+        }
     }
-    int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);
+    int r = compareNodePointers(p1.getParent(), depth1 - 1, p2.getParent(), depth2 - 1);
     if (r != 0) {
         return r;
     }
 
-    return p1.parent.compareChildNodePointers(p1, p2);
+    return p1.compareChildNodePointers(p1, p2);
 }
+
