--- 
+++ 
@@ -1,10 +1,13 @@
 private static Type resolve(Type context, Class<?> contextRawType, Type toResolve,
                             Collection<TypeVariable> visitedTypeVariables) {
-  // this implementation is made a little more complicated in an attempt to avoid object-creation
   while (true) {
     if (toResolve instanceof TypeVariable) {
+      if (visitedTypeVariables.contains(toResolve)) {
+        // Prevent infinite recursion by returning the unresolved type variable
+        return toResolve;
+      }
+      visitedTypeVariables.add((TypeVariable<?>) toResolve);
       TypeVariable<?> typeVariable = (TypeVariable<?>) toResolve;
-        // cannot reduce due to infinite recursion
       toResolve = resolveTypeVariable(context, contextRawType, typeVariable);
       if (toResolve == typeVariable) {
         return toResolve;
@@ -55,12 +58,12 @@
 
       if (originalLowerBound.length == 1) {
         Type lowerBound = resolve(context, contextRawType, originalLowerBound[0], visitedTypeVariables);
-        if (lowerBound != originalLowerBound[0]) {
+        if (!equal(lowerBound, originalLowerBound[0])) {
           return supertypeOf(lowerBound);
         }
       } else if (originalUpperBound.length == 1) {
         Type upperBound = resolve(context, contextRawType, originalUpperBound[0], visitedTypeVariables);
-        if (upperBound != originalUpperBound[0]) {
+        if (!equal(upperBound, originalUpperBound[0])) {
           return subtypeOf(upperBound);
         }
       }
@@ -71,3 +74,4 @@
     }
   }
 }
+
