--- 
+++ 
@@ -6,46 +6,64 @@
         int ch;
         int len = 0;
         int read = 0;
+        // read length prefix digits
         while((ch = i.read()) != -1) {
+            if (ch == ' ') {
+                read++; // count space
+                break; // length field finished
+            }
+            if (ch < '0' || ch > '9') {
+                // invalid length character encountered, terminate parsing
+                throw new IOException("Invalid length character in pax header");
+            }
+            len = len * 10 + (ch - '0');
             read++;
-            if (ch == ' '){
-                // Get keyword
-                final ByteArrayOutputStream coll = new ByteArrayOutputStream();
-                while((ch = i.read()) != -1) {
-                    read++;
-                    if (ch == '='){ // end of keyword
-                        final String keyword = coll.toString(CharsetNames.UTF_8);
-                        // Get rest of entry
-                        final int restLen = len - read;
-                        if (restLen == 1) { // only NL
-                            headers.remove(keyword);
-                        } else {
-                            final byte[] rest = new byte[restLen];
-                            final int got = IOUtils.readFully(i, rest);
-                            if (got != restLen) {
-                                throw new IOException("Failed to read "
-                                                      + "Paxheader. Expected "
-                                                      + restLen
-                                                      + " bytes, read "
-                                                      + got);
-                            }
-                            // Drop trailing NL
-                            final String value = new String(rest, 0,
-                                                      restLen - 1, CharsetNames.UTF_8);
-                            headers.put(keyword, value);
-                        }
-                        break;
-                    }
-                    coll.write((byte) ch);
-                }
-                break; // Processed single header
-            }
-            len *= 10;
-            len += ch - '0';
         }
-        if (ch == -1){ // EOF
+
+        if (ch == -1) { // EOF reached while reading length
             break;
+        }
+
+        // len includes the length digits, the space, the keyword=value and \n
+        if (len <= 0) {
+            // zero or negative length not allowed, exit parsing
+            break;
+        }
+
+        final int toRead = len - read;
+        if (toRead <= 0) {
+            // malformed pax header line length
+            break;
+        }
+
+        final byte[] lineBytes = new byte[toRead];
+        final int got = IOUtils.readFully(i, lineBytes);
+        if (got != toRead) {
+            throw new IOException("Failed to read pax header line");
+        }
+
+        // lineBytes is keyword=value\n
+        if (lineBytes[toRead - 1] != '\n') {
+            throw new IOException("Pax header line does not end with newline");
+        }
+
+        final String line = new String(lineBytes, 0, toRead - 1, CharsetNames.UTF_8);
+
+        final int equalsIndex = line.indexOf('=');
+        if (equalsIndex == -1) {
+            // Invalid pax header line without '='
+            continue; // or throw exception
+        }
+
+        final String key = line.substring(0, equalsIndex);
+        final String value = line.substring(equalsIndex + 1);
+
+        if (value.isEmpty()) {
+            headers.remove(key);
+        } else {
+            headers.put(key, value);
         }
     }
     return headers;
 }
+
