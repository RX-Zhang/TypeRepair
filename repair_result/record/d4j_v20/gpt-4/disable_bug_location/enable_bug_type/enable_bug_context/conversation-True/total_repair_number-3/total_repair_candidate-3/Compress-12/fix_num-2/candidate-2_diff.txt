--- 
+++ 
@@ -19,7 +19,7 @@
 
     byte[] headerBuf = getRecord();
 
-    if (hasHitEOF) {
+    if (headerBuf == null) {  // Fix: check headerBuf for null instead of hasHitEOF
         currEntry = null;
         return null;
     }
@@ -30,22 +30,23 @@
 
     if (currEntry.isGNULongNameEntry()) {
         // read in the name
-        StringBuffer longName = new StringBuffer();
+        StringBuilder longName = new StringBuilder();
         byte[] buf = new byte[SMALL_BUFFER_SIZE];
-        int length = 0;
-        while ((length = read(buf)) >= 0) {
-            longName.append(new String(buf, 0, length));
+        int length;
+        while ((length = read(buf, 0, buf.length)) >= 0) { // Fix: Use read with all params
+            longName.append(new String(buf, 0, length, "UTF-8")); // Fix: specify encoding, prevent issues
         }
-        getNextEntry();
+        // Instead of getNextEntry(), call getNextTarEntry() to properly update currEntry
+        currEntry = getNextTarEntry();
         if (currEntry == null) {
             // Bugzilla: 40334
             // Malformed tar file - long entry name not followed by entry
             return null;
         }
         // remove trailing null terminator
-        if (longName.length() > 0
-            && longName.charAt(longName.length() - 1) == 0) {
-            longName.deleteCharAt(longName.length() - 1);
+        int lastCharIndex = longName.length() - 1;
+        if (lastCharIndex >= 0 && longName.charAt(lastCharIndex) == '\0') { // Fix: check for '\0' char properly
+            longName.deleteCharAt(lastCharIndex);
         }
         currEntry.setName(longName.toString());
     }
@@ -58,10 +59,8 @@
         readGNUSparse();
     }
 
-    // If the size of the next element in the archive has changed
-    // due to a new size being reported in the posix header
-    // information, we update entrySize here so that it contains
-    // the correct value.
+    // Update entrySize again since paxHeaders or sparse processing may have changed it
     entrySize = currEntry.getSize();
     return currEntry;
 }
+
