--- 
+++ 
@@ -26,22 +26,16 @@
         return;
     case MINIMAL:
         if (len <= 0) {
-            // always quote an empty token that is the first
-            // on the line, as it may be the only thing on the
-            // line. If it were not quoted in that case,
-            // an empty line has no tokens.
             if (newRecord) {
                 quote = true;
             }
         } else {
             char c = value.charAt(pos);
 
-            if (newRecord && (c < 0x20 || c > 0x21 && c < 0x23 || c > 0x2B && c < 0x2D || c > 0x7E)) {
+            // Changed logical expression to correctly identify characters that require quoting at start of record.
+            if (newRecord && (c < 0x20 || (c > 0x21 && c < 0x23) || (c > 0x2B && c < 0x2D) || c > 0x7E)) {
                 quote = true;
             } else if (c <= COMMENT) {
-                // Some other chars at the start of a value caused the parser to fail, so for now
-                // encapsulate if we start in anything less than '#'. We are being conservative
-                // by including the default comment char too.
                 quote = true;
             } else {
                 while (pos < end) {
@@ -56,8 +50,6 @@
                 if (!quote) {
                     pos = end - 1;
                     c = value.charAt(pos);
-                    // Some other chars at the end caused the parser to fail, so for now
-                    // encapsulate if we end in anything less than ' '
                     if (c <= SP) {
                         quote = true;
                     }
@@ -66,7 +58,6 @@
         }
 
         if (!quote) {
-            // no encapsulation needed - write out the original value
             out.append(value, start, end);
             return;
         }
@@ -76,31 +67,22 @@
     }
 
     if (!quote) {
-        // no encapsulation needed - write out the original value
         out.append(value, start, end);
         return;
     }
 
-    // we hit something that needed encapsulation
     out.append(quoteChar);
 
-    // Pick up where we left off: pos should be positioned on the first character that caused
-    // the need for encapsulation.
     while (pos < end) {
         final char c = value.charAt(pos);
         if (c == quoteChar) {
-            // write out the chunk up until this point
-
-            // add 1 to the length to write out the encapsulator also
             out.append(value, start, pos + 1);
-            // put the next starting position on the encapsulator so we will
-            // write it out again with the next string (effectively doubling it)
             start = pos;
         }
         pos++;
     }
 
-    // write the last segment
     out.append(value, start, pos);
     out.append(quoteChar);
 }
+
