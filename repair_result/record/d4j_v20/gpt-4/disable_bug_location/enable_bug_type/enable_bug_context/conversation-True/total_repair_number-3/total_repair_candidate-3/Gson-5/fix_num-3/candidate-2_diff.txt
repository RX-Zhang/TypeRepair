--- 
+++ 
@@ -4,19 +4,22 @@
         int offset = pos.getIndex();
 
         // extract year
-        int year = parseInt(date, offset, offset += 4);
+        int year = parseInt(date, offset, offset + 4);
+        offset += 4;
         if (checkOffset(date, offset, '-')) {
             offset += 1;
         }
 
         // extract month
-        int month = parseInt(date, offset, offset += 2);
+        int month = parseInt(date, offset, offset + 2);
+        offset += 2;
         if (checkOffset(date, offset, '-')) {
             offset += 1;
         }
 
         // extract day
-        int day = parseInt(date, offset, offset += 2);
+        int day = parseInt(date, offset, offset + 2);
+        offset += 2;
         // default time value
         int hour = 0;
         int minutes = 0;
@@ -25,7 +28,7 @@
 
         // if the value has no time component (and no time zone), we are done
         boolean hasT = checkOffset(date, offset, 'T');
-        
+
         if (!hasT && (date.length() <= offset)) {
             Calendar calendar = new GregorianCalendar(year, month - 1, day);
 
@@ -34,39 +37,46 @@
         }
 
         if (hasT) {
+            offset += 1;
 
-            // extract hours, minutes, seconds and milliseconds
-            hour = parseInt(date, offset += 1, offset += 2);
+            // extract hours
+            hour = parseInt(date, offset, offset + 2);
+            offset += 2;
             if (checkOffset(date, offset, ':')) {
                 offset += 1;
             }
 
-            minutes = parseInt(date, offset, offset += 2);
+            // extract minutes
+            minutes = parseInt(date, offset, offset + 2);
+            offset += 2;
             if (checkOffset(date, offset, ':')) {
                 offset += 1;
             }
+
             // second and milliseconds can be optional
             if (date.length() > offset) {
                 char c = date.charAt(offset);
                 if (c != 'Z' && c != '+' && c != '-') {
-                    seconds = parseInt(date, offset, offset += 2);
+                    seconds = parseInt(date, offset, offset + 2);
+                    offset += 2;
                     if (seconds > 59 && seconds < 63) seconds = 59; // truncate up to 3 leap seconds
+
                     // milliseconds can be optional in the format
                     if (checkOffset(date, offset, '.')) {
                         offset += 1;
-                        int endOffset = indexOfNonDigit(date, offset + 1); // assume at least one digit
+                        int endOffset = indexOfNonDigit(date, offset);
                         int parseEndOffset = Math.min(endOffset, offset + 3); // parse up to 3 digits
                         int fraction = parseInt(date, offset, parseEndOffset);
                         // compensate for "missing" digits
                         switch (parseEndOffset - offset) { // number of digits parsed
-                        case 2:
-                            milliseconds = fraction * 10;
-                            break;
-                        case 1:
-                            milliseconds = fraction * 100;
-                            break;
-                        default:
-                            milliseconds = fraction;
+                            case 2:
+                                milliseconds = fraction * 10;
+                                break;
+                            case 1:
+                                milliseconds = fraction * 100;
+                                break;
+                            default:
+                                milliseconds = fraction;
                         }
                         offset = endOffset;
                     }
@@ -74,7 +84,6 @@
             }
         }
 
-        // extract timezone
         if (date.length() <= offset) {
             throw new IllegalArgumentException("No time zone indicator");
         }
@@ -86,40 +95,49 @@
             timezone = TIMEZONE_UTC;
             offset += 1;
         } else if (timezoneIndicator == '+' || timezoneIndicator == '-') {
-            String timezoneOffset = date.substring(offset);
+            int signIndex = offset;
+            offset++; // consume '+' or '-'
 
-            // When timezone has no minutes, we should append it, valid timezones are, for example: +00:00, +0000 and +00
+            int hourOffset = 0;
+            int minuteOffset = 0;
 
-            offset += timezoneOffset.length();
-            // 18-Jun-2015, tatu: Minor simplification, skip offset of "+0000"/"+00:00"
-            if ("+0000".equals(timezoneOffset) || "+00:00".equals(timezoneOffset)) {
-                timezone = TIMEZONE_UTC;
+            // parse hour offset
+            if (date.length() >= offset + 2) {
+                hourOffset = parseInt(date, offset, offset + 2);
+                offset += 2;
             } else {
-                // 18-Jun-2015, tatu: Looks like offsets only work from GMT, not UTC...
-                //    not sure why, but that's the way it looks. Further, Javadocs for
-                //    `java.util.TimeZone` specifically instruct use of GMT as base for
-                //    custom timezones... odd.
-                String timezoneId = "GMT" + timezoneOffset;
-                  String timezoneId = "UTC" + timezoneOffset;
+                throw new IllegalArgumentException("Invalid time zone indicator");
+            }
 
-                timezone = TimeZone.getTimeZone(timezoneId);
+            // check if next char is ':'
+            if (checkOffset(date, offset, ':')) {
+                offset++;
+            }
 
-                String act = timezone.getID();
-                if (!act.equals(timezoneId)) {
-                    /* 22-Jan-2015, tatu: Looks like canonical version has colons, but we may be given
-                     *    one without. If so, don't sweat.
-                     *   Yes, very inefficient. Hopefully not hit often.
-                     *   If it becomes a perf problem, add 'loose' comparison instead.
-                     */
-                    String cleaned = act.replace(":", "");
-                    if (!cleaned.equals(timezoneId)) {
-                        throw new IndexOutOfBoundsException("Mismatching time zone indicator: "+timezoneId+" given, resolves to "
-                                +timezone.getID());
-                    }
+            // parse minute offset if present
+            if (date.length() >= offset + 2) {
+                char nextChar = date.charAt(offset);
+                if (nextChar >= '0' && nextChar <= '9') {
+                    minuteOffset = parseInt(date, offset, offset + 2);
+                    offset += 2;
+                }
+            }
+
+            String timezoneId = String.format("GMT%c%02d:%02d", timezoneIndicator, hourOffset, minuteOffset);
+            timezone = TimeZone.getTimeZone(timezoneId);
+
+            String act = timezone.getID();
+            if (!act.equals(timezoneId)) {
+                // canonical form of timezone can be different in JDK, try cleaning colons
+                String cleaned = act.replace(":", "");
+                String cleanedExpected = timezoneId.replace(":", "");
+                if (!cleaned.equals(cleanedExpected)) {
+                    throw new IndexOutOfBoundsException("Mismatching time zone indicator: " + timezoneId + " given, resolves to "
+                            + timezone.getID());
                 }
             }
         } else {
-            throw new IndexOutOfBoundsException("Invalid time zone indicator '" + timezoneIndicator+"'");
+            throw new IndexOutOfBoundsException("Invalid time zone indicator '" + timezoneIndicator + "'");
         }
 
         Calendar calendar = new GregorianCalendar(timezone);
@@ -134,8 +152,6 @@
 
         pos.setIndex(offset);
         return calendar.getTime();
-        // If we get a ParseException it'll already have the right message/offset.
-        // Other exception types can convert here.
     } catch (IndexOutOfBoundsException e) {
         fail = e;
     } catch (NumberFormatException e) {
@@ -143,12 +159,13 @@
     } catch (IllegalArgumentException e) {
         fail = e;
     }
-    String input = (date == null) ? null : ('"' + date + "'");
+    String input = (date == null) ? null : ('"' + date + '"');
     String msg = fail.getMessage();
     if (msg == null || msg.isEmpty()) {
-        msg = "("+fail.getClass().getName()+")";
+        msg = "(" + fail.getClass().getName() + ")";
     }
     ParseException ex = new ParseException("Failed to parse date [" + input + "]: " + msg, pos.getIndex());
     ex.initCause(fail);
     throw ex;
 }
+
