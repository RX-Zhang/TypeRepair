--- 
+++ 
@@ -9,7 +9,7 @@
     tokens.writeStartObject();
 
     JsonToken t = p.getCurrentToken();
-    for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {
+    while (t == JsonToken.FIELD_NAME) {
         String propName = p.getCurrentName();
         p.nextToken(); // to point to value
         // creator property?
@@ -19,17 +19,30 @@
             // 11-Sep-2015, tatu: Important; do NOT pass buffer as last arg, but null,
             //   since it is not the bean
             if (ext.handlePropertyValue(p, ctxt, propName, buffer)) {
-                ;
+                // do nothing, handled by external type handler
             } else {
                 // Last creator property to set?
-                if (buffer.assignParameter(creatorProp, _deserializeWithErrorWrapping(p, ctxt, creatorProp))) {
+                boolean assigned;
+                try {
+                    assigned = buffer.assignParameter(creatorProp, _deserializeWithErrorWrapping(p, ctxt, creatorProp));
+                } catch (Exception e) {
+                    wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);
+                    // exception wrapAndThrow normally rethrows, but in case it doesn't:
+                    assigned = false;
+                }
+                if (assigned) {
                     t = p.nextToken(); // to move to following FIELD_NAME/END_OBJECT
                     Object bean;
                     try {
                         bean = creator.build(ctxt, buffer);
                     } catch (Exception e) {
                         wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);
-                        continue; // never gets here
+                        // wrapAndThrow should throw, but if not:
+                        bean = null;
+                    }
+                    if (bean == null) {
+                        // Defensive fallback - return null if bean creation failed
+                        return null;
                     }
                     // if so, need to copy all remaining tokens into buffer
                     while (t == JsonToken.FIELD_NAME) {
@@ -45,20 +58,31 @@
                     return ext.complete(p, ctxt, bean);
                 }
             }
+            t = p.nextToken();
             continue;
         }
         // Object Id property?
         if (buffer.readIdProperty(propName)) {
+            t = p.nextToken();
             continue;
         }
         // regular property? needs buffering
         SettableBeanProperty prop = _beanProperties.find(propName);
         if (prop != null) {
-            buffer.bufferProperty(prop, prop.deserialize(p, ctxt));
+            Object value;
+            try {
+                value = prop.deserialize(p, ctxt);
+            } catch (Exception e) {
+                wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);
+                value = null; // unlikely to get here
+            }
+            buffer.bufferProperty(prop, value);
+            t = p.nextToken();
             continue;
         }
         // external type id (or property that depends on it)?
         if (ext.handlePropertyValue(p, ctxt, propName, null)) {
+            t = p.nextToken();
             continue;
         }
         /* As per [JACKSON-313], things marked as ignorable should not be
@@ -66,11 +90,27 @@
          */
         if (_ignorableProps != null && _ignorableProps.contains(propName)) {
             handleIgnoredProperty(p, ctxt, handledType(), propName);
+            t = p.nextToken();
             continue;
         }
         // "any property"?
         if (_anySetter != null) {
-            buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));
+            Object value;
+            try {
+                value = _anySetter.deserialize(p, ctxt);
+            } catch (Exception e) {
+                wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);
+                value = null; // fallback
+            }
+            buffer.bufferAnyProperty(_anySetter, propName, value);
+            t = p.nextToken();
+            continue;
+        } else {
+            // Unknown property: handle as ignorable or throw
+            if (!handleUnknownProperty(p, ctxt, handledType(), propName)) {
+                // handleUnknownProperty may throw an exception or skip
+                t = p.nextToken();
+            }
         }
     }
 
@@ -82,3 +122,4 @@
         return null; // never gets here
     }
 }
+
