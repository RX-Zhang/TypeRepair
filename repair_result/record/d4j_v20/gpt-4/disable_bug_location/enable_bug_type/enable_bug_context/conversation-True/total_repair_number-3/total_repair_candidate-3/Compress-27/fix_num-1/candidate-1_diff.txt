--- 
+++ 
@@ -1,19 +1,30 @@
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
-    long    result = 0;
-    int     end = offset + length;
-    int     start = offset;
-
+    if (buffer == null) {
+        throw new IllegalArgumentException("buffer is null");
+    }
+    if (offset < 0 || length < 0 || offset + length > buffer.length) {
+        throw new IndexOutOfBoundsException("Invalid offset and/or length parameters");
+    }
     if (length < 2){
         throw new IllegalArgumentException("Length "+length+" must be at least 2");
     }
+
+    // If the high bit of the first byte is set, use parseOctalOrBinary to handle binary encoding gracefully
+    if ((buffer[offset] & 0x80) != 0) {
+        return parseOctalOrBinary(buffer, offset, length);
+    }
+
+    long result = 0;
+    int end = offset + length;
+    int start = offset;
 
     if (buffer[start] == 0) {
         return 0L;
     }
 
     // Skip leading spaces
-    while (start < end){
-        if (buffer[start] == ' '){
+    while (start < end) {
+        if (buffer[start] == ' ') {
             start++;
         } else {
             break;
@@ -34,7 +45,7 @@
                 exceptionMessage(buffer, offset, length, start, trailer));
     }
 
-    for ( ;start < end; start++) {
+    for (; start < end; start++) {
         final byte currentByte = buffer[start];
         // CheckStyle:MagicNumber OFF
         if (currentByte < '0' || currentByte > '7'){
@@ -47,3 +58,4 @@
 
     return result;
 }
+
