--- 
+++ 
@@ -26,28 +26,27 @@
       boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();
           // Makes it easier to check for NPEs.
 
-      // TODO(nicksantos): This might be a better check once we have
-      // back-inference of object/array constraints.  It will probably
-      // introduce more type warnings.  It uses the result type iff it's
-      // strictly narrower than the declared var type.
-      //
-      //boolean isVarTypeBetter = isVarDeclaration &&
-      //    (varType.restrictByNotNullOrUndefined().isSubtype(resultType)
-      //     || !resultType.isSubtype(varType));
-
-
       if (isVarTypeBetter) {
         redeclareSimpleVar(scope, left, resultType);
       }
-      left.setJSType(isVarDeclaration || leftType == null ?
-          resultType : null);
+
+      // Set the JSType on the left node appropriately
+      if (isVarDeclaration || leftType == null) {
+        left.setJSType(resultType);
+      } else {
+        left.setJSType(null);
+      }
 
       if (var != null && var.isTypeInferred()) {
         JSType oldType = var.getType();
-        var.setType(oldType == null ?
-            resultType : oldType.getLeastSupertype(resultType));
+        if (oldType == null) {
+          var.setType(resultType);
+        } else {
+          var.setType(oldType.getLeastSupertype(resultType));
+        }
       }
       break;
+
     case Token.GETPROP:
       String qualifiedName = left.getQualifiedName();
       if (qualifiedName != null) {
@@ -61,3 +60,4 @@
       break;
   }
 }
+
