--- 
+++ 
@@ -4,19 +4,22 @@
         int offset = pos.getIndex();
 
         // extract year
-        int year = parseInt(date, offset, offset += 4);
+        int year = parseInt(date, offset, offset + 4);
+        offset += 4;
         if (checkOffset(date, offset, '-')) {
             offset += 1;
         }
 
         // extract month
-        int month = parseInt(date, offset, offset += 2);
+        int month = parseInt(date, offset, offset + 2);
+        offset += 2;
         if (checkOffset(date, offset, '-')) {
             offset += 1;
         }
 
         // extract day
-        int day = parseInt(date, offset, offset += 2);
+        int day = parseInt(date, offset, offset + 2);
+        offset += 2;
         // default time value
         int hour = 0;
         int minutes = 0;
@@ -25,7 +28,7 @@
 
         // if the value has no time component (and no time zone), we are done
         boolean hasT = checkOffset(date, offset, 'T');
-        
+
         if (!hasT && (date.length() <= offset)) {
             Calendar calendar = new GregorianCalendar(year, month - 1, day);
 
@@ -34,14 +37,17 @@
         }
 
         if (hasT) {
+            offset += 1;
 
             // extract hours, minutes, seconds and milliseconds
-            hour = parseInt(date, offset += 1, offset += 2);
+            hour = parseInt(date, offset, offset + 2);
+            offset += 2;
             if (checkOffset(date, offset, ':')) {
                 offset += 1;
             }
 
-            minutes = parseInt(date, offset, offset += 2);
+            minutes = parseInt(date, offset, offset + 2);
+            offset += 2;
             if (checkOffset(date, offset, ':')) {
                 offset += 1;
             }
@@ -49,24 +55,25 @@
             if (date.length() > offset) {
                 char c = date.charAt(offset);
                 if (c != 'Z' && c != '+' && c != '-') {
-                    seconds = parseInt(date, offset, offset += 2);
+                    seconds = parseInt(date, offset, offset + 2);
+                    offset += 2;
                     if (seconds > 59 && seconds < 63) seconds = 59; // truncate up to 3 leap seconds
                     // milliseconds can be optional in the format
                     if (checkOffset(date, offset, '.')) {
                         offset += 1;
-                        int endOffset = indexOfNonDigit(date, offset + 1); // assume at least one digit
+                        int endOffset = indexOfNonDigit(date, offset);
                         int parseEndOffset = Math.min(endOffset, offset + 3); // parse up to 3 digits
                         int fraction = parseInt(date, offset, parseEndOffset);
                         // compensate for "missing" digits
                         switch (parseEndOffset - offset) { // number of digits parsed
-                        case 2:
-                            milliseconds = fraction * 10;
-                            break;
-                        case 1:
-                            milliseconds = fraction * 100;
-                            break;
-                        default:
-                            milliseconds = fraction;
+                            case 2:
+                                milliseconds = fraction * 10;
+                                break;
+                            case 1:
+                                milliseconds = fraction * 100;
+                                break;
+                            default:
+                                milliseconds = fraction;
                         }
                         offset = endOffset;
                     }
@@ -86,22 +93,46 @@
             timezone = TIMEZONE_UTC;
             offset += 1;
         } else if (timezoneIndicator == '+' || timezoneIndicator == '-') {
-            String timezoneOffset = date.substring(offset);
+            // Handle timezone with optional minutes, e.g. +01, +0100, +01:00
+            int tzStart = offset;
+            offset++; // skip '+' or '-'
+            int tzEnd = offset;
 
-            // When timezone has no minutes, we should append it, valid timezones are, for example: +00:00, +0000 and +00
+            // Parse hour of timezone offset
+            if (date.length() < tzEnd + 2) {
+                throw new IllegalArgumentException("Invalid time zone indicator length");
+            }
+            tzEnd += 2;
 
-            offset += timezoneOffset.length();
-            // 18-Jun-2015, tatu: Minor simplification, skip offset of "+0000"/"+00:00"
-            if ("+0000".equals(timezoneOffset) || "+00:00".equals(timezoneOffset)) {
+            if (date.length() > tzEnd) {
+                char c = date.charAt(tzEnd);
+                if (c == ':') {
+                    // format +hh:mm
+                    tzEnd++;
+                    if (date.length() < tzEnd + 2) {
+                        throw new IllegalArgumentException("Invalid time zone indicator length");
+                    }
+                    tzEnd += 2;
+                } else if (c >= '0' && c <= '9') {
+                    // format +hhmm
+                    tzEnd += 2;
+                }
+            }
+
+            String timezoneOffset = date.substring(tzStart, tzEnd);
+            offset = tzEnd;
+
+            // Normalize timezoneOffset for known patterns: "+01" => "+0100"
+            if (timezoneOffset.length() == 3) { // e.g. +01
+                timezoneOffset = timezoneOffset + "00";
+            } else if (timezoneOffset.length() == 5 && timezoneOffset.charAt(3) == ':') { // e.g. +01:00
+                timezoneOffset = timezoneOffset.substring(0, 3) + timezoneOffset.substring(4);
+            }
+
+            if ("+0000".equals(timezoneOffset) || "-0000".equals(timezoneOffset)) {
                 timezone = TIMEZONE_UTC;
             } else {
-                // 18-Jun-2015, tatu: Looks like offsets only work from GMT, not UTC...
-                //    not sure why, but that's the way it looks. Further, Javadocs for
-                //    `java.util.TimeZone` specifically instruct use of GMT as base for
-                //    custom timezones... odd.
                 String timezoneId = "GMT" + timezoneOffset;
-                  String timezoneId = "UTC" + timezoneOffset;
-
                 timezone = TimeZone.getTimeZone(timezoneId);
 
                 String act = timezone.getID();
@@ -113,13 +144,13 @@
                      */
                     String cleaned = act.replace(":", "");
                     if (!cleaned.equals(timezoneId)) {
-                        throw new IndexOutOfBoundsException("Mismatching time zone indicator: "+timezoneId+" given, resolves to "
-                                +timezone.getID());
+                        throw new IndexOutOfBoundsException("Mismatching time zone indicator: " + timezoneId + " given, resolves to "
+                                + timezone.getID());
                     }
                 }
             }
         } else {
-            throw new IndexOutOfBoundsException("Invalid time zone indicator '" + timezoneIndicator+"'");
+            throw new IndexOutOfBoundsException("Invalid time zone indicator '" + timezoneIndicator + "'");
         }
 
         Calendar calendar = new GregorianCalendar(timezone);
@@ -143,12 +174,13 @@
     } catch (IllegalArgumentException e) {
         fail = e;
     }
-    String input = (date == null) ? null : ('"' + date + "'");
+    String input = (date == null) ? null : ('"' + date + '"');
     String msg = fail.getMessage();
     if (msg == null || msg.isEmpty()) {
-        msg = "("+fail.getClass().getName()+")";
+        msg = "(" + fail.getClass().getName() + ")";
     }
     ParseException ex = new ParseException("Failed to parse date [" + input + "]: " + msg, pos.getIndex());
     ex.initCause(fail);
     throw ex;
 }
+
