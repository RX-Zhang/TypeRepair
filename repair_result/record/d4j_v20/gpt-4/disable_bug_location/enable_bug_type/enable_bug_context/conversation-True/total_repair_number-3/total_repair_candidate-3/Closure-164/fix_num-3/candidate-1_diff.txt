--- 
+++ 
@@ -8,38 +8,21 @@
   // This is described in Draft 2 of the ES4 spec,
   // Section 3.4.7: Subtyping Function Types.
 
-  // this.returnType <: that.returnType (covariant)
-  if (!this.returnType.isSubtype(that.returnType)) {
+  // Covariant return type: this.returnType <: that.returnType
+  if (!that.returnType.isSubtype(this.returnType)) {
     return false;
   }
 
-  // that.paramType[i] <: this.paramType[i] (contravariant)
-  //
-  // If this.paramType[i] is required,
-  // then that.paramType[i] is required.
-  //
-  // In theory, the "required-ness" should work in the other direction as
-  // well. In other words, if we have
-  //
-  // function f(number, number) {}
-  // function g(number) {}
-  //
-  // Then f *should* not be a subtype of g, and g *should* not be
-  // a subtype of f. But in practice, we do not implement it this way.
-  // We want to support the use case where you can pass g where f is
-  // expected, and pretend that g ignores the second argument.
-  // That way, you can have a single "no-op" function, and you don't have
-  // to create a new no-op function for every possible type signature.
-  //
-  // So, in this case, g < f, but f !< g
+  // Contravariant parameter types:
+  // For each parameter, that.paramType[i] <: this.paramType[i]
   Node thisParam = parameters.getFirstChild();
   Node thatParam = that.parameters.getFirstChild();
   while (thisParam != null && thatParam != null) {
     JSType thisParamType = thisParam.getJSType();
     JSType thatParamType = thatParam.getJSType();
+
     if (thisParamType != null) {
-      if (thatParamType == null ||
-          !thatParamType.isSubtype(thisParamType)) {
+      if (thatParamType == null || !thisParamType.isSubtype(thatParamType)) {
         return false;
       }
     }
@@ -47,14 +30,16 @@
     boolean thisIsVarArgs = thisParam.isVarArgs();
     boolean thatIsVarArgs = thatParam.isVarArgs();
 
-    // "that" can't be a supertype, because it's missing a required argument.
-      // NOTE(nicksantos): In our type system, we use {function(...?)} and
-      // {function(...NoType)} to to indicate that arity should not be
-      // checked. Strictly speaking, this is not a correct formulation,
-      // because now a sub-function can required arguments that are var_args
-      // in the super-function. So we special-case this.
+    // If "that" is missing a required parameter that "this" expects,
+    // then it's not a supertype.
+    if (!thisIsVarArgs && thatIsVarArgs) {
+      // "that" has var args but "this" does not: ok, accept as supertype
+      // continue normally
+    } else if (thisIsVarArgs && !thatIsVarArgs) {
+      // "this" has var args but "that" does not: "that" is missing args
+      return false;
+    }
 
-    // don't advance if we have variable arguments
     if (!thisIsVarArgs) {
       thisParam = thisParam.getNext();
     }
@@ -62,14 +47,20 @@
       thatParam = thatParam.getNext();
     }
 
-    // both var_args indicates the end
     if (thisIsVarArgs && thatIsVarArgs) {
+      // Both var args means end of parameters
       thisParam = null;
       thatParam = null;
     }
   }
 
-  // "that" can't be a supertype, because it's missing a required arguement.
+  // If this still has parameters while that does not, then that is missing required args
+  if (thisParam != null) {
+    // If leftover params in this are all optional/varargs, it's okay
+    // Here, conservatively, return false as that is missing required args
+    return false;
+  }
 
   return true;
 }
+
