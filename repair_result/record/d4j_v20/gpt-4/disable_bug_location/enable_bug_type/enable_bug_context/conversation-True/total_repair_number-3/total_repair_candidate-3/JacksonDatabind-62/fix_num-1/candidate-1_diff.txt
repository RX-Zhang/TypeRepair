--- 
+++ 
@@ -2,14 +2,14 @@
         BeanProperty property) throws JsonMappingException
 {
     // May need to resolve types for delegate-based creators:
-    JsonDeserializer<Object> delegateDeser = null;
+    JsonDeserializer<Object> delegateDeser = _delegateDeserializer;
     if (_valueInstantiator != null) {
         if (_valueInstantiator.canCreateUsingDelegate()) {
             JavaType delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());
             if (delegateType == null) {
-                throw new IllegalArgumentException("Invalid delegate-creator definition for "+_collectionType
-                        +": value instantiator ("+_valueInstantiator.getClass().getName()
-                        +") returned true for 'canCreateUsingDelegate()', but null for 'getDelegateType()'");
+                throw new IllegalArgumentException("Invalid delegate-creator definition for " + _collectionType
+                        + ": value instantiator (" + _valueInstantiator.getClass().getName()
+                        + ") returned true for 'canCreateUsingDelegate()', but null for 'getDelegateType()'");
             }
             delegateDeser = findDeserializer(ctxt, delegateType, property);
         }
@@ -21,7 +21,7 @@
             JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);
     // also, often value deserializer is resolved here:
     JsonDeserializer<?> valueDeser = _valueDeserializer;
-    
+
     // May have a content converter
     valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);
     final JavaType vt = _collectionType.getContentType();
@@ -37,3 +37,4 @@
     }
     return withResolved(delegateDeser, valueDeser, valueTypeDeser, unwrapSingle);
 }
+
