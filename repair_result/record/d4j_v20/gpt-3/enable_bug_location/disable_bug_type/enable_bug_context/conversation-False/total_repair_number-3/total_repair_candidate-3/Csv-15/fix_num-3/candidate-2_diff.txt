--- 
+++ 
@@ -6,7 +6,8 @@
     final int end = offset + len;
 
     final char delimChar = getDelimiter();
-    final char quoteChar = getQuoteCharacter().charValue();
+    final Character quoteCharacter = getQuoteCharacter();
+    final char quoteChar = quoteCharacter != null ? quoteCharacter.charValue() : '"';
 
     QuoteMode quoteModePolicy = getQuoteMode();
     if (quoteModePolicy == null) {
@@ -36,7 +37,7 @@
         } else {
             char c = value.charAt(pos);
 
-            if (newRecord && (c < 0x20 || c > 0x21 && c < 0x23 || c > 0x2B && c < 0x2D || c > 0x7E)) {
+            if (newRecord && (c < 0x20 || (c > 0x21 && c < 0x23) || (c > 0x2B && c < 0x2D) || c > 0x7E)) {
                 quote = true;
             } else if (c <= COMMENT) {
                 // Some other chars at the start of a value caused the parser to fail, so for now
@@ -89,18 +90,22 @@
     while (pos < end) {
         final char c = value.charAt(pos);
         if (c == quoteChar) {
-            // write out the chunk up until this point
-
-            // add 1 to the length to write out the encapsulator also
-            out.append(value, start, pos + 1);
-            // put the next starting position on the encapsulator so we will
-            // write it out again with the next string (effectively doubling it)
-            start = pos;
+            // write out the chunk up until this point (excluding the current quote)
+            if (pos > start) {
+                out.append(value, start, pos);
+            }
+            // write the doubled quote character
+            out.append(quoteChar).append(quoteChar);
+            // advance start to next char after current
+            start = pos + 1;
         }
         pos++;
     }
 
     // write the last segment
-    out.append(value, start, pos);
+    if (pos > start) {
+        out.append(value, start, pos);
+    }
     out.append(quoteChar);
 }
+
