--- 
+++ 
@@ -2,11 +2,72 @@
     String docData;
     Document doc = null;
 
-    // look for BOM - overrides any other header or input
+    // Detect BOM and override charset if BOM present
+    // Mark the position so we can rewind after reading BOM
+    byteData.mark();
+    byte[] bom = new byte[4];
+    int bomLength = 0;
+    int remaining = byteData.remaining();
+
+    if (remaining >= 4) {
+        bom[0] = byteData.get();
+        bom[1] = byteData.get();
+        bom[2] = byteData.get();
+        bom[3] = byteData.get();
+        bomLength = 4;
+    } else if (remaining > 0) {
+        for (int i = 0; i < remaining; i++) {
+            bom[i] = byteData.get();
+        }
+        bomLength = remaining;
+    }
+
+    String bomCharset = null;
+    int skip = 0;
+
+    if (bomLength >= 3 &&
+        (bom[0] & 0xFF) == 0xEF &&
+        (bom[1] & 0xFF) == 0xBB &&
+        (bom[2] & 0xFF) == 0xBF) {
+        bomCharset = "UTF-8";
+        skip = 3;
+    } else if (bomLength >= 4 &&
+        (bom[0] & 0xFF) == 0x00 &&
+        (bom[1] & 0xFF) == 0x00 &&
+        (bom[2] & 0xFF) == 0xFE &&
+        (bom[3] & 0xFF) == 0xFF) {
+        bomCharset = "UTF-32BE";
+        skip = 4;
+    } else if (bomLength >= 4 &&
+        (bom[0] & 0xFF) == 0xFF &&
+        (bom[1] & 0xFF) == 0xFE &&
+        (bom[2] & 0xFF) == 0x00 &&
+        (bom[3] & 0xFF) == 0x00) {
+        bomCharset = "UTF-32LE";
+        skip = 4;
+    } else if (bomLength >= 2 &&
+        (bom[0] & 0xFF) == 0xFE &&
+        (bom[1] & 0xFF) == 0xFF) {
+        bomCharset = "-16BE";
+        skip = 2;
+    } else if (bomLength >= 2 &&
+        (bom[0] & 0xFF) == 0xFF &&
+        (bom[1] & 0xFF) == 0xFE) {
+        bomCharset = "UTF-16LE";
+        skip = 2;
+    }
+
+    // Reset position to after BOM if BOM detected; else reset to start
+    byteData.reset();
+    byteData.position(byteData.position() + skip);
+
+    if (bomCharset != null) {
+        charsetName = bomCharset;
+    }
 
     if (charsetName == null) { // determine from meta. safe parse as UTF-8
-        // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
-        docData = Charset.forName(defaultCharset).decode(byteData).toString();
+        // read as UTF-8 or defaultCharset if UTF-8 not available
+        docData = Charset.forName(defaultCharset).decode(byteData.slice()).toString();
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
         if (meta != null) { // if not found, will keep utf-8 as best attempt
@@ -24,28 +85,34 @@
                 }
             }
 
-            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equalsIgnoreCase(defaultCharset)) {
                 foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                 charsetName = foundCharset;
-                byteData.rewind();
+                byteData.position(0);
                 docData = Charset.forName(foundCharset).decode(byteData).toString();
                 doc = null;
             }
         }
     } else { // specified by content type header (or by user on file load)
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
-        docData = Charset.forName(charsetName).decode(byteData).toString();
+        byteData.position(skip); // reset position after BOM if any
+        docData = Charset.forName(charsetName).decode(byteData.slice()).toString();
     }
+
     if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-        byteData.rewind();
-        docData = Charset.forName(defaultCharset).decode(byteData).toString();
         docData = docData.substring(1);
-        charsetName = defaultCharset;
+        if (charsetName == null) {
+            charsetName = defaultCharset;
+        }
         doc = null;
     }
+
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
-        doc.outputSettings().charset(charsetName);
+        if (charsetName != null) {
+            doc.outputSettings().charset(charsetName);
+        }
     }
     return doc;
 }
+
