--- 
+++ 
@@ -6,7 +6,8 @@
     final int end = offset + len;
 
     final char delimChar = getDelimiter();
-    final char quoteChar = getQuoteCharacter().charValue();
+    final Character quoteCharObj = getQuoteCharacter();
+    final char quoteChar = quoteCharObj.charValue();
 
     QuoteMode quoteModePolicy = getQuoteMode();
     if (quoteModePolicy == null) {
@@ -20,8 +21,13 @@
         quote = !(object instanceof Number);
         break;
     case NONE:
-        // Use the existing escaping code
-        printAndEscape(value, offset, len, out);
+        // Use the existing escaping code only if escapeCharacter is not null
+        if (getEscapeCharacter() != null) {
+            printAndEscape(value, offset, len, out);
+        } else {
+            // No escaping, print as is
+            out.append(value, offset, end);
+        }
         return;
     case MINIMAL:
         if (len <= 0) {
@@ -36,7 +42,7 @@
             char c = value.charAt(pos);
 
             // RFC4180 (https://tools.ietf.org/html/rfc4180) TEXTDATA =  %x20-21 / %x23-2B / %x2D-7E
-            if (newRecord && (c < '0' || c > '9' && c < 'A' || c > 'Z' && c < 'a' || c > 'z')) {
+            if (newRecord && (c < '0' || (c > '9' && c < 'A') || (c > 'Z' && c < 'a') || c > 'z')) {
                 quote = true;
             } else if (c <= COMMENT) {
                 // Some other chars at the start of a value caused the parser to fail, so for now
@@ -104,3 +110,4 @@
     out.append(value, start, pos);
     out.append(quoteChar);
 }
+
