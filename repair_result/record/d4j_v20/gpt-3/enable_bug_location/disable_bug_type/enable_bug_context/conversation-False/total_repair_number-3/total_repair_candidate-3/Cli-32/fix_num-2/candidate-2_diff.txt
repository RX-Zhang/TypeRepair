--- 
+++ 
@@ -3,12 +3,16 @@
     int pos;
     
     // the line ends before the max wrap pos or a new line char found
-    if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
-            || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
-    {
+    int nlPos = text.indexOf('\n', startPos);
+    int tabPos = text.indexOf('\t', startPos);
+    
+    if ((nlPos != -1 && nlPos <= startPos + width) ||
+        (tabPos != -1 && tabPos <= startPos + width)) {
+        pos = (nlPos != -1 && nlPos <= startPos + width) ? nlPos : tabPos;
         return pos + 1;
     }
-    else if (startPos + width >= text.length())
+    
+    if (startPos + width >= text.length())
     {
         return -1;
     }
@@ -19,10 +23,10 @@
 
     char c;
 
-    while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
+    while ((pos > startPos) && ((c = text.charAt(pos)) != ' ')
             && (c != '\n') && (c != '\r'))
     {
-        --pos;
+        pos--;
     }
 
     // if we found it - just return
@@ -31,12 +35,13 @@
         return pos;
     }
     
-    // if we didn't find one, simply chop at startPos+width
+    // if we didn't find one, simply chop at startPos+width and move forward
     pos = startPos + width;
-    while ((pos <= text.length()) && ((c = text.charAt(pos)) != ' ')
+    while (pos < text.length() && ((c = text.charAt(pos)) != ' ')
            && (c != '\n') && (c != '\r'))
     {
-        ++pos;
+        pos++;
     }        
     return pos == text.length() ? -1 : pos;
 }
+
