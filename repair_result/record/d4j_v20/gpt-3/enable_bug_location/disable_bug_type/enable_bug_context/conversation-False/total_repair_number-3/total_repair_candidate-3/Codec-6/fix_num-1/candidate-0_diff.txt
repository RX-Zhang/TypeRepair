--- 
+++ 
@@ -7,37 +7,31 @@
         throw new IndexOutOfBoundsException();
     } else if (len == 0) {
         return 0;
-    } else {
-        /*
-         Rationale for while-loop on (readLen == 0):
-         -----
-         Base64.readResults() usually returns > 0 or EOF (-1).  In the
-         rare case where it returns 0, we just keep trying.
+    }
 
-         This is essentially an undocumented contract for InputStream
-         implementors that want their code to work properly with
-         java.io.InputStreamReader, since the latter hates it when
-         InputStream.read(byte[]) returns a zero.  Unfortunately our
-         readResults() call must return 0 if a large amount of the data
-         being decoded was non-base64, so this while-loop enables proper
-         interop with InputStreamReader for that scenario.
-         -----
-         This is a fix for CODEC-101
-        */
-            if (!base64.hasData()) {
-                byte[] buf = new byte[doEncode ? 4096 : 8192];
-                int c = in.read(buf);
-                // A little optimization to avoid System.arraycopy()
-                // when possible.
-                if (c > 0 && b.length == len) {
-                    base64.setInitialBuffer(b, offset, len);
-                }
-                if (doEncode) {
-                    base64.encode(buf, 0, c);
-                } else {
-                    base64.decode(buf, 0, c);
-                }
+    int readLen = 0;
+    // Loop until something is read or EOF reached (-1)
+    while (readLen == 0) {
+        if (!base64.hasData()) {
+            byte[] buf = new byte[doEncode ? 4096 : 8192];
+            int c = in.read(buf);
+            if (c == -1) {
+                // No more data, break out the loop to return what we have
+                break;
             }
-        return base64.readResults(b, offset, len);
+            // A little optimization to avoid System.arraycopy()
+            // when possible.
+            if (c > 0 && b.length == len) {
+                base64.setInitialBuffer(b, offset, len);
+            }
+            if (doEncode) {
+                base64.encode(buf, 0, c);
+            } else {
+                base64.decode(buf, 0, c);
+            }
+        }
+        readLen = base64.readResults(b, offset, len);
     }
+    return readLen > 0 ? readLen : -1;
 }
+
