--- 
+++ 
@@ -7,8 +7,12 @@
         int len = 0;
         int read = 0;
         while((ch = i.read()) != -1) {
-            read++;
-            if (ch == ' '){
+            if (ch >= '0' && ch <= '9') {
+                len *= 10;
+                len += ch - '0';
+                read++;
+            } else if (ch == ' ') {
+                read++;
                 // Get keyword
                 final ByteArrayOutputStream coll = new ByteArrayOutputStream();
                 while((ch = i.read()) != -1) {
@@ -17,21 +21,22 @@
                         final String keyword = coll.toString(CharsetNames.UTF_8);
                         // Get rest of entry
                         final int restLen = len - read;
+                        if (restLen < 0) {
+                            // Malformed header with length smaller than keyword length
+                            throw new IOException("Invalid Pax header length: " + len);
+                        }
                         if (restLen == 1) { // only NL
                             headers.remove(keyword);
-                        } else {
+                        } else if (restLen > 1) {
                             final byte[] rest = new byte[restLen];
                             final int got = IOUtils.readFully(i, rest);
                             if (got != restLen) {
-                                throw new IOException("Failed to read "
-                                                      + "Paxheader. Expected "
-                                                      + restLen
-                                                      + " bytes, read "
-                                                      + got);
+                                throw new IOException("Failed to read Paxheader. Expected "
+                                                      + restLen + " bytes, read " + got);
                             }
                             // Drop trailing NL
                             final String value = new String(rest, 0,
-                                                      restLen - 1, CharsetNames.UTF_8);
+                                                          restLen - 1, CharsetNames.UTF_8);
                             headers.put(keyword, value);
                         }
                         break;
@@ -39,9 +44,16 @@
                     coll.write((byte) ch);
                 }
                 break; // Processed single header
+            } else if (ch == '\n') {
+                // blank line, ignore and restart
+                break; // break inner length-reading loop to restart
+            } else {
+                // Unexpected character, ignore until next line
+                while (ch != -1 && ch != '\n') {
+                    ch = i.read();
+                }
+                break; // break inner length-reading loop to restart
             }
-            len *= 10;
-            len += ch - '0';
         }
         if (ch == -1){ // EOF
             break;
@@ -49,3 +61,4 @@
     }
     return headers;
 }
+
