--- 
+++ 
@@ -14,7 +14,27 @@
                 continue;
             }
             // but not just one
-            // 26-Oct-2012, tatu: As per [databind#94], must allow use of 'defaultImpl'
+            // need to check for natural types or default impl
+            JsonToken t = _tokens[i].firstToken();
+            if (t.isScalarValue()) {
+                JsonParser buffered = _tokens[i].asParser(p);
+                buffered.nextToken();
+                SettableBeanProperty prop = extProp.getProperty();
+                Object result = TypeDeserializer.deserializeIfNatural(buffered, ctxt, prop.getType());
+                if (result != null) {
+                    values[i] = result;
+                    // also: if it's creator prop, fill in
+                    if (prop.getCreatorIndex() >= 0) {
+                        buffer.assignParameter(prop, result);
+
+                        SettableBeanProperty typeProp = extProp.getTypeProperty();
+                        if ((typeProp != null) && (typeProp.getCreatorIndex() >= 0)) {
+                            buffer.assignParameter(typeProp, null);
+                        }
+                    }
+                    continue;
+                }
+            }
             if (!extProp.hasDefaultType()) {
                 ctxt.reportInputMismatch(_beanType,
                         "Missing external type id property '%s'",
@@ -24,24 +44,33 @@
             }
         } else if (_tokens[i] == null) {
             SettableBeanProperty prop = extProp.getProperty();
-            ctxt.reportInputMismatch(_beanType,
-                    "Missing property '%s' for external type id '%s'",
-                    prop.getName(), _properties[i].getTypePropertyName());
+            if(prop.isRequired() ||
+                    ctxt.isEnabled(DeserializationFeature.FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY)) {
+                ctxt.reportInputMismatch(_beanType,
+                        "Missing property '%s' for external type id '%s'",
+                        prop.getName(), extProp.getTypePropertyName());
+            }
+            // no value to assign; set null
+            if (prop.getCreatorIndex() >= 0) {
+                buffer.assignParameter(prop, null);
+                SettableBeanProperty typeProp = extProp.getTypeProperty();
+                if ((typeProp != null) && (typeProp.getCreatorIndex() >= 0)) {
+                    buffer.assignParameter(typeProp, typeId);
+                }
+            }
+            continue;
         }
-        values[i] = _deserialize(p, ctxt, i, typeId);
+        // only deserialize if not set already by natural type handling above
+        if (values[i] == null) {
+            values[i] = _deserialize(p, ctxt, i, typeId);
+            final SettableBeanProperty prop = extProp.getProperty();
+            if (prop.getCreatorIndex() >= 0) {
+                buffer.assignParameter(prop, values[i]);
 
-        final SettableBeanProperty prop = extProp.getProperty();
-        // also: if it's creator prop, fill in
-        if (prop.getCreatorIndex() >= 0) {
-            buffer.assignParameter(prop, values[i]);
-
-            // [databind#999] And maybe there's creator property for type id too?
-            SettableBeanProperty typeProp = extProp.getTypeProperty();
-            // for now, should only be needed for creator properties, too
-            if ((typeProp != null) && (typeProp.getCreatorIndex() >= 0)) {
-                // 31-May-2018, tatu: [databind#1328] if id is NOT plain `String`, need to
-                //    apply deserializer... fun fun.
-                buffer.assignParameter(typeProp, typeId);
+                SettableBeanProperty typeProp = extProp.getTypeProperty();
+                if ((typeProp != null) && (typeProp.getCreatorIndex() >= 0)) {
+                    buffer.assignParameter(typeProp, typeId);
+                }
             }
         }
     }
@@ -55,3 +84,4 @@
     }
     return bean;
 }
+
