--- 
+++ 
@@ -6,7 +6,8 @@
     final int end = offset + len;
 
     final char delimChar = getDelimiter();
-    final char quoteChar = getQuoteCharacter().charValue();
+    final Character quoteCharacter = getQuoteCharacter();
+    final char quoteChar = (quoteCharacter != null) ? quoteCharacter.charValue() : '"';
 
     QuoteMode quoteModePolicy = getQuoteMode();
     if (quoteModePolicy == null) {
@@ -36,12 +37,12 @@
         } else {
             char c = value.charAt(pos);
 
-            if (newRecord && (c < 0x20 || c > 0x21 && c < 0x23 || c > 0x2B && c < 0x2D || c > 0x7E)) {
+            // Warning: original was complex condition that mishandled the first char check,
+            // simplify here to only quote non-printable or control chars or quoteChar/delimiter/LF/CR
+            if (newRecord && (c < 0x20 || c > 0x7E)) {
                 quote = true;
-            } else if (c <= COMMENT) {
-                // Some other chars at the start of a value caused the parser to fail, so for now
-                // encapsulate if we start in anything less than '#'. We are being conservative
-                // by including the default comment char too.
+            } else if (c <= '#') { // '#' is often COMMENT char (35)
+                // encapsulate if starts with control char or comment char or less than '#'
                 quote = true;
             } else {
                 while (pos < end) {
@@ -56,9 +57,8 @@
                 if (!quote) {
                     pos = end - 1;
                     c = value.charAt(pos);
-                    // Some other chars at the end caused the parser to fail, so for now
-                    // encapsulate if we end in anything less than ' '
-                    if (c <= SP) {
+                    // encapsulate if ends with control char or whitespace (<= SP)
+                    if (c <= ' ') {
                         quote = true;
                     }
                 }
@@ -90,11 +90,8 @@
         final char c = value.charAt(pos);
         if (c == quoteChar) {
             // write out the chunk up until this point
-
-            // add 1 to the length to write out the encapsulator also
             out.append(value, start, pos + 1);
-            // put the next starting position on the encapsulator so we will
-            // write it out again with the next string (effectively doubling it)
+            // double quote the quote character by resetting start to pos for next segment
             start = pos;
         }
         pos++;
@@ -104,3 +101,4 @@
     out.append(value, start, pos);
     out.append(quoteChar);
 }
+
