--- 
+++ 
@@ -6,46 +6,67 @@
         int ch;
         int len = 0;
         int read = 0;
+        // Read length (a decimal number)
         while((ch = i.read()) != -1) {
+            if (ch == '\n') {
+                // Blank line - ignore and continue outer loop
+                len = 0;
+                read = 0;
+                continue;
+            }
+            if (ch == ' ') {
+                read++;
+                break; // length complete
+            }
+            if (ch < '0' || ch > '9') {
+                // Invalid length format, skip until newline or EOF
+                while (ch != -1 && ch != '\n') {
+                    ch = i.read();
+                }
+                len = 0;
+                read = 0;
+                break;
+            }
+            len = len * 10 + (ch - '0');
             read++;
-            if (ch == ' '){
-                // Get keyword
-                final ByteArrayOutputStream coll = new ByteArrayOutputStream();
-                while((ch = i.read()) != -1) {
-                    read++;
-                    if (ch == '='){ // end of keyword
-                        final String keyword = coll.toString(CharsetNames.UTF_8);
-                        // Get rest of entry
-                        final int restLen = len - read;
-                        if (restLen == 1) { // only NL
-                            headers.remove(keyword);
-                        } else {
-                            final byte[] rest = new byte[restLen];
-                            final int got = IOUtils.readFully(i, rest);
-                            if (got != restLen) {
-                                throw new IOException("Failed to read "
-                                                      + "Paxheader. Expected "
-                                                      + restLen
-                                                      + " bytes, read "
-                                                      + got);
-                            }
-                            // Drop trailing NL
-                            final String value = new String(rest, 0,
-                                                      restLen - 1, CharsetNames.UTF_8);
-                            headers.put(keyword, value);
-                        }
-                        break;
-                    }
-                    coll.write((byte) ch);
-                }
-                break; // Processed single header
+        }
+        if (ch == -1) { // EOF
+            break;
+        }
+        if (len == 0) {
+            // No length found, continue to next header
+            continue;
+        }
+        // Now read keyword=value\n of length len - length bytes already counted
+        final ByteArrayOutputStream coll = new ByteArrayOutputStream();
+        int toRead = len - read; // number of bytes left in this record
+        while(toRead > 0) {
+            ch = i.read();
+            if (ch == -1) {
+                throw new IOException("Unexpected EOF in Pax header");
             }
-            len *= 10;
-            len += ch - '0';
+            coll.write((byte)ch);
+            toRead--;
         }
-        if (ch == -1){ // EOF
-            break;
+        // Convert to string (excluding trailing '\n')
+        String entry = coll.toString(CharsetNames.UTF_8);
+        if (entry.length() == 0 || entry.charAt(entry.length() -1) != '\n') {
+            throw new IOException("Pax header entry does not end with newline");
+        }
+        entry = entry.substring(0, entry.length() - 1); // remove trailing newline
+        int eqIdx = entry.indexOf('=');
+        if (eqIdx == -1) {
+            // No '=' in entry, ignore malformed record
+            continue;
+        }
+        final String keyword = entry.substring(0, eqIdx);
+        final String value = entry.substring(eqIdx + 1);
+        if (value.isEmpty()) {
+            headers.remove(keyword);
+        } else {
+            headers.put(keyword, value);
         }
     }
     return headers;
 }
+
