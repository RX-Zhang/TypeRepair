--- 
+++ 
@@ -3,22 +3,22 @@
     // 23-May-2017, tatu: To be honest, code here is rather hairy and I don't like all
     //    conditionals; and it seems odd to return `null` but NOT considering input
     //    as closed... would love a rewrite to simplify/clear up logic here.
-    
+
     // Check for _allowMultipleMatches - false and at least there is one token - which is _currToken
     // check for no buffered context _exposedContext - null
     // If all the conditions matches then check for scalar / non-scalar property
     if (!_allowMultipleMatches && (_currToken != null) && (_exposedContext == null)) {
-        //if not scalar and ended successfully, and !includePath, then return null
-            if (_currToken.isStructEnd()) {
-                if (_headContext.isStartHandled()) {
-                    return (_currToken = null);
-                }
-            } else if (_currToken.isScalarValue()) {
-                //else if scalar, and scalar not present in obj/array and !includePath and INCLUDE_ALL matched once
-                // then return null 
-                if (!_headContext.isStartHandled() && (_itemFilter == TokenFilter.INCLUDE_ALL)) {
-                    return (_currToken = null);
-                }
+        // if not scalar and ended successfully, and !includePath, then return null
+        if (_currToken.isStructEnd()) {
+            if (_headContext.isStartHandled()) {
+                return (_currToken = null);
+            }
+        } else if (_currToken.isScalarValue()) {
+            // else if scalar, and scalar not present in obj/array and !includePath and INCLUDE_ALL matched once
+            // then return null 
+            if (!_headContext.isStartHandled() && (_itemFilter == TokenFilter.INCLUDE_ALL)) {
+                return (_currToken = null);
+            }
         }
     }
     // Anything buffered?
@@ -36,10 +36,11 @@
                 _exposedContext = null;
                 if (ctxt.inArray()) {
                     t = delegate.getCurrentToken();
-s this guaranteed to work without further checks?
-                      if (t != JsonToken.START_ARRAY) {
-                    _currToken = t;
-                    return t;
+                    // this is safe to return only if not START_ARRAY, to avoid emitting twice
+                    if (t != JsonToken.START_ARRAY) {
+                        _currToken = t;
+                        return t;
+                    }
                 }
 
                 // Almost! Most likely still have the current token;
@@ -66,13 +67,13 @@
     JsonToken t = delegate.nextToken();
     if (t == null) {
         // no strict need to close, since we have no state here
-        _currToken = t;
-        return t;
+        _currToken = null;
+        return null;
     }
 
     // otherwise... to include or not?
     TokenFilter f;
-    
+
     switch (t.id()) {
     case ID_START_ARRAY:
         f = _itemFilter;
@@ -82,13 +83,13 @@
         }
         if (f == null) { // does this occur?
             delegate.skipChildren();
-            break;
+            return _nextToken();
         }
         // Otherwise still iffy, need to check
         f = _headContext.checkValue(f);
         if (f == null) {
             delegate.skipChildren();
-            break;
+            return _nextToken();
         }
         if (f != TokenFilter.INCLUDE_ALL) {
             f = f.filterStartArray();
@@ -99,7 +100,7 @@
             return (_currToken = t);
         }
         _headContext = _headContext.createChildArrayContext(f, false);
-        
+
         // Also: only need buffering if parent path to be included
         if (_includePath) {
             t = _nextTokenWithBuffering(_headContext);
@@ -108,7 +109,7 @@
                 return t;
             }
         }
-        break;
+        return nextToken();
 
     case ID_START_OBJECT:
         f = _itemFilter;
@@ -118,13 +119,13 @@
         }
         if (f == null) { // does this occur?
             delegate.skipChildren();
-            break;
+            return nextToken();
         }
         // Otherwise still iffy, need to check
         f = _headContext.checkValue(f);
         if (f == null) {
             delegate.skipChildren();
-            break;
+            return nextToken();
         }
         if (f != TokenFilter.INCLUDE_ALL) {
             f = f.filterStartObject();
@@ -145,7 +146,7 @@
         }
         // note: inclusion of surrounding Object handled separately via
         // FIELD_NAME
-        break;
+        return nextToken();
 
     case ID_END_ARRAY:
     case ID_END_OBJECT:
@@ -161,7 +162,7 @@
                 return (_currToken = t);
             }
         }
-        break;
+        return nextToken();
 
     case ID_FIELD_NAME:
         {
@@ -176,20 +177,25 @@
                     if (_includeImmediateParent && !_headContext.isStartHandled()) {
                         t = _headContext.nextTokenToRead(); // returns START_OBJECT but also marks it handled
                         _exposedContext = _headContext;
+                        if (t != null) {
+                            _currToken = t;
+                            return t;
+                        }
                     }
+                    return (_currToken = t);
                 }
                 return (_currToken = t);
             }
             if (f == null) {
                 delegate.nextToken();
                 delegate.skipChildren();
-                break;
+                return nextToken();
             }
             f = f.includeProperty(name);
             if (f == null) {
                 delegate.nextToken();
                 delegate.skipChildren();
-                break;
+                return nextToken();
             }
             _itemFilter = f;
             if (f == TokenFilter.INCLUDE_ALL) {
@@ -204,7 +210,7 @@
                     return t;
                 }
             }
-            break;
+            return nextToken();
         }
 
     default: // scalar value
@@ -220,9 +226,7 @@
             }
         }
         // Otherwise not included (leaves must be explicitly included)
-        break;
-    }
-
-    // We get here if token was not yet found; offlined handling
-    return _nextToken2();
+        return nextToken();
+    }
 }
+
