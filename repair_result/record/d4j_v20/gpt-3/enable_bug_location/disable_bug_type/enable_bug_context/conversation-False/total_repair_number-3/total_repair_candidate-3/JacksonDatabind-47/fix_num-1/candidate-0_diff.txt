--- 
+++ 
@@ -3,14 +3,7 @@
 {
     JavaType type = baseType;
     final TypeFactory tf = config.getTypeFactory();
-    
-    // 10-Oct-2015, tatu: For 2.7, we'll need to delegate back to
-    //    now-deprecated secondary methods; this because while
-    //    direct sub-class not yet retrofitted may only override
-    //    those methods. With 2.8 or later we may consider removal
-    //    of these methods
 
-    
     // Ok: start by refining the main type itself; common to all types
     Class<?> serClass = findSerializationType(a);
     if (serClass != null) {
@@ -20,9 +13,9 @@
             type = type.withStaticTyping();
         } else {
             try {
-                // 11-Oct-2015, tatu: For deser, we call `TypeFactory.constructSpecializedType()`,
-                //   may be needed here too in future?
-                    type = tf.constructGeneralizedType(type, serClass);
+                // Use constructSpecializedType instead of constructGeneralizedType
+                // to ensure that serClass is a subclass of current type's raw class
+                type = tf.constructSpecializedType(type, serClass);
             } catch (IllegalArgumentException iae) {
                 throw new JsonMappingException(null,
                         String.format("Failed to widen type %s with annotation (value %s), from '%s': %s",
@@ -46,10 +39,10 @@
                     // 19-May-2016, tatu: As per [databind#1231], [databind#1178] may need to actually
                     //   specialize (narrow) type sometimes, even if more commonly opposite
                     //   is needed.
-                    if (keyClass.isAssignableFrom(currRaw)) { // common case
+                    if (currRaw.isAssignableFrom(keyClass)) { // specialization, ok as well
+                        keyType = tf.constructSpecializedType(keyType, keyClass);
+                    } else if (keyClass.isAssignableFrom(currRaw)) { // common case (generalize)
                         keyType = tf.constructGeneralizedType(keyType, keyClass);
-                    } else if (currRaw.isAssignableFrom(keyClass)) { // specialization, ok as well
-                        keyType = tf.constructSpecializedType(keyType, keyClass);
                     } else {
                         throw new JsonMappingException(null,
                                 String.format("Can not refine serialization key type %s into %s; types not related",
@@ -79,10 +72,10 @@
                //   is needed.
                Class<?> currRaw = contentType.getRawClass();
                try {
-                   if (contentClass.isAssignableFrom(currRaw)) { // common case
+                   if (currRaw.isAssignableFrom(contentClass)) { // specialization, ok as well
+                       contentType = tf.constructSpecializedType(contentType, contentClass);
+                   } else if (contentClass.isAssignableFrom(currRaw)) { // common case
                        contentType = tf.constructGeneralizedType(contentType, contentClass);
-                   } else if (currRaw.isAssignableFrom(contentClass)) { // specialization, ok as well
-                       contentType = tf.constructSpecializedType(contentType, contentClass);
                    } else {
                        throw new JsonMappingException(null,
                                String.format("Can not refine serialization content type %s into %s; types not related",
@@ -100,3 +93,4 @@
     }
     return type;
 }
+
