--- 
+++ 
@@ -3,23 +3,27 @@
     int pos;
     
     // the line ends before the max wrap pos or a new line char found
-    if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
-            || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
+    int nlPos = text.indexOf('\n', startPos);
+    int tabPos = text.indexOf('\t', startPos);
+    if ((nlPos != -1 && nlPos <= startPos + width)
+        || (tabPos != -1 && tabPos <= startPos + width))
     {
-        return pos + 1;
+        return Math.min(
+            nlPos != -1 ? nlPos : Integer.MAX_VALUE,
+            tabPos != -1 ? tabPos : Integer.MAX_VALUE)
+            + 1;
     }
     else if (startPos + width >= text.length())
     {
         return -1;
     }
 
-
     // look for the last whitespace character before startPos+width
     pos = startPos + width;
 
     char c;
 
-    while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
+    while (pos > startPos && ((c = text.charAt(pos)) != ' ')
             && (c != '\n') && (c != '\r'))
     {
         --pos;
@@ -33,10 +37,12 @@
     
     // if we didn't find one, simply chop at startPos+width
     pos = startPos + width;
-    while ((pos <= text.length()) && ((c = text.charAt(pos)) != ' ')
+    int textLength = text.length();
+    while (pos < textLength && ( (c = text.charAt(pos)) != ' ')
            && (c != '\n') && (c != '\r'))
     {
         ++pos;
     }        
-    return pos == text.length() ? -1 : pos;
+    return pos == textLength ? -1 : pos;
 }
+
