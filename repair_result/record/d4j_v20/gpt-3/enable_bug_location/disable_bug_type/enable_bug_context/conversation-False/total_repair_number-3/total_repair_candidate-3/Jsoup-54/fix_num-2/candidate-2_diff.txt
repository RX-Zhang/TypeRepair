--- 
+++ 
@@ -1,7 +1,34 @@
 private void copyAttributes(org.jsoup.nodes.Node source, Element el) {
     for (Attribute attribute : source.attributes()) {
-        // valid xml attribute names are: ^[a-zA-Z_:][-a-zA-Z0-9_:.]
-        String key = attribute.getKey().replaceAll("[^-a-zA-Z0-9_:.]", "");
-            el.setAttribute(key, attribute.getValue());
+        // valid xml attribute names are: ^[a-zA-Z_:][-a-zA-Z0-9_:.]*
+        String key = attribute.getKey();
+        // Remove characters invalid for XML attribute names
+        // but preserve the first character from the allowed set [a-zA-Z_:]
+        if (key.isEmpty()) continue;
+
+        // Ensure the first character is valid, else skip this attribute
+        char firstChar = key.charAt(0);
+        if (!((firstChar >= 'a' && firstChar <= 'z') ||
+              (firstChar >= 'A' && firstChar <= 'Z') ||
+              firstChar == '_' || firstChar == ':')) {
+            continue;
+        }
+
+        // Remove any invalid character in the rest of the attribute name
+        StringBuilder cleanedKey = new StringBuilder();
+        cleanedKey.append(firstChar);
+        for (int i = 1; i < key.length(); i++) {
+            char c = key.charAt(i);
+            if ((c >= 'a' && c <= 'z') ||
+                (c >= 'A' && c <= 'Z') ||
+                (c >= '0' && c <= '9') ||
+                c == '-' || c == '_' || c == ':' || c == '.') {
+                cleanedKey.append(c);
+            }
+            // else skip invalid characters
+        }
+
+        el.setAttribute(cleanedKey.toString(), attribute.getValue());
     }
 }
+
