--- 
+++ 
@@ -3,14 +3,7 @@
 {
     JavaType type = baseType;
     final TypeFactory tf = config.getTypeFactory();
-    
-    // 10-Oct-2015, tatu: For 2.7, we'll need to delegate back to
-    //    now-deprecated secondary methods; this because while
-    //    direct sub-class not yet retrofitted may only override
-    //    those methods. With 2.8 or later we may consider removal
-    //    of these methods
 
-    
     // Ok: start by refining the main type itself; common to all types
     Class<?> serClass = findSerializationType(a);
     if (serClass != null) {
@@ -20,9 +13,19 @@
             type = type.withStaticTyping();
         } else {
             try {
-                // 11-Oct-2015, tatu: For deser, we call `TypeFactory.constructSpecializedType()`,
-                //   may be needed here too in future?
+                // Need to check that serClass is either superclass or subclass; allow only widening (generalize) or narrowing (specialize)
+                Class<?> currRaw = type.getRawClass();
+                if (serClass.isAssignableFrom(currRaw)) {
+                    // widening/generalizing
                     type = tf.constructGeneralizedType(type, serClass);
+                } else if (currRaw.isAssignableFrom(serClass)) {
+                    // narrowing/specializing
+                    type = tf.constructSpecializedType(type, serClass);
+                } else {
+                    throw new JsonMappingException(null,
+                            String.format("Failed to widen type %s with annotation (value %s), from '%s': Class %s not a super-type of %s",
+                                    type, serClass.getName(), a.getName(), serClass.getName(), currRaw.getName()));
+                }
             } catch (IllegalArgumentException iae) {
                 throw new JsonMappingException(null,
                         String.format("Failed to widen type %s with annotation (value %s), from '%s': %s",
@@ -43,12 +46,9 @@
             } else {
                 Class<?> currRaw = keyType.getRawClass();
                 try {
-                    // 19-May-2016, tatu: As per [databind#1231], [databind#1178] may need to actually
-                    //   specialize (narrow) type sometimes, even if more commonly opposite
-                    //   is needed.
-                    if (keyClass.isAssignableFrom(currRaw)) { // common case
+                    if (keyClass.isAssignableFrom(currRaw)) { // common case: widen/generalize
                         keyType = tf.constructGeneralizedType(keyType, keyClass);
-                    } else if (currRaw.isAssignableFrom(keyClass)) { // specialization, ok as well
+                    } else if (currRaw.isAssignableFrom(keyClass)) { // specialize/narrow
                         keyType = tf.constructSpecializedType(keyType, keyClass);
                     } else {
                         throw new JsonMappingException(null,
@@ -74,21 +74,18 @@
            if (contentType.hasRawClass(contentClass)) {
                contentType = contentType.withStaticTyping();
            } else {
-               // 03-Apr-2016, tatu: As per [databind#1178], may need to actually
-               //   specialize (narrow) type sometimes, even if more commonly opposite
-               //   is needed.
                Class<?> currRaw = contentType.getRawClass();
                try {
-                   if (contentClass.isAssignableFrom(currRaw)) { // common case
+                   if (contentClass.isAssignableFrom(currRaw)) { // common case: widen/generalize
                        contentType = tf.constructGeneralizedType(contentType, contentClass);
-                   } else if (currRaw.isAssignableFrom(contentClass)) { // specialization, ok as well
+                   } else if (currRaw.isAssignableFrom(contentClass)) { // specialize/narrow
                        contentType = tf.constructSpecializedType(contentType, contentClass);
                    } else {
                        throw new JsonMappingException(null,
                                String.format("Can not refine serialization content type %s into %s; types not related",
                                        contentType, contentClass.getName()));
                    }
-               } catch (IllegalArgumentException iae) { // shouldn't really happen
+               } catch (IllegalArgumentException iae) {
                    throw new JsonMappingException(null,
                            String.format("Internal error: failed to refine value type of %s with concrete-type annotation (value %s), from '%s': %s",
                                    type, contentClass.getName(), a.getName(), iae.getMessage()),
@@ -100,3 +97,4 @@
     }
     return type;
 }
+
