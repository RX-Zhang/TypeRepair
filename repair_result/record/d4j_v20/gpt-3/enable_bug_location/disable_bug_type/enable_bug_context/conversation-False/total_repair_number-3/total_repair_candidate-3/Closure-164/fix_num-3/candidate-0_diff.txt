--- 
+++ 
@@ -34,12 +34,19 @@
   // So, in this case, g < f, but f !< g
   Node thisParam = parameters.getFirstChild();
   Node thatParam = that.parameters.getFirstChild();
+
   while (thisParam != null && thatParam != null) {
     JSType thisParamType = thisParam.getJSType();
     JSType thatParamType = thatParam.getJSType();
+
+    // If this param type is non-null, that param type must be a subtype of this param type
     if (thisParamType != null) {
-      if (thatParamType == null ||
-          !thatParamType.isSubtype(thisParamType)) {
+      if (thatParamType == null || !thatParamType.isSubtype(thisParamType)) {
+        return false;
+      }
+    } else {
+      // If this param type is null, that param type must be null as well
+      if (thatParamType != null) {
         return false;
       }
     }
@@ -47,29 +54,38 @@
     boolean thisIsVarArgs = thisParam.isVarArgs();
     boolean thatIsVarArgs = thatParam.isVarArgs();
 
-    // "that" can't be a supertype, because it's missing a required argument.
-      // NOTE(nicksantos): In our type system, we use {function(...?)} and
-      // {function(...NoType)} to to indicate that arity should not be
-      // checked. Strictly speaking, this is not a correct formulation,
-      // because now a sub-function can required arguments that are var_args
-      // in the super-function. So we special-case this.
+    // If this param is required, "that" param must be required
+    if (!thatIsVarArgs && thisIsVarArgs) {
+      // that param is not var args but this param is var args (this param accepts var args),
+      // so that param cannot be required if this is var args
+      // This may be acceptable, so no early return here; we rely on type check above
+    }
 
-    // don't advance if we have variable arguments
+    // Both var_args means end of parameters
+    if (thisIsVarArgs && thatIsVarArgs) {
+      thisParam = null;
+      thatParam = null;
+      break;
+    }
+
     if (!thisIsVarArgs) {
       thisParam = thisParam.getNext();
     }
     if (!thatIsVarArgs) {
       thatParam = thatParam.getNext();
     }
-
-    // both var_args indicates the end
-    if (thisIsVarArgs && thatIsVarArgs) {
-      thisParam = null;
-      thatParam = null;
-    }
   }
 
-  // "that" can't be a supertype, because it's missing a required arguement.
+  // After matching parameters, check if that has any required parameters left unmatched
+  // If "that" still has required parameters, "this" can't be a subtype of "that"
+  while (thatParam != null) {
+    if (!thatParam.isOptional() && !thatParam.isVarArgs()) {
+      // "that" has a required parameter that "this" does not have
+      return false;
+    }
+    thatParam = thatParam.getNext();
+  }
 
   return true;
 }
+
