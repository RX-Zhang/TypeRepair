--- 
+++ 
@@ -12,11 +12,11 @@
         throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,
                 "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName());
     }
-        // should always get field name, but just in case...
-        if (p.nextToken() != JsonToken.FIELD_NAME) {
-            throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,
-                    "need JSON String that contains type id (for subtype of "+baseTypeName()+")");
-        }
+    // should always get field name, but just in case...
+    if (p.nextToken() != JsonToken.FIELD_NAME) {
+        throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,
+                "need JSON String that contains type id (for subtype of "+baseTypeName()+")");
+    }
     final String typeId = p.getText();
     JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);
     p.nextToken();
@@ -28,10 +28,12 @@
         tb.writeStartObject(); // recreate START_OBJECT
         tb.writeFieldName(_typePropertyName);
         tb.writeString(typeId);
+        // Copy current object content of p into tb
+        p.skipChildren(); // skip current START_OBJECT content to ensure proper parsing order
         p = JsonParserSequence.createFlattened(tb.asParser(p), p);
         p.nextToken();
     }
-    
+
     Object value = deser.deserialize(p, ctxt);
     // And then need the closing END_OBJECT
     if (p.nextToken() != JsonToken.END_OBJECT) {
@@ -40,3 +42,4 @@
     }
     return value;
 }
+
