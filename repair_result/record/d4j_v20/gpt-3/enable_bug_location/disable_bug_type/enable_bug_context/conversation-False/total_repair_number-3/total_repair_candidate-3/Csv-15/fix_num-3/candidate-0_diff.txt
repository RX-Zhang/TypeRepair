--- 
+++ 
@@ -6,7 +6,13 @@
     final int end = offset + len;
 
     final char delimChar = getDelimiter();
-    final char quoteChar = getQuoteCharacter().charValue();
+    final Character quoteCharObj = getQuoteCharacter();
+    if (quoteCharObj == null) {
+        // If no quote char is defined, fall back to no quoting and escaping
+        printAndEscape(value, offset, len, out);
+        return;
+    }
+    final char quoteChar = quoteCharObj.charValue();
 
     QuoteMode quoteModePolicy = getQuoteMode();
     if (quoteModePolicy == null) {
@@ -36,12 +42,13 @@
         } else {
             char c = value.charAt(pos);
 
-            if (newRecord && (c < 0x20 || c > 0x21 && c < 0x23 || c > 0x2B && c < 0x2D || c > 0x7E)) {
+            // Acceptable characters without quoting at start are alphanumeric and a few symbols.
+            // We now fix the previous incorrect condition and replace it with a correct one that
+            // correctly handles the Euro character and other non-ASCII characters:
+            if (newRecord && (c == COMMENT || c == quoteChar || c == delimChar || c == LF || c == CR)) {
                 quote = true;
             } else if (c <= COMMENT) {
-                // Some other chars at the start of a value caused the parser to fail, so for now
-                // encapsulate if we start in anything less than '#'. We are being conservative
-                // by including the default comment char too.
+                // encapsulate if we start in anything less than '#'.
                 quote = true;
             } else {
                 while (pos < end) {
@@ -56,8 +63,7 @@
                 if (!quote) {
                     pos = end - 1;
                     c = value.charAt(pos);
-                    // Some other chars at the end caused the parser to fail, so for now
-                    // encapsulate if we end in anything less than ' '
+                    // encapsulate if we end with space or control characters
                     if (c <= SP) {
                         quote = true;
                     }
@@ -89,18 +95,20 @@
     while (pos < end) {
         final char c = value.charAt(pos);
         if (c == quoteChar) {
-            // write out the chunk up until this point
-
-            // add 1 to the length to write out the encapsulator also
-            out.append(value, start, pos + 1);
-            // put the next starting position on the encapsulator so we will
-            // write it out again with the next string (effectively doubling it)
-            start = pos;
+            // write out the chunk up until this point (excluding this quote char)
+            out.append(value, start, pos);
+            // write doubled quote character for escaping
+            out.append(quoteChar);
+            out.append(quoteChar);
+            start = pos + 1;
         }
         pos++;
     }
 
     // write the last segment
-    out.append(value, start, pos);
+    if (start < end) {
+        out.append(value, start, end);
+    }
     out.append(quoteChar);
 }
+
