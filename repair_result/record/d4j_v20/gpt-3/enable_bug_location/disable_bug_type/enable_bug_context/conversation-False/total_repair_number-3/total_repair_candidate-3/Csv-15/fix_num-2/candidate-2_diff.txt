--- 
+++ 
@@ -6,7 +6,13 @@
     final int end = offset + len;
 
     final char delimChar = getDelimiter();
-    final char quoteChar = getQuoteCharacter().charValue();
+    final Character qc = getQuoteCharacter();
+    if (qc == null) {
+        // If no quote character, fallback to printing escaped value
+        printAndEscape(value, offset, len, out);
+        return;
+    }
+    final char quoteChar = qc.charValue();
 
     QuoteMode quoteModePolicy = getQuoteMode();
     if (quoteModePolicy == null) {
@@ -36,7 +42,7 @@
         } else {
             char c = value.charAt(pos);
 
-            if (newRecord && (c < 0x20 || c > 0x21 && c < 0x23 || c > 0x2B && c < 0x2D || c > 0x7E)) {
+            if (newRecord && (c < 0x20 || (c > 0x21 && c < 0x23) || (c > 0x2B && c < 0x2D) || c > 0x7E)) {
                 quote = true;
             } else if (c <= COMMENT) {
                 // Some other chars at the start of a value caused the parser to fail, so for now
@@ -54,8 +60,7 @@
                 }
 
                 if (!quote) {
-                    pos = end - 1;
-                    c = value.charAt(pos);
+                    c = value.charAt(end - 1);
                     // Some other chars at the end caused the parser to fail, so for now
                     // encapsulate if we end in anything less than ' '
                     if (c <= SP) {
@@ -84,14 +89,12 @@
     // we hit something that needed encapsulation
     out.append(quoteChar);
 
-    // Pick up where we left off: pos should be positioned on the first character that caused
-    // the need for encapsulation.
+    // Reset pos to offset to ensure scanning from beginning
+    pos = offset;
     while (pos < end) {
         final char c = value.charAt(pos);
         if (c == quoteChar) {
             // write out the chunk up until this point
-
-            // add 1 to the length to write out the encapsulator also
             out.append(value, start, pos + 1);
             // put the next starting position on the encapsulator so we will
             // write it out again with the next string (effectively doubling it)
@@ -104,3 +107,4 @@
     out.append(value, start, pos);
     out.append(quoteChar);
 }
+
