--- 
+++ 
@@ -22,7 +22,8 @@
             try {
                 // 11-Oct-2015, tatu: For deser, we call `TypeFactory.constructSpecializedType()`,
                 //   may be needed here too in future?
-                    type = tf.constructGeneralizedType(type, serClass);
+                // FIX: use constructSpecializedType instead of constructGeneralizedType
+                type = tf.constructSpecializedType(type, serClass);
             } catch (IllegalArgumentException iae) {
                 throw new JsonMappingException(null,
                         String.format("Failed to widen type %s with annotation (value %s), from '%s': %s",
@@ -46,10 +47,10 @@
                     // 19-May-2016, tatu: As per [databind#1231], [databind#1178] may need to actually
                     //   specialize (narrow) type sometimes, even if more commonly opposite
                     //   is needed.
-                    if (keyClass.isAssignableFrom(currRaw)) { // common case
+                    if (currRaw.isAssignableFrom(keyClass)) { // specialization, ok as well
+                        keyType = tf.constructSpecializedType(keyType, keyClass);
+                    } else if (keyClass.isAssignableFrom(currRaw)) { // common case generalized type
                         keyType = tf.constructGeneralizedType(keyType, keyClass);
-                    } else if (currRaw.isAssignableFrom(keyClass)) { // specialization, ok as well
-                        keyType = tf.constructSpecializedType(keyType, keyClass);
                     } else {
                         throw new JsonMappingException(null,
                                 String.format("Can not refine serialization key type %s into %s; types not related",
@@ -79,10 +80,10 @@
                //   is needed.
                Class<?> currRaw = contentType.getRawClass();
                try {
-                   if (contentClass.isAssignableFrom(currRaw)) { // common case
+                   if (currRaw.isAssignableFrom(contentClass)) { // specialization, ok as well
+                       contentType = tf.constructSpecializedType(contentType, contentClass);
+                   } else if (contentClass.isAssignableFrom(currRaw)) { // common case generalized
                        contentType = tf.constructGeneralizedType(contentType, contentClass);
-                   } else if (currRaw.isAssignableFrom(contentClass)) { // specialization, ok as well
-                       contentType = tf.constructSpecializedType(contentType, contentClass);
                    } else {
                        throw new JsonMappingException(null,
                                String.format("Can not refine serialization content type %s into %s; types not related",
@@ -100,3 +101,4 @@
     }
     return type;
 }
+
