--- 
+++ 
@@ -3,10 +3,47 @@
     Document doc = null;
 
     // look for BOM - overrides any other header or input
+    byteData.mark();
+    if (byteData.remaining() >= 4) {
+        int p0 = byteData.get() & 0xFF;
+        int p1 = byteData.get() & 0xFF;
+        int p2 = byteData.get() & 0xFF;
+        int p3 = byteData.get() & 0xFF;
+
+        // UTF-32BE BOM 00 00 FE FF
+        if (p0 == 0x00 && p1 == 0x00 && p2 == 0xFE && p3 == 0xFF) {
+            charsetName = "UTF-32BE";
+            byteData.position(4);
+        }
+        // UTF-32LE BOM FF FE 00 00
+        else if (p0 == 0xFF && p1 == 0xFE && p2 == 0x00 && p3 == 0x00) {
+            charsetName = "UTF-32LE";
+            byteData.position(4);
+        }
+        // UTF-8 BOM EF BB BF
+        else if (p0 == 0xEF && p1 == 0xBB && p2 == 0xBF) {
+            charsetName = "UTF-8";
+            byteData.position(3);
+        }
+        // UTF-16BE BOM FE FF
+        else if (p0 == 0xFE && p1 == 0xFF) {
+            charsetName = "UTF-16BE";
+            byteData.position(2);
+        }
+        // UTF-16LE BOM FF FE
+        else if (p0 == 0xFF && p1 == 0xFE) {
+            charsetName = "UTF-16LE";
+            byteData.position(2);
+        } else {
+            byteData.reset();
+        }
+    } else {
+        byteData.reset();
+    }
 
     if (charsetName == null) { // determine from meta. safe parse as UTF-8
         // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
-        docData = Charset.forName(defaultCharset).decode(byteData).toString();
+        docData = Charset.forName(defaultCharset).decode(byteData.asReadOnlyBuffer()).toString();
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
         if (meta != null) { // if not found, will keep utf-8 as best attempt
@@ -24,7 +61,7 @@
                 }
             }
 
-            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equalsIgnoreCase(defaultCharset)) { // need to re-decode
                 foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                 charsetName = foundCharset;
                 byteData.rewind();
@@ -34,18 +71,25 @@
         }
     } else { // specified by content type header (or by user on file load)
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
-        docData = Charset.forName(charsetName).decode(byteData).toString();
+        docData = Charset.forName(charsetName).decode(byteData.asReadOnlyBuffer()).toString();
     }
+
     if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-        byteData.rewind();
-        docData = Charset.forName(defaultCharset).decode(byteData).toString();
         docData = docData.substring(1);
-        charsetName = defaultCharset;
+        if (charsetName == null) {
+            charsetName = defaultCharset;
+        }
         doc = null;
     }
+
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
-        doc.outputSettings().charset(charsetName);
+        if (charsetName != null) {
+            doc.outputSettings().charset(charsetName);
+        } else {
+            doc.outputSettings().charset(defaultCharset);
+        }
     }
     return doc;
 }
+
