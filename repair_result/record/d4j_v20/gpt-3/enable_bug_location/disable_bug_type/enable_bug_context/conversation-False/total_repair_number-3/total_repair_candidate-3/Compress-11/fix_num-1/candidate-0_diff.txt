--- 
+++ 
@@ -23,7 +23,6 @@
             return new CpioArchiveInputStream(in);
         }
 
-        // Dump needs a bigger buffer to check the signature;
         final byte[] dumpsig = new byte[32];
         in.mark(dumpsig.length);
         signatureLength = in.read(dumpsig);
@@ -32,7 +31,6 @@
             return new DumpArchiveInputStream(in);
         }
 
-        // Tar needs an even bigger buffer to check the signature; read the first block
         final byte[] tarheader = new byte[512];
         in.mark(tarheader.length);
         signatureLength = in.read(tarheader);
@@ -40,15 +38,14 @@
         if (TarArchiveInputStream.matches(tarheader, signatureLength)) {
             return new TarArchiveInputStream(in);
         }
-        // COMPRESS-117 - improve auto-recognition
+
         try {
             TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader));
-            tais.getNextEntry();
-            return new TarArchiveInputStream(in);
+            if (tais.getNextEntry() != null) {
+                return new TarArchiveInputStream(in);
+            }
         } catch (Exception e) { // NOPMD
-            // can generate IllegalArgumentException as well as IOException
-            // autodetection, simply not a TAR
-            // ignored
+            // ignored, not a TAR archive
         }
     } catch (IOException e) {
         throw new ArchiveException("Could not use reset and mark operations.", e);
@@ -56,3 +53,4 @@
 
     throw new ArchiveException("No Archiver found for the stream signature");
 }
+
