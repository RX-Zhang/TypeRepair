--- 
+++ 
@@ -3,6 +3,28 @@
     Document doc = null;
 
     // look for BOM - overrides any other header or input
+    // Handle BOM first before anything else
+    byteData.mark();
+    if (byteData.remaining() >= 4) {
+        int b1 = byteData.get() & 0xff;
+        int b2 = byteData.get() & 0xff;
+        int b3 = byteData.get() & 0xff;
+        int b4 = byteData.get() & 0xff;
+
+        // Check for BOMs
+        if ((b1 == 0x00 && b2 == 0x00 && b3 == 0xFE && b4 == 0xFF)) {
+            charsetName = "UTF-32BE";
+        } else if ((b1 == 0xFF && b2 == 0xFE && b3 == 0x00 && b4 == 0x00)) {
+            charsetName = "UTF-32LE";
+        } else if ((b1 == 0xFE && b2 == 0xFF)) {
+            charsetName = "UTF-16BE";
+        } else if ((b1 == 0xFF && b2 == 0xFE)) {
+            charsetName = "UTF-16LE";
+        } else if (b1 == 0xEF && b2 == 0xBB && b3 == 0xBF) {
+            charsetName = "UTF-8";
+        }
+    }
+    byteData.reset();
 
     if (charsetName == null) { // determine from meta. safe parse as UTF-8
         // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
@@ -24,7 +46,7 @@
                 }
             }
 
-            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equalsIgnoreCase(defaultCharset)) { // need to re-decode
                 foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                 charsetName = foundCharset;
                 byteData.rewind();
@@ -36,16 +58,16 @@
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
         docData = Charset.forName(charsetName).decode(byteData).toString();
     }
+
+    // Strip BOM if present at the start of docData (only if UTF-8)
     if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-        byteData.rewind();
-        docData = Charset.forName(defaultCharset).decode(byteData).toString();
         docData = docData.substring(1);
-        charsetName = defaultCharset;
-        doc = null;
     }
+
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
-        doc.outputSettings().charset(charsetName);
+        doc.outputSettings().charset(charsetName != null ? charsetName : defaultCharset);
     }
     return doc;
 }
+
