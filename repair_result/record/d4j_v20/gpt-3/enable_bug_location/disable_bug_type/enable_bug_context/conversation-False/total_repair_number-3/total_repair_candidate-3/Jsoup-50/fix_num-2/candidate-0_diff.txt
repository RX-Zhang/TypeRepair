--- 
+++ 
@@ -3,10 +3,44 @@
     Document doc = null;
 
     // look for BOM - overrides any other header or input
+    byteData.mark();
+    if (byteData.remaining() >= 4) {
+        int first = byteData.get() & 0xFF;
+        int second = byteData.get() & 0xFF;
+        int third = byteData.get() & 0xFF;
+        int fourth = byteData.get() & 0xFF;
+        byteData.reset();
+
+        // UTF-8 BOM: EF BB BF
+        if (first == 0xEF && second == 0xBB && third == 0xBF) {
+            byteData.position(byteData.position() + 3);
+            charsetName = "UTF-8";
+        }
+        // UTF-16BE BOM: FE FF
+        else if (first == 0xFE && second == 0xFF) {
+            byteData.position(byteData.position() + 2);
+            charsetName = "UTF-16BE";
+        }
+        // UTF-16LE BOM: FF FE
+        else if (first == 0xFF && second == 0xFE) {
+            byteData.position(byteData.position() + 2);
+            charsetName = "UTF-16LE";
+        }
+        // UTF-32BE BOM: 00 00 FE FF
+        else if (first == 0x00 && second == 0x00 && third == 0xFE && fourth == 0xFF) {
+            byteData.position(byteData.position() + 4);
+            charsetName = "UTF-32BE";
+        }
+        // UTF-32LE BOM: FF FE 00 00
+        else if (first == 0xFF && second == 0xFE && third == 0x00 && fourth == 0x00) {
+            byteData.position(byteData.position() + 4);
+            charsetName = "UTF-32LE";
+        }
+    }
 
     if (charsetName == null) { // determine from meta. safe parse as UTF-8
-        // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
-        docData = Charset.forName(defaultCharset).decode(byteData).toString();
+        charsetName = defaultCharset;
+        docData = Charset.forName(charsetName).decode(byteData).toString();
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
         if (meta != null) { // if not found, will keep utf-8 as best attempt
@@ -24,7 +58,7 @@
                 }
             }
 
-            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equalsIgnoreCase(charsetName)) { // need to re-decode
                 foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                 charsetName = foundCharset;
                 byteData.rewind();
@@ -34,18 +68,20 @@
         }
     } else { // specified by content type header (or by user on file load)
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
+        byteData.rewind();
         docData = Charset.forName(charsetName).decode(byteData).toString();
     }
+
     if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-        byteData.rewind();
-        docData = Charset.forName(defaultCharset).decode(byteData).toString();
         docData = docData.substring(1);
-        charsetName = defaultCharset;
-        doc = null;
     }
+
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
-        doc.outputSettings().charset(charsetName);
+        if (charsetName != null) {
+            doc.outputSettings().charset(charsetName);
+        }
     }
     return doc;
 }
+
