--- 
+++ 
@@ -12,7 +12,11 @@
     in.mark(signature.length);
     try {
         int signatureLength = in.read(signature);
+        if (signatureLength == -1) {
+            throw new ArchiveException("No Archiver found for the stream signature");
+        }
         in.reset();
+
         if (ZipArchiveInputStream.matches(signature, signatureLength)) {
             return new ZipArchiveInputStream(in);
         } else if (JarArchiveInputStream.matches(signature, signatureLength)) {
@@ -27,7 +31,11 @@
         final byte[] dumpsig = new byte[32];
         in.mark(dumpsig.length);
         signatureLength = in.read(dumpsig);
+        if (signatureLength == -1) {
+            throw new ArchiveException("No Archiver found for the stream signature");
+        }
         in.reset();
+
         if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) {
             return new DumpArchiveInputStream(in);
         }
@@ -36,15 +44,20 @@
         final byte[] tarheader = new byte[512];
         in.mark(tarheader.length);
         signatureLength = in.read(tarheader);
+        if (signatureLength == -1) {
+            throw new ArchiveException("No Archiver found for the stream signature");
+        }
         in.reset();
+
         if (TarArchiveInputStream.matches(tarheader, signatureLength)) {
             return new TarArchiveInputStream(in);
         }
         // COMPRESS-117 - improve auto-recognition
         try {
             TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader));
-            tais.getNextEntry();
-            return new TarArchiveInputStream(in);
+            if (tais.getNextEntry() != null) {
+                return new TarArchiveInputStream(in);
+            }
         } catch (Exception e) { // NOPMD
             // can generate IllegalArgumentException as well as IOException
             // autodetection, simply not a TAR
@@ -56,3 +69,4 @@
 
     throw new ArchiveException("No Archiver found for the stream signature");
 }
+
