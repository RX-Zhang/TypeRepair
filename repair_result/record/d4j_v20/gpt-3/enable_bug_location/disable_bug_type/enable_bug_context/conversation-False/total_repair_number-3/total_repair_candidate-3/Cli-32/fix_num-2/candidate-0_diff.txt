--- 
+++ 
@@ -1,25 +1,29 @@
 protected int findWrapPos(String text, int width, int startPos)
 {
     int pos;
-    
+
     // the line ends before the max wrap pos or a new line char found
-    if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
-            || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
+    int nl = text.indexOf('\n', startPos);
+    int tab = text.indexOf('\t', startPos);
+    int maxPos = startPos + width;
+
+ if ((nl != -1 && nl <= maxPos) || (tab != -1 && tab <= maxPos))
     {
+        pos = (nl != -1 && nl <= maxPos) ? nl : tab;
         return pos + 1;
     }
-    else if (startPos + width >= text.length())
+    else if (maxPos >= text.length())
     {
         return -1;
     }
 
 
     // look for the last whitespace character before startPos+width
-    pos = startPos + width;
+    pos = maxPos;
 
     char c;
 
-    while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
+    while ((pos > startPos) && ((c = text.charAt(pos)) != ' ')
             && (c != '\n') && (c != '\r'))
     {
         --pos;
@@ -30,13 +34,19 @@
     {
         return pos;
     }
-    
-    // if we didn't find one, simply chop at startPos+width
-    pos = startPos + width;
-    while ((pos <= text.length()) && ((c = text.charAt(pos)) != ' ')
+
+    // if no whitespace found going backward, cut at width if possible,
+    // or advance forward to next whitespace or end of string
+    pos = maxPos;
+
+    int length = text.length();
+
+    while ((pos < length) && ((c = text.charAt(pos)) != ' ')
            && (c != '\n') && (c != '\r'))
     {
         ++pos;
-    }        
-    return pos == text.length() ? -1 : pos;
+    }
+
+    return pos == length ? -1 : pos;
 }
+
