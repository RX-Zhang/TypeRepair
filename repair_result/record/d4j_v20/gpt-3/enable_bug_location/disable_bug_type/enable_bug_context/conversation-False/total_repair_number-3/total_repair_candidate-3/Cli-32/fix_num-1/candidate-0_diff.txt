--- 
+++ 
@@ -2,9 +2,12 @@
 {
     int pos;
     
-    // the line ends before the max wrap pos or a new line char found
-    if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
-            || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
+    // the line ends before the max wrap pos or a new line char or tab found
+    if ((pos = text.indexOf('\n', startPos)) != -1 && pos - startPos <= width)
+    {
+        return pos + 1;
+    }
+    if ((pos = text.indexOf('\t', startPos)) != -1 && pos - startPos <= width)
     {
         return pos + 1;
     }
@@ -13,16 +16,19 @@
         return -1;
     }
 
-
     // look for the last whitespace character before startPos+width
     pos = startPos + width;
 
     char c;
 
-    while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
-            && (c != '\n') && (c != '\r'))
+    while (pos > startPos)
     {
-        --pos;
+        c = text.charAt(pos);
+        if (c == ' ' || c == '\n' || c == '\r')
+        {
+            break;
+        }
+        pos--;
     }
 
     // if we found it - just return
@@ -33,10 +39,16 @@
     
     // if we didn't find one, simply chop at startPos+width
     pos = startPos + width;
-    while ((pos <= text.length()) && ((c = text.charAt(pos)) != ' ')
-           && (c != '\n') && (c != '\r'))
+    int textLength = text.length();
+    while (pos < textLength)
     {
-        ++pos;
+        c = text.charAt(pos);
+        if (c == ' ' || c == '\n' || c == '\r')
+        {
+            break;
+        }
+        pos++;
     }        
-    return pos == text.length() ? -1 : pos;
+    return pos == textLength ? -1 : pos;
 }
+
