--- 
+++ 
@@ -7,24 +7,22 @@
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
         if (meta != null) { // if not found, will keep utf-8 as best attempt
-            String foundCharset;
+            String foundCharset = null; // Initialize foundCharset to null
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
                 if (foundCharset == null && meta.hasAttr("charset")) {
-                    try {
-                        if (Charset.isSupported(meta.attr("charset"))) {
-                            foundCharset = meta.attr("charset");
-                        }
-                    } catch (IllegalCharsetNameException e) {
-                        foundCharset = null;
+                    foundCharset = meta.attr("charset").trim().replaceAll("[\"']", ""); // Clean charset
+                    if (Charset.isSupported(foundCharset)) {
+                        // No need for try-catch here, we already validated charset
+                    } else {
+                        foundCharset = null; // Reset if not supported
                     }
                 }
             } else {
-                foundCharset = meta.attr("charset");
+                foundCharset = meta.attr("charset").trim().replaceAll("[\"']", ""); // Clean charset
             }
 
-            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
-                foundCharset = foundCharset.trim().replaceAll("[\"']", "");
+            if (foundCharset != null && !foundCharset.equals(defaultCharset)) { // need to re-decode
                 charsetName = foundCharset;
                 byteData.rewind();
                 docData = Charset.forName(foundCharset).decode(byteData).toString();
@@ -48,3 +46,4 @@
     }
     return doc;
 }
+
