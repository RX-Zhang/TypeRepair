--- 
+++ 
@@ -1,42 +1,52 @@
 protected int findWrapPos(String text, int width, int startPos)
 {
     int pos;
-    
+
     // the line ends before the max wrap pos or a new line char found
-    if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
-            || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
+    int nextLinePos = text.indexOf('\n', startPos);
+    if (nextLinePos != -1 && nextLinePos <= startPos + width)
     {
-        return pos + 1;
+        return nextLinePos + 1;
+    }
+    int nextTabPos = text.indexOf('\t', startPos);
+    if (nextTabPos != -1 && nextTabPos <= startPos + width)
+    {
+        return nextTabPos + 1;
     }
     else if (startPos + width >= text.length())
     {
         return -1;
     }
 
-
     // look for the last whitespace character before startPos+width
     pos = startPos + width;
 
     char c;
 
-    while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
-            && (c != '\n') && (c != '\r'))
+    while (pos > startPos)
     {
-        --pos;
+        c = text.charAt(pos);
+        if (c == ' ' || c == '\n' || c == '\r')
+        {
+            return pos;
+        }
+        pos--;
     }
 
-    // if we found it - just return
-    if (pos > startPos)
-    {
-        return pos;
-    }
-    
     // if we didn't find one, simply chop at startPos+width
     pos = startPos + width;
-    while ((pos <= text.length()) && ((c = text.charAt(pos)) != ' ')
-           && (c != '\n') && (c != '\r'))
+    int textLength = text.length();
+
+    while (pos < textLength)
     {
-        ++pos;
-    }        
-    return pos == text.length() ? -1 : pos;
+        c = text.charAt(pos);
+        if (c == ' ' || c == '\n' || c == '\r')
+        {
+            return pos;
+        }
+        pos++;
+    }
+
+    return -1;
 }
+
