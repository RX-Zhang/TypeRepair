--- 
+++ 
@@ -16,32 +16,42 @@
 
     // 08-Jun-2017, tatu: With [databind#1648], this gets bit tricky..
     // First: custom pattern will override things
-            if ((shape == JsonFormat.Shape.STRING) || format.hasPattern()
-                            || format.hasLocale() || format.hasTimeZone()) {
-                TimeZone tz = format.getTimeZone();
-                final String pattern = format.hasPattern()
-                                ? format.getPattern()
-                                : StdDateFormat.DATE_FORMAT_STR_ISO8601;
+    if ((shape == JsonFormat.Shape.STRING) || format.hasPattern()
+                    || format.hasLocale() || format.hasTimeZone()) {
+        TimeZone tz = format.getTimeZone();
+        final String pattern = format.hasPattern()
+                        ? format.getPattern()
+                        : StdDateFormat.DATE_FORMAT_STR_ISO8601;
         final Locale loc = format.hasLocale()
                         ? format.getLocale()
                         : serializers.getLocale();
-                SimpleDateFormat df = new SimpleDateFormat(pattern, loc);
-                if (tz == null) {
-                    tz = serializers.getTimeZone();
-                }
+        SimpleDateFormat df = new SimpleDateFormat(pattern, loc);
+
+        if (tz == null) {
+            tz = serializers.getTimeZone();
+        }
         df.setTimeZone(tz);
         return withFormat(Boolean.FALSE, df);
     }
 
     // Otherwise, need one of these changes:
 
-
     // Jackson's own `StdDateFormat` is quite easy to deal with...
 
     // 08-Jun-2017, tatu: Unfortunately there's no generally usable
-    //    mechanism for changing `DateFormat` instances (or even clone()ing)
-    //    So: require it be `SimpleDateFormat`; can't config other types
-          serializers.reportBadDefinition(handledType(), String.format(
-        // Ugh. No way to change `Locale`, create copy; must re-crete completely:
+    // mechanism for changing `DateFormat` instances (or even clone()ing)
+    // So: require it be `SimpleDateFormat`; can't config other types
+    if (_customFormat != null) {
+        if (_customFormat instanceof SimpleDateFormat) {
+            SimpleDateFormat df = (SimpleDateFormat) _customFormat;
+            SimpleDateFormat newDf = new SimpleDateFormat(df.toPattern(), df.getDateFormatSymbols());
+            newDf.setTimeZone(df.getTimeZone());
+            return withFormat(Boolean.FALSE, newDf);
+        }
+        // For non-SimpleDateFormat we cannot modify, just use existing format
+        return withFormat(Boolean.FALSE, _customFormat);
+    }
+
     return this;
 }
+
