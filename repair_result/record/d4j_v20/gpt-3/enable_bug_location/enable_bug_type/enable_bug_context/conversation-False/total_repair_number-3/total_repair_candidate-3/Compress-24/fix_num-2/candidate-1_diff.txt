--- 
+++ 
@@ -1,19 +1,22 @@
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
-    long    result = 0;
-    int     end = offset + length;
-    int     start = offset;
+    if (buffer == null) {
+        throw new IllegalArgumentException("Buffer cannot be null");
+    }
+    if (offset < 0 || length < 2 || offset + length > buffer.length) {
+        throw new IllegalArgumentException("Invalid offset or length");
+    }
 
-    if (length < 2){
-        throw new IllegalArgumentException("Length "+length+" must be at least 2");
-    }
+    long result = 0;
+    int end = offset + length;
+    int start = offset;
 
     if (buffer[start] == 0) {
         return 0L;
     }
 
     // Skip leading spaces
-    while (start < end){
-        if (buffer[start] == ' '){
+    while (start < end) {
+        if (buffer[start] == ' ') {
             start++;
         } else {
             break;
@@ -21,15 +24,12 @@
     }
 
     // Trim all trailing NULs and spaces.
-    // The ustar and POSIX tar specs require a trailing NUL or
-    // space but some implementations use the extra digit for big
-    // sizes/uids/gids ...
     byte trailer = buffer[end - 1];
-    if (trailer == 0 || trailer == ' '){
+    if (trailer == 0 || trailer == ' ') {
         end--;
     } else {
         throw new IllegalArgumentException(
-                exceptionMessage(buffer, offset, length, end-1, trailer));
+                exceptionMessage(buffer, offset, length, end - 1, trailer));
     }
     trailer = buffer[end - 1];
     while (start < end - 1 && (trailer == 0 || trailer == ' ')) {
@@ -37,10 +37,10 @@
         trailer = buffer[end - 1];
     }
 
-    for ( ;start < end; start++) {
+    for (; start < end; start++) {
         final byte currentByte = buffer[start];
         // CheckStyle:MagicNumber OFF
-        if (currentByte < '0' || currentByte > '7'){
+        if (currentByte < '0' || currentByte > '7') {
             throw new IllegalArgumentException(
                     exceptionMessage(buffer, offset, length, start, currentByte));
         }
@@ -50,3 +50,4 @@
 
     return result;
 }
+
