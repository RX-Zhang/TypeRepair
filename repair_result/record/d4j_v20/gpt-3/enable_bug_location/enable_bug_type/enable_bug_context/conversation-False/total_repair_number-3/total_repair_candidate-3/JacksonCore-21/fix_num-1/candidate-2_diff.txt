--- 
+++ 
@@ -9,16 +9,16 @@
     // If all the conditions matches then check for scalar / non-scalar property
     if (!_allowMultipleMatches && (_currToken != null) && (_exposedContext == null)) {
         //if not scalar and ended successfully, and !includePath, then return null
-            if (_currToken.isStructEnd()) {
-                if (_headContext.isStartHandled()) {
-                    return (_currToken = null);
-                }
-            } else if (_currToken.isScalarValue()) {
-                //else if scalar, and scalar not present in obj/array and !includePath and INCLUDE_ALL matched once
-                // then return null 
-                if (!_headContext.isStartHandled() && (_itemFilter == TokenFilter.INCLUDE_ALL)) {
-                    return (_currToken = null);
-                }
+        if (_currToken.isStructEnd()) {
+            if (_headContext.isStartHandled()) {
+                return (_currToken = null);
+            }
+        } else if (_currToken.isScalarValue()) {
+            //else if scalar, and scalar not present in obj/array and !includePath and INCLUDE_ALL matched once
+            // then return null 
+            if (!_headContext.isStartHandled() && (_itemFilter == TokenFilter.INCLUDE_ALL)) {
+                return (_currToken = null);
+            }
         }
     }
     // Anything buffered?
@@ -36,21 +36,11 @@
                 _exposedContext = null;
                 if (ctxt.inArray()) {
                     t = delegate.getCurrentToken();
-s this guaranteed to work without further checks?
-                      if (t != JsonToken.START_ARRAY) {
-                    _currToken = t;
-                    return t;
-                }
-
-                // Almost! Most likely still have the current token;
-                // with the sole exception of 
-                /*
-                t = delegate.getCurrentToken();
-                if (t != JsonToken.FIELD_NAME) {
-                    _currToken = t;
-                    return t;
-                }
-                */
+                    if (t != JsonToken.START_ARRAY) {
+                        _currToken = t;
+                        return t;
+                    }
+                }
                 break;
             }
             // If not, traverse down the context chain
@@ -74,129 +64,33 @@
     TokenFilter f;
     
     switch (t.id()) {
-    case ID_START_ARRAY:
-        f = _itemFilter;
-        if (f == TokenFilter.INCLUDE_ALL) {
-            _headContext = _headContext.createChildArrayContext(f, true);
-            return (_currToken = t);
-        }
-        if (f == null) { // does this occur?
-            delegate.skipChildren();
-            break;
-        }
-        // Otherwise still iffy, need to check
-        f = _headContext.checkValue(f);
-        if (f == null) {
-            delegate.skipChildren();
-            break;
-        }
-        if (f != TokenFilter.INCLUDE_ALL) {
-            f = f.filterStartArray();
-        }
-        _itemFilter = f;
-        if (f == TokenFilter.INCLUDE_ALL) {
-            _headContext = _headContext.createChildArrayContext(f, true);
-            return (_currToken = t);
-        }
-        _headContext = _headContext.createChildArrayContext(f, false);
-        
-        // Also: only need buffering if parent path to be included
-        if (_includePath) {
-            t = _nextTokenWithBuffering(_headContext);
-            if (t != null) {
-                _currToken = t;
-                return t;
-            }
-        }
-        break;
-
-    case ID_START_OBJECT:
-        f = _itemFilter;
-        if (f == TokenFilter.INCLUDE_ALL) {
-            _headContext = _headContext.createChildObjectContext(f, true);
-            return (_currToken = t);
-        }
-        if (f == null) { // does this occur?
-            delegate.skipChildren();
-            break;
-        }
-        // Otherwise still iffy, need to check
-        f = _headContext.checkValue(f);
-        if (f == null) {
-            delegate.skipChildren();
-            break;
-        }
-        if (f != TokenFilter.INCLUDE_ALL) {
-            f = f.filterStartObject();
-        }
-        _itemFilter = f;
-        if (f == TokenFilter.INCLUDE_ALL) {
-            _headContext = _headContext.createChildObjectContext(f, true);
-            return (_currToken = t);
-        }
-        _headContext = _headContext.createChildObjectContext(f, false);
-        // Also: only need buffering if parent path to be included
-        if (_includePath) {
-            t = _nextTokenWithBuffering(_headContext);
-            if (t != null) {
-                _currToken = t;
-                return t;
-            }
-        }
-        // note: inclusion of surrounding Object handled separately via
-        // FIELD_NAME
-        break;
-
-    case ID_END_ARRAY:
-    case ID_END_OBJECT:
-        {
-            boolean returnEnd = _headContext.isStartHandled();
-            f = _headContext.getFilter();
-            if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {
-                f.filterFinishArray();
-            }
-            _headContext = _headContext.getParent();
-            _itemFilter = _headContext.getFilter();
-            if (returnEnd) {
-                return (_currToken = t);
-            }
-        }
-        break;
-
-    case ID_FIELD_NAME:
-        {
-            final String name = delegate.getCurrentName();
-            // note: this will also set 'needToHandleName'
-            f = _headContext.setFieldName(name);
-            if (f == TokenFilter.INCLUDE_ALL) {
-                _itemFilter = f;
-                if (!_includePath) {
-                    // Minor twist here: if parent NOT included, may need to induce output of
-                    // surrounding START_OBJECT/END_OBJECT
-                    if (_includeImmediateParent && !_headContext.isStartHandled()) {
-                        t = _headContext.nextTokenToRead(); // returns START_OBJECT but also marks it handled
-                        _exposedContext = _headContext;
-                    }
-                }
-                return (_currToken = t);
-            }
+        case ID_START_ARRAY:
+            f = _itemFilter;
+            if (f == TokenFilter.INCLUDE_ALL) {
+                _headContext = _headContext.createChildArrayContext(f, true);
+                return (_currToken = t);
+            }
+            if (f == null) { // does this occur?
+                delegate.skipChildren();
+                break;
+            }
+            // Otherwise still iffy, need to check
+            f = _headContext.checkValue(f);
             if (f == null) {
-                delegate.nextToken();
-                delegate.skipChildren();
-                break;
-            }
-            f = f.includeProperty(name);
-            if (f == null) {
-                delegate.nextToken();
-                delegate.skipChildren();
-                break;
+                delegate.skipChildren();
+                break;
+            }
+            if (f != TokenFilter.INCLUDE_ALL) {
+                f = f.filterStartArray();
             }
             _itemFilter = f;
             if (f == TokenFilter.INCLUDE_ALL) {
-                if (_includePath) {
-                    return (_currToken = t);
-                }
-            }
+                _headContext = _headContext.createChildArrayContext(f, true);
+                return (_currToken = t);
+            }
+            _headContext = _headContext.createChildArrayContext(f, false);
+            
+            // Also: only need buffering if parent path to be included
             if (_includePath) {
                 t = _nextTokenWithBuffering(_headContext);
                 if (t != null) {
@@ -205,24 +99,121 @@
                 }
             }
             break;
-        }
-
-    default: // scalar value
-        f = _itemFilter;
-        if (f == TokenFilter.INCLUDE_ALL) {
-            return (_currToken = t);
-        }
-        if (f != null) {
+
+        case ID_START_OBJECT:
+            f = _itemFilter;
+            if (f == TokenFilter.INCLUDE_ALL) {
+                _headContext = _headContext.createChildObjectContext(f, true);
+                return (_currToken = t);
+            }
+            if (f == null) { // does this occur?
+                delegate.skipChildren();
+                break;
+            }
+            // Otherwise still iffy, need to check
             f = _headContext.checkValue(f);
-            if ((f == TokenFilter.INCLUDE_ALL)
-                    || ((f != null) && f.includeValue(delegate))) {
-                return (_currToken = t);
-            }
-        }
-        // Otherwise not included (leaves must be explicitly included)
-        break;
+            if (f == null) {
+                delegate.skipChildren();
+                break;
+            }
+            if (f != TokenFilter.INCLUDE_ALL) {
+                f = f.filterStartObject();
+            }
+            _itemFilter = f;
+            if (f == TokenFilter.INCLUDE_ALL) {
+                _headContext = _headContext.createChildObjectContext(f, true);
+                return (_currToken = t);
+            }
+            _headContext = _headContext.createChildObjectContext(f, false);
+            // Also: only need buffering if parent path to be included
+            if (_includePath) {
+                t = _nextTokenWithBuffering(_headContext);
+                if (t != null) {
+                    _currToken = t;
+                    return t;
+                }
+            }
+            // note: inclusion of surrounding Object handled separately via
+            // FIELD_NAME
+            break;
+
+        case ID_END_ARRAY:
+        case ID_END_OBJECT:
+            {
+                boolean returnEnd = _headContext.isStartHandled();
+                f = _headContext.getFilter();
+                if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {
+                    f.filterFinishArray();
+                }
+                _headContext = _headContext.getParent();
+                _itemFilter = _headContext.getFilter();
+                if (returnEnd) {
+                    return (_currToken = t);
+                }
+            }
+            break;
+
+        case ID_FIELD_NAME:
+            {
+                final String name = delegate.getCurrentName();
+                // note: this will also set 'needToHandleName'
+                f = _headContext.setFieldName(name);
+                if (f == TokenFilter.INCLUDE_ALL) {
+                    _itemFilter = f;
+                    if (!_includePath) {
+                        // Minor twist here: if parent NOT included, may need to induce output of
+                        // surrounding START_OBJECT/END_OBJECT
+                        if (_includeImmediateParent && !_headContext.isStartHandled()) {
+                            t = _headContext.nextTokenToRead(); // returns START_OBJECT but also marks it handled
+                            _exposedContext = _headContext;
+                        }
+                    }
+                    return (_currToken = t);
+                }
+                if (f == null) {
+                    delegate.nextToken();
+                    delegate.skipChildren();
+                    break;
+                }
+                f = f.includeProperty(name);
+                if (f == null) {
+                    delegate.nextToken();
+                    delegate.skipChildren();
+                    break;
+                }
+                _itemFilter = f;
+                if (f == TokenFilter.INCLUDE_ALL) {
+                    if (_includePath) {
+                        return (_currToken = t);
+                    }
+                }
+                if (_includePath) {
+                    t = _nextTokenWithBuffering(_headContext);
+                    if (t != null) {
+                        _currToken = t;
+                        return t;
+                    }
+                }
+                break;
+            }
+
+        default: // scalar value
+            f = _itemFilter;
+            if (f == TokenFilter.INCLUDE_ALL) {
+                return (_currToken = t);
+            }
+            if (f != null) {
+                f = _headContext.checkValue(f);
+                if ((f == TokenFilter.INCLUDE_ALL)
+                        || ((f != null) && f.includeValue(delegate))) {
+                    return (_currToken = t);
+                }
+            }
+            // Otherwise not included (leaves must be explicitly included)
+            break;
     }
 
     // We get here if token was not yet found; offlined handling
     return _nextToken2();
 }
+
