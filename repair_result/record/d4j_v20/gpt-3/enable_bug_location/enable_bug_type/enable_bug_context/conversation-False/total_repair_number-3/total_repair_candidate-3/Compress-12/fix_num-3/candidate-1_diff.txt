--- 
+++ 
@@ -19,42 +19,48 @@
 
     byte[] headerBuf = getRecord();
 
-    if (hasHitEOF) {
+    if (hasHitEOF || headerBuf == null) {
         currEntry = null;
         return null;
     }
 
-    currEntry = new TarArchiveEntry(headerBuf);
+    try {
+        currEntry = new TarArchiveEntry(headerBuf);
+    } catch (IllegalArgumentException e) {
+        throw new IOException("Invalid tar header", e);
+    }
+
     entryOffset = 0;
     entrySize = currEntry.getSize();
 
     if (currEntry.isGNULongNameEntry()) {
         // read in the name
-        StringBuffer longName = new StringBuffer();
+        StringBuilder longName = new StringBuilder();
         byte[] buf = new byte[SMALL_BUFFER_SIZE];
         int length = 0;
         while ((length = read(buf)) >= 0) {
-            longName.append(new String(buf, 0, length));
+            longName.append(new String(buf, 0, length, "UTF-8"));
         }
-        getNextEntry();
-        if (currEntry == null) {
+        TarArchiveEntry nextEntry = getNextTarEntry();
+        if (nextEntry == null) {
             // Bugzilla: 40334
             // Malformed tar file - long entry name not followed by entry
             return null;
         }
-        // remove trailing null terminator
-        if (longName.length() > 0
-            && longName.charAt(longName.length() - 1) == 0) {
-            longName.deleteCharAt(longName.length() - 1);
+        currEntry = nextEntry;
+        // remove trailing null terminator char if present
+        int lnLength = longName.length();
+        if (lnLength > 0 && longName.charAt(lnLength - 1) == '\0') {
+            longName.deleteCharAt(lnLength - 1);
         }
         currEntry.setName(longName.toString());
     }
 
-    if (currEntry.isPaxHeader()){ // Process Pax headers
+    if (currEntry.isPaxHeader()) { // Process Pax headers
         paxHeaders();
     }
 
-    if (currEntry.isGNUSparse()){ // Process sparse files
+    if (currEntry.isGNUSparse()) { // Process sparse files
         readGNUSparse();
     }
 
@@ -65,3 +71,4 @@
     entrySize = currEntry.getSize();
     return currEntry;
 }
+
