--- 
+++ 
@@ -30,8 +30,9 @@
                     t = p.nextToken();
                 }
                 tokens.writeEndObject();
+                // Check if the return type is compatible with the bean type
                 if (bean.getClass() != _beanType.getRawClass()) {
-                    ctxt.reportMappingException("Can not create polymorphic instances with unwrapped values");
+                    ctxt.reportMappingException("Cannot create polymorphic instances with unwrapped values");
                     return null;
                 }
                 return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
@@ -45,7 +46,12 @@
         // regular property? needs buffering
         SettableBeanProperty prop = _beanProperties.find(propName);
         if (prop != null) {
-            buffer.bufferProperty(prop, prop.deserialize(p, ctxt));
+            // Adding input validation to prevent runtime errors for null properties
+            Object value = prop.deserialize(p, ctxt);
+            if (value == null) {
+                ctxt.reportInputMismatch(prop.getType(), "Property '" + propName + "' cannot be null");
+            }
+            buffer.bufferProperty(prop, value);
             continue;
         }
         if (_ignorableProps != null && _ignorableProps.contains(propName)) {
@@ -62,7 +68,6 @@
 
     // We hit END_OBJECT, so:
     Object bean;
-    // !!! 15-Feb-2012, tatu: Need to modify creator to use Builder!
     try {
         bean = creator.build(ctxt, buffer);
     } catch (Exception e) {
@@ -70,3 +75,4 @@
     }
     return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
 }
+
