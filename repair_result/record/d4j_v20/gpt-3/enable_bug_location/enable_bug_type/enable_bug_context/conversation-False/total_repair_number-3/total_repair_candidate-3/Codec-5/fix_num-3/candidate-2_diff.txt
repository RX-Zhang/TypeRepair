--- 
+++ 
@@ -4,11 +4,19 @@
     }
     if (inAvail < 0) {
         eof = true;
+        return; // Added return to prevent processing when inAvail is negative
     }
+    
     for (int i = 0; i < inAvail; i++) {
         if (buffer == null || buffer.length - pos < decodeSize) {
             resizeBuffer();
         }
+        
+        // Check for index out-of-bounds
+        if (inPos >= in.length) {
+            throw new ArrayIndexOutOfBoundsException("Input position exceeds input array length");
+        }
+        
         byte b = in[inPos++];
         if (b == PAD) {
             // We're done.
@@ -34,17 +42,17 @@
     // EOF (-1) and first time '=' character is encountered in stream.
     // This approach makes the '=' padding characters completely optional.
     if (eof && modulus != 0) {
-        
         x = x << 6;
         switch (modulus) {
-            case 2 :
+            case 2:
                 x = x << 6;
                 buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
                 break;
-            case 3 :
+            case 3:
                 buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
                 buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
                 break;
         }
     }
 }
+
