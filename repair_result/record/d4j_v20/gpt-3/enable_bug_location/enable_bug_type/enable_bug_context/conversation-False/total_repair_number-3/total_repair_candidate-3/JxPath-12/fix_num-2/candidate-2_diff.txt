--- 
+++ 
@@ -1,6 +1,9 @@
 public static boolean testNode(Node node, NodeTest test) {
     if (test == null) {
         return true;
+    }
+    if (node == null) {
+        throw new IllegalArgumentException("Node cannot be null");
     }
     if (test instanceof NodeNameTest) {
         if (node.getNodeType() != Node.ELEMENT_NODE) {
@@ -15,9 +18,7 @@
         if (wildcard && testPrefix == null) {
             return true;
         }
-        if (wildcard
-            || testName.getName()
-                    .equals(DOMNodePointer.getLocalName(node))) {
+        if (wildcard || testName.getLocalPart().equals(DOMNodePointer.getLocalName(node))) {
             String nodeNS = DOMNodePointer.getNamespaceURI(node);
             return equalStrings(namespaceURI, nodeNS);
         }
@@ -26,15 +27,13 @@
     if (test instanceof NodeTypeTest) {
         int nodeType = node.getNodeType();
         switch (((NodeTypeTest) test).getNodeType()) {
-            case Compiler.NODE_TYPE_NODE :
-                return nodeType == Node.ELEMENT_NODE
-                        || nodeType == Node.DOCUMENT_NODE;
-            case Compiler.NODE_TYPE_TEXT :
-                return nodeType == Node.CDATA_SECTION_NODE
-                    || nodeType == Node.TEXT_NODE;
-            case Compiler.NODE_TYPE_COMMENT :
+            case Compiler.NODE_TYPE_NODE:
+                return nodeType == Node.ELEMENT_NODE || nodeType == Node.DOCUMENT_NODE;
+            case Compiler.NODE_TYPE_TEXT:
+                return nodeType == Node.CDATA_SECTION_NODE || nodeType == Node.TEXT_NODE;
+            case Compiler.NODE_TYPE_COMMENT:
                 return nodeType == Node.COMMENT_NODE;
-            case Compiler.NODE_TYPE_PI :
+            case Compiler.NODE_TYPE_PI:
                 return nodeType == Node.PROCESSING_INSTRUCTION_NODE;
         }
         return false;
@@ -43,8 +42,9 @@
         if (node.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE) {
             String testPI = ((ProcessingInstructionTest) test).getTarget();
             String nodePI = ((ProcessingInstruction) node).getTarget();
-            return testPI.equals(nodePI);
+            return equalStrings(testPI, nodePI);
         }
     }
     return false;
 }
+
