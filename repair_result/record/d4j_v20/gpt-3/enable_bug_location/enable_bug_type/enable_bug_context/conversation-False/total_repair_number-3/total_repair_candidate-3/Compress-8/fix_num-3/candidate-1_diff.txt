--- 
+++ 
@@ -1,31 +1,36 @@
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
-    long    result = 0;
+    // Input validation
+    if (buffer == null || offset < 0 || length < 2 || offset + length > buffer.length) {
+        throw new IllegalArgumentException("Invalid input: buffer cannot be null, offset must be non-negative, and length must be at least 2.");
+    }
+
+    long result = 0;
     boolean stillPadding = true;
-    int     end = offset + length;
-    int     start = offset;
+    int end = offset + length;
+    int start = offset;
 
-    for (int i = start; i < end; i++){
+    for (int i = start; i < end; i++) {
         final byte currentByte = buffer[i];
         if (currentByte == 0) {
             break;
         }
 
-    // Skip leading spaces
+        // Skip leading spaces
         if (currentByte == (byte) ' ' || currentByte == '0') {
             if (stillPadding) {
-               continue;
-        }
+                continue;
+            }
             if (currentByte == (byte) ' ') {
-            break;
+                break;
             }
         }
 
-    // Must have trailing NUL or space
-    // May have additional NUL or space
+        // Must have trailing NUL or space
+        // May have additional NUL or space
 
         stillPadding = false;
         // CheckStyle:MagicNumber OFF
-        if (currentByte < '0' || currentByte > '7'){
+        if (currentByte < '0' || currentByte > '7') {
             throw new IllegalArgumentException(
                     exceptionMessage(buffer, offset, length, start, currentByte));
         }
@@ -33,5 +38,11 @@
         // CheckStyle:MagicNumber ON
     }
 
+    // Ensure the result ends with a NUL or space
+    if (stillPadding || (end > start && (buffer[end - 1] != 0 && buffer[end - 1] != ' '))) {
+        throw new IllegalArgumentException("Invalid input: must end with NUL or space.");
+    }
+
     return result;
 }
+
