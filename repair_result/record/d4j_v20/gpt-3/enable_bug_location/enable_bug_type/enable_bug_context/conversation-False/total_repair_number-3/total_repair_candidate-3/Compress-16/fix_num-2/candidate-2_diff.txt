--- 
+++ 
@@ -12,6 +12,9 @@
     in.mark(signature.length);
     try {
         int signatureLength = in.read(signature);
+        if (signatureLength == -1) {
+            throw new ArchiveException("Stream is empty or could not read signature.");
+        }
         in.reset();
         if (ZipArchiveInputStream.matches(signature, signatureLength)) {
             return new ZipArchiveInputStream(in);
@@ -27,6 +30,9 @@
         final byte[] dumpsig = new byte[32];
         in.mark(dumpsig.length);
         signatureLength = in.read(dumpsig);
+        if (signatureLength == -1) {
+            throw new ArchiveException("Stream is empty or could not read dump signature.");
+        }
         in.reset();
         if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) {
             return new DumpArchiveInputStream(in);
@@ -36,6 +42,9 @@
         final byte[] tarheader = new byte[512];
         in.mark(tarheader.length);
         signatureLength = in.read(tarheader);
+        if (signatureLength == -1) {
+            throw new ArchiveException("Stream is empty or could not read tar header.");
+        }
         in.reset();
         if (TarArchiveInputStream.matches(tarheader, signatureLength)) {
             return new TarArchiveInputStream(in);
@@ -46,7 +55,7 @@
                 TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader));
                 // COMPRESS-191 - verify the header checksum
                 tais.getNextEntry();
-                    return new TarArchiveInputStream(in);
+                return new TarArchiveInputStream(in);
             } catch (Exception e) { // NOPMD
                 // can generate IllegalArgumentException as well
                 // as IOException
@@ -60,3 +69,4 @@
 
     throw new ArchiveException("No Archiver found for the stream signature");
 }
+
