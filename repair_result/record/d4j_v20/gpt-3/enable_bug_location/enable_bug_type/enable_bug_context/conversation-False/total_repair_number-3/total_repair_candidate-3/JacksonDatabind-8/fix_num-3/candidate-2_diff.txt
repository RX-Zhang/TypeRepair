--- 
+++ 
@@ -11,18 +11,22 @@
             if (!explicit) {
                 return;
             }
-            // both explicit: verify
+            // both explicit: verify conflict
             // otherwise only verify if neither explicitly annotated.
+        } else if (!explicit) {
+            // old not explicit, new not explicit: fine to override
+        } else {
+            // old not explicit, new explicit: allow replacing non-explicit with explicit
+            // continue to next check
         }
 
         // one more thing: ok to override in sub-class
         if (oldOne.getClass() == newOne.getClass()) {
-            // [databind#667]: avoid one particular class of bogus problems
-
-                throw new IllegalArgumentException("Conflicting "+TYPE_DESCS[typeIndex]
-                        +" creators: already had explicitly marked "+oldOne+", encountered "+newOne);
+            // same concrete class: conflicting explicit creators not allowed
+            throw new IllegalArgumentException("Conflicting "+TYPE_DESCS[typeIndex]
+                    +" creators: already had explicitly marked "+oldOne+", encountered "+newOne);
             // otherwise, which one to choose?
-                // new type more generic, use old
+            // new type more generic, use old
             // new type more specific, use it
         }
     }
@@ -31,3 +35,4 @@
     }
     _creators[typeIndex] = _fixAccess(newOne);
 }
+
