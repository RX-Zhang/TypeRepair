--- 
+++ 
@@ -10,7 +10,9 @@
         // [databind#877]: explicitly prevent forced access to `cause` of `Throwable`;
         // never needed and attempts may cause problems on some platforms.
         // !!! NOTE: should be handled better for 2.8 and later
+        if (mutator != null) {
             mutator.fixAccess(ctxt.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS));
+        }
     }
     // note: this works since we know there's exactly one argument for methods
     BeanProperty.Std property = new BeanProperty.Std(propDef.getFullName(),
@@ -30,9 +32,11 @@
     if (mutator instanceof AnnotatedMethod) {
         prop = new MethodProperty(propDef, type, typeDeser,
                 beanDesc.getClassAnnotations(), (AnnotatedMethod) mutator);
-    } else {
+    } else if (mutator instanceof AnnotatedField) {
         prop = new FieldProperty(propDef, type, typeDeser,
                 beanDesc.getClassAnnotations(), (AnnotatedField) mutator);
+    } else {
+        throw ctxt.mappingException("Mutator is neither a method nor a field: " + mutator);
     }
     if (propDeser != null) {
         prop = prop.withValueDeserializer(propDeser);
@@ -48,3 +52,4 @@
     }
     return prop;
 }
+
