--- 
+++ 
@@ -34,42 +34,40 @@
   // So, in this case, g < f, but f !< g
   Node thisParam = parameters.getFirstChild();
   Node thatParam = that.parameters.getFirstChild();
-  while (thisParam != null && thatParam != null) {
-    JSType thisParamType = thisParam.getJSType();
-    JSType thatParamType = thatParam.getJSType();
+  while (thisParam != null || thatParam != null) {
+    boolean thisIsVarArgs = thisParam != null && thisParam.isVarArgs();
+    boolean thatIsVarArgs = thatParam != null && thatParam.isVarArgs();
+
+    JSType thisParamType = (thisParam == null) ? null : thisParam.getJSType();
+    JSType thatParamType = (thatParam == null) ? null : thatParam.getJSType();
+
     if (thisParamType != null) {
-      if (thatParamType == null ||
-          !thatParamType.isSubtype(thisParamType)) {
+      if (thatParamType == null || !thatParamType.isSubtype(thisParamType)) {
+        // "that" can't be a supertype, because it's missing a required argument.
+        return false;
+      }
+    } else {
+      // this param is not declared, but "that" paramType is
+      // safe only if "that" param is optional (or varargs)
+      if (thatParamType != null && !thatIsVarArgs) {
         return false;
       }
     }
 
-    boolean thisIsVarArgs = thisParam.isVarArgs();
-    boolean thatIsVarArgs = thatParam.isVarArgs();
-
-    // "that" can't be a supertype, because it's missing a required argument.
-      // NOTE(nicksantos): In our type system, we use {function(...?)} and
-      // {function(...NoType)} to to indicate that arity should not be
-      // checked. Strictly speaking, this is not a correct formulation,
-      // because now a sub-function can required arguments that are var_args
-      // in the super-function. So we special-case this.
+    // both var_args indicates the end
+    if (thisIsVarArgs && thatIsVarArgs) {
+      break;
+    }
 
     // don't advance if we have variable arguments
     if (!thisIsVarArgs) {
-      thisParam = thisParam.getNext();
+      thisParam = (thisParam == null) ? null : thisParam.getNext();
     }
     if (!thatIsVarArgs) {
-      thatParam = thatParam.getNext();
-    }
-
-    // both var_args indicates the end
-    if (thisIsVarArgs && thatIsVarArgs) {
-      thisParam = null;
-      thatParam = null;
+      thatParam = (thatParam == null) ? null : thatParam.getNext();
     }
   }
 
-  // "that" can't be a supertype, because it's missing a required arguement.
-
   return true;
 }
+
