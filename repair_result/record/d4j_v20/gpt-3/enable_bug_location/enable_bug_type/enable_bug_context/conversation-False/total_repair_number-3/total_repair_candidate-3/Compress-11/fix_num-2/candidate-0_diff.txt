--- 
+++ 
@@ -13,6 +13,10 @@
     try {
         int signatureLength = in.read(signature);
         in.reset();
+        if (signatureLength == -1) {
+            throw new ArchiveException("No Archiver found for the stream signature");
+        }
+
         if (ZipArchiveInputStream.matches(signature, signatureLength)) {
             return new ZipArchiveInputStream(in);
         } else if (JarArchiveInputStream.matches(signature, signatureLength)) {
@@ -28,6 +32,9 @@
         in.mark(dumpsig.length);
         signatureLength = in.read(dumpsig);
         in.reset();
+        if (signatureLength == -1) {
+            throw new ArchiveException("No Archiver found for the stream signature");
+        }
         if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) {
             return new DumpArchiveInputStream(in);
         }
@@ -37,14 +44,18 @@
         in.mark(tarheader.length);
         signatureLength = in.read(tarheader);
         in.reset();
+        if (signatureLength == -1) {
+            throw new ArchiveException("No Archiver found for the stream signature");
+        }
         if (TarArchiveInputStream.matches(tarheader, signatureLength)) {
             return new TarArchiveInputStream(in);
         }
         // COMPRESS-117 - improve auto-recognition
         try {
-            TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader));
-            tais.getNextEntry();
-            return new TarArchiveInputStream(in);
+            TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader, 0, signatureLength));
+            if (tais.getNextEntry() != null) {
+                return new TarArchiveInputStream(in);
+            }
         } catch (Exception e) { // NOPMD
             // can generate IllegalArgumentException as well as IOException
             // autodetection, simply not a TAR
@@ -56,3 +67,4 @@
 
     throw new ArchiveException("No Archiver found for the stream signature");
 }
+
