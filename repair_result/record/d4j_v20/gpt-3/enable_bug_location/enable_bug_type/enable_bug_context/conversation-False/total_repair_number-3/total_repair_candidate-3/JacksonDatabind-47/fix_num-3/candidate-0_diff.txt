--- 
+++ 
@@ -14,7 +14,7 @@
     // Ok: start by refining the main type itself; common to all types
     Class<?> serClass = findSerializationType(a);
     if (serClass != null) {
-        if (type.hasRawClass(serClass)) {
+        if (serClass.isAssignableFrom(type.getRawClass())) {
             // 30-Nov-2015, tatu: As per [databind#1023], need to allow forcing of
             //    static typing this way
             type = type.withStaticTyping();
@@ -22,7 +22,7 @@
             try {
                 // 11-Oct-2015, tatu: For deser, we call `TypeFactory.constructSpecializedType()`,
                 //   may be needed here too in future?
-                    type = tf.constructGeneralizedType(type, serClass);
+                    type = tf.constructSpecializedType(type, serClass);
             } catch (IllegalArgumentException iae) {
                 throw new JsonMappingException(null,
                         String.format("Failed to widen type %s with annotation (value %s), from '%s': %s",
@@ -38,7 +38,7 @@
         JavaType keyType = type.getKeyType();
         Class<?> keyClass = findSerializationKeyType(a, keyType);
         if (keyClass != null) {
-            if (keyType.hasRawClass(keyClass)) {
+            if (keyClass.isAssignableFrom(keyType.getRawClass())) {
                 keyType = keyType.withStaticTyping();
             } else {
                 Class<?> currRaw = keyType.getRawClass();
@@ -71,7 +71,7 @@
         // And then value types for all containers:
        Class<?> contentClass = findSerializationContentType(a, contentType);
        if (contentClass != null) {
-           if (contentType.hasRawClass(contentClass)) {
+           if (contentClass.isAssignableFrom(contentType.getRawClass())) {
                contentType = contentType.withStaticTyping();
            } else {
                // 03-Apr-2016, tatu: As per [databind#1178], may need to actually
@@ -100,3 +100,4 @@
     }
     return type;
 }
+
