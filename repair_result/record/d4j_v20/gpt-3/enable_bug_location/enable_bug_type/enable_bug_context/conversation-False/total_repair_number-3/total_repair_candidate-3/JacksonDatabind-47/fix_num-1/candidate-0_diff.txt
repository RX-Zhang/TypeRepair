--- 
+++ 
@@ -4,17 +4,10 @@
     JavaType type = baseType;
     final TypeFactory tf = config.getTypeFactory();
     
-    // 10-Oct-2015, tatu: For 2.7, we'll need to delegate back to
-    //    now-deprecated secondary methods; this because while
-    //    direct sub-class not yet retrofitted may only override
-    //    those methods. With 2.8 or later we may consider removal
-    //    of these methods
-
-    
     // Ok: start by refining the main type itself; common to all types
     Class<?> serClass = findSerializationType(a);
     if (serClass != null) {
-        if (type.hasRawClass(serClass)) {
+        if (serClass == type.getRawClass()) {
             // 30-Nov-2015, tatu: As per [databind#1023], need to allow forcing of
             //    static typing this way
             type = type.withStaticTyping();
@@ -22,7 +15,17 @@
             try {
                 // 11-Oct-2015, tatu: For deser, we call `TypeFactory.constructSpecializedType()`,
                 //   may be needed here too in future?
+                if (serClass.isAssignableFrom(type.getRawClass())) {
+                    // Widen type: base type is subclass of serClass, so generalize
                     type = tf.constructGeneralizedType(type, serClass);
+                } else if (type.getRawClass().isAssignableFrom(serClass)) {
+                    // Narrow type: base type is superclass of serClass, specialize
+                    type = tf.constructSpecializedType(type, serClass);
+                } else {
+                    throw new JsonMappingException(null,
+                            String.format("Can not widen type %s with annotation (value %s), from '%s': types not related",
+                                    type, serClass.getName(), a.getName()));
+                }
             } catch (IllegalArgumentException iae) {
                 throw new JsonMappingException(null,
                         String.format("Failed to widen type %s with annotation (value %s), from '%s': %s",
@@ -38,14 +41,11 @@
         JavaType keyType = type.getKeyType();
         Class<?> keyClass = findSerializationKeyType(a, keyType);
         if (keyClass != null) {
-            if (keyType.hasRawClass(keyClass)) {
+            if (keyType.getRawClass() == keyClass) {
                 keyType = keyType.withStaticTyping();
             } else {
                 Class<?> currRaw = keyType.getRawClass();
                 try {
-                    // 19-May-2016, tatu: As per [databind#1231], [databind#1178] may need to actually
-                    //   specialize (narrow) type sometimes, even if more commonly opposite
-                    //   is needed.
                     if (keyClass.isAssignableFrom(currRaw)) { // common case
                         keyType = tf.constructGeneralizedType(keyType, keyClass);
                     } else if (currRaw.isAssignableFrom(keyClass)) { // specialization, ok as well
@@ -71,12 +71,9 @@
         // And then value types for all containers:
        Class<?> contentClass = findSerializationContentType(a, contentType);
        if (contentClass != null) {
-           if (contentType.hasRawClass(contentClass)) {
+           if (contentType.getRawClass() == contentClass) {
                contentType = contentType.withStaticTyping();
            } else {
-               // 03-Apr-2016, tatu: As per [databind#1178], may need to actually
-               //   specialize (narrow) type sometimes, even if more commonly opposite
-               //   is needed.
                Class<?> currRaw = contentType.getRawClass();
                try {
                    if (contentClass.isAssignableFrom(currRaw)) { // common case
@@ -100,3 +97,4 @@
     }
     return type;
 }
+
