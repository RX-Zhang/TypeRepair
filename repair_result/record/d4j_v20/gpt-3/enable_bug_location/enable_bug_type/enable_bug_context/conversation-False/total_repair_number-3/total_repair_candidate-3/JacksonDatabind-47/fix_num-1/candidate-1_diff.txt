--- 
+++ 
@@ -4,31 +4,23 @@
     JavaType type = baseType;
     final TypeFactory tf = config.getTypeFactory();
     
-    // 10-Oct-2015, tatu: For 2.7, we'll need to delegate back to
-    //    now-deprecated secondary methods; this because while
-    //    direct sub-class not yet retrofitted may only override
-    //    those methods. With 2.8 or later we may consider removal
-    //    of these methods
-
-    
     // Ok: start by refining the main type itself; common to all types
     Class<?> serClass = findSerializationType(a);
     if (serClass != null) {
-        if (type.hasRawClass(serClass)) {
-            // 30-Nov-2015, tatu: As per [databind#1023], need to allow forcing of
-            //    static typing this way
+        if (serClass.isAssignableFrom(type.getRawClass())) {
+            // If the annotated class is a super-type of current type,
+            // we can generalize (widen) the type
+            type = tf.constructGeneralizedType(type, serClass);
+        } else if (type.hasRawClass(serClass)) {
+            // Same raw class: just force static typing
             type = type.withStaticTyping();
+        } else if (type.getRawClass().isAssignableFrom(serClass)) {
+            // If annotated class is subtype/specialization, specialize it
+            type = tf.constructSpecializedType(type, serClass);
         } else {
-            try {
-                // 11-Oct-2015, tatu: For deser, we call `TypeFactory.constructSpecializedType()`,
-                //   may be needed here too in future?
-                    type = tf.constructGeneralizedType(type, serClass);
-            } catch (IllegalArgumentException iae) {
-                throw new JsonMappingException(null,
-                        String.format("Failed to widen type %s with annotation (value %s), from '%s': %s",
-                                type, serClass.getName(), a.getName(), iae.getMessage()),
-                                iae);
-            }
+            throw new JsonMappingException(null,
+                    String.format("Failed to widen type %s with annotation (value %s), from '%s': Class %s not a super-type or sub-type of %s",
+                            type, serClass.getName(), a.getName(), serClass.getName(), type.getRawClass().getName()));
         }
     }
     // Then further processing for container types
@@ -38,29 +30,16 @@
         JavaType keyType = type.getKeyType();
         Class<?> keyClass = findSerializationKeyType(a, keyType);
         if (keyClass != null) {
-            if (keyType.hasRawClass(keyClass)) {
+            if (keyClass.isAssignableFrom(keyType.getRawClass())) { // generalize
+                keyType = tf.constructGeneralizedType(keyType, keyClass);
+            } else if (keyType.hasRawClass(keyClass)) { // exact
                 keyType = keyType.withStaticTyping();
+            } else if (keyType.getRawClass().isAssignableFrom(keyClass)) { // specialize
+                keyType = tf.constructSpecializedType(keyType, keyClass);
             } else {
-                Class<?> currRaw = keyType.getRawClass();
-                try {
-                    // 19-May-2016, tatu: As per [databind#1231], [databind#1178] may need to actually
-                    //   specialize (narrow) type sometimes, even if more commonly opposite
-                    //   is needed.
-                    if (keyClass.isAssignableFrom(currRaw)) { // common case
-                        keyType = tf.constructGeneralizedType(keyType, keyClass);
-                    } else if (currRaw.isAssignableFrom(keyClass)) { // specialization, ok as well
-                        keyType = tf.constructSpecializedType(keyType, keyClass);
-                    } else {
-                        throw new JsonMappingException(null,
-                                String.format("Can not refine serialization key type %s into %s; types not related",
-                                        keyType, keyClass.getName()));
-                    }
-                } catch (IllegalArgumentException iae) {
-                    throw new JsonMappingException(null,
-                            String.format("Failed to widen key type of %s with concrete-type annotation (value %s), from '%s': %s",
-                                    type, keyClass.getName(), a.getName(), iae.getMessage()),
-                                    iae);
-                }
+                throw new JsonMappingException(null,
+                        String.format("Can not refine serialization key type %s into %s; types not related",
+                                keyType, keyClass.getName()));
             }
             type = ((MapLikeType) type).withKeyType(keyType);
         }
@@ -71,32 +50,20 @@
         // And then value types for all containers:
        Class<?> contentClass = findSerializationContentType(a, contentType);
        if (contentClass != null) {
-           if (contentType.hasRawClass(contentClass)) {
+           if (contentClass.isAssignableFrom(contentType.getRawClass())) {
+               contentType = tf.constructGeneralizedType(contentType, contentClass);
+           } else if (contentType.hasRawClass(contentClass)) {
                contentType = contentType.withStaticTyping();
+           } else if (contentType.getRawClass().isAssignableFrom(contentClass)) {
+               contentType = tf.constructSpecializedType(contentType, contentClass);
            } else {
-               // 03-Apr-2016, tatu: As per [databind#1178], may need to actually
-               //   specialize (narrow) type sometimes, even if more commonly opposite
-               //   is needed.
-               Class<?> currRaw = contentType.getRawClass();
-               try {
-                   if (contentClass.isAssignableFrom(currRaw)) { // common case
-                       contentType = tf.constructGeneralizedType(contentType, contentClass);
-                   } else if (currRaw.isAssignableFrom(contentClass)) { // specialization, ok as well
-                       contentType = tf.constructSpecializedType(contentType, contentClass);
-                   } else {
-                       throw new JsonMappingException(null,
-                               String.format("Can not refine serialization content type %s into %s; types not related",
-                                       contentType, contentClass.getName()));
-                   }
-               } catch (IllegalArgumentException iae) { // shouldn't really happen
-                   throw new JsonMappingException(null,
-                           String.format("Internal error: failed to refine value type of %s with concrete-type annotation (value %s), from '%s': %s",
-                                   type, contentClass.getName(), a.getName(), iae.getMessage()),
-                                   iae);
-               }
+               throw new JsonMappingException(null,
+                       String.format("Can not refine serialization content type %s into %s; types not related",
+                               contentType, contentClass.getName()));
            }
            type = type.withContentType(contentType);
        }
     }
     return type;
 }
+
