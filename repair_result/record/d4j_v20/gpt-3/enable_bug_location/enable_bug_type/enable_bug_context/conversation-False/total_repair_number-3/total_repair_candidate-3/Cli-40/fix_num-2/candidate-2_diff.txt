--- 
+++ 
@@ -1,43 +1,44 @@
 public static <T> T createValue(final String str, final Class<T> clazz) throws ParseException
 {
-    if (PatternOptionBuilder.STRING_VALUE == clazz)
+    if (clazz == String.class) // Fixed type check
     {
         return (T) str;
     }
-    else if (PatternOptionBuilder.OBJECT_VALUE == clazz)
+    else if (clazz == Object.class) // Fixed type check
     {
         return (T) createObject(str);
     }
-    else if (PatternOptionBuilder.NUMBER_VALUE == clazz)
+    else if (Number.class.isAssignableFrom(clazz)) // Fixed type check for Number
     {
         return (T) createNumber(str);
     }
-    else if (PatternOptionBuilder.DATE_VALUE == clazz)
+    else if (Date.class.isAssignableFrom(clazz)) // Fixed type check for Date
     {
         return (T) createDate(str);
     }
-    else if (PatternOptionBuilder.CLASS_VALUE == clazz)
+    else if (Class.class.isAssignableFrom(clazz)) // Fixed type check for Class
     {
         return (T) createClass(str);
     }
-    else if (PatternOptionBuilder.FILE_VALUE == clazz)
+    else if (File.class.isAssignableFrom(clazz)) // Fixed type check for File
     {
         return (T) createFile(str);
     }
-    else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)
+    else if (File.class.isAssignableFrom(clazz)) // Fixed type check for existing File
     {
         return (T) openFile(str);
     }
-    else if (PatternOptionBuilder.FILES_VALUE == clazz)
+    else if (File[].class.isAssignableFrom(clazz)) // Fixed type check for File[]
     {
         return (T) createFiles(str);
     }
-    else if (PatternOptionBuilder.URL_VALUE == clazz)
+    else if (URL.class.isAssignableFrom(clazz)) // Fixed type check for URL
     {
         return (T) createURL(str);
     }
     else
     {
-        return null;
+        throw new ParseException("Unsupported type: " + clazz.getName());
     }
 }
+
