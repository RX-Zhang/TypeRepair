--- 
+++ 
@@ -38,8 +38,11 @@
     JSType thisParamType = thisParam.getJSType();
     JSType thatParamType = thatParam.getJSType();
     if (thisParamType != null) {
-      if (thatParamType == null ||
-          !thatParamType.isSubtype(thisParamType)) {
+      if (thatParamType == null || !thatParamType.isSubtype(thisParamType)) {
+        return false;
+      }
+    } else {
+      if (thatParamType != null) {
         return false;
       }
     }
@@ -48,11 +51,11 @@
     boolean thatIsVarArgs = thatParam.isVarArgs();
 
     // "that" can't be a supertype, because it's missing a required argument.
-      // NOTE(nicksantos): In our type system, we use {function(...?)} and
-      // {function(...NoType)} to to indicate that arity should not be
-      // checked. Strictly speaking, this is not a correct formulation,
-      // because now a sub-function can required arguments that are var_args
-      // in the super-function. So we special-case this.
+    // NOTE(nicksantos): In our type system, we use {function(...?)} and
+    // {function(...NoType)} to indicate that arity should not be checked.
+    // Strictly speaking, this is not a correct formulation,
+    // because now a sub-function can require arguments that are var_args
+    // in the super-function. So we special-case this.
 
     // don't advance if we have variable arguments
     if (!thisIsVarArgs) {
@@ -69,7 +72,23 @@
     }
   }
 
-  // "that" can't be a supertype, because it's missing a required arguement.
+  // If this has remaining required parameters, that cannot be supertype
+  // (has fewer parameters).
+  while (thisParam != null) {
+    if (!thisParam.isOptionalArg() && !thisParam.isVarArgs()) {
+      return false;
+    }
+    thisParam = thisParam.getNext();
+  }
+
+  // If that has remaining required parameters, this cannot be subtype.
+  while (thatParam != null) {
+    if (!thatParam.isOptionalArg() && !thatParam.isVarArgs()) {
+      return false;
+    }
+    thatParam = thatParam.getNext();
+  }
 
   return true;
 }
+
