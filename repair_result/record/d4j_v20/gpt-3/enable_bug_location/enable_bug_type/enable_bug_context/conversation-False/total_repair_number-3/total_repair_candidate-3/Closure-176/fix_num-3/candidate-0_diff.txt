--- 
+++ 
@@ -23,24 +23,15 @@
       // sure we back-infer the <string> element constraint on
       // the left hand side, so we use the left hand side.
 
-      boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();
-          // Makes it easier to check for NPEs.
-
-      // TODO(nicksantos): This might be a better check once we have
-      // back-inference of object/array constraints.  It will probably
-      // introduce more type warnings.  It uses the result type iff it's
-      // strictly narrower than the declared var type.
-      //
-      //boolean isVarTypeBetter = isVarDeclaration &&
-      //    (varType.restrictByNotNullOrUndefined().isSubtype(resultType)
-      //     || !resultType.isSubtype(varType));
-
+      boolean isVarTypeBetter = isVarDeclaration || var == null || var.isTypeInferred();
+          // We choose the declared var type if this is a var declaration
+          // or the var does not exist or is inferred.
 
       if (isVarTypeBetter) {
         redeclareSimpleVar(scope, left, resultType);
       }
       left.setJSType(isVarDeclaration || leftType == null ?
-          resultType : null);
+          resultType : leftType);
 
       if (var != null && var.isTypeInferred()) {
         JSType oldType = var.getType();
@@ -61,3 +52,4 @@
       break;
   }
 }
+
