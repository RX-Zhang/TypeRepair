--- 
+++ 
@@ -24,6 +24,11 @@
                     wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);
                     continue;
                 }
+                // Ensure that the bean is valid after creation
+                if (bean == null) {
+                    ctxt.reportMappingException("Bean creation returned null for property: " + propName);
+                    return null;
+                }
                 while (t == JsonToken.FIELD_NAME) {
                     p.nextToken();
                     tokens.copyCurrentStructure(p);
@@ -31,7 +36,7 @@
                 }
                 tokens.writeEndObject();
                 if (bean.getClass() != _beanType.getRawClass()) {
-                    ctxt.reportMappingException("Can not create polymorphic instances with unwrapped values");
+                    ctxt.reportMappingException("Cannot create polymorphic instances with unwrapped values");
                     return null;
                 }
                 return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
@@ -45,7 +50,12 @@
         // regular property? needs buffering
         SettableBeanProperty prop = _beanProperties.find(propName);
         if (prop != null) {
-            buffer.bufferProperty(prop, prop.deserialize(p, ctxt));
+            // Add input validation to ensure proper handling of null values
+            Object value = prop.deserialize(p, ctxt);
+            if (value == null) {
+                ctxt.reportMappingException("Property " + propName + " cannot be null");
+            }
+            buffer.bufferProperty(prop, value);
             continue;
         }
         if (_ignorableProps != null && _ignorableProps.contains(propName)) {
@@ -70,3 +80,4 @@
     }
     return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
 }
+
