--- 
+++ 
@@ -10,13 +10,13 @@
     // first, sanity checks
     if (p.getCurrentToken() != JsonToken.START_OBJECT) {
         throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,
-                "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName());
+                "need JSON Object to contain As.WRAPPER_OBJECT type information for class " + baseTypeName());
     }
-        // should always get field name, but just in case...
-        if (p.nextToken() != JsonToken.FIELD_NAME) {
-            throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,
-                    "need JSON String that contains type id (for subtype of "+baseTypeName()+")");
-        }
+    // should always get field name, but just in case...
+    if (p.nextToken() != JsonToken.FIELD_NAME) {
+        throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,
+                "need JSON String that contains type id (for subtype of " + baseTypeName() + ")");
+    }
     final String typeId = p.getText();
     JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);
     p.nextToken();
@@ -31,8 +31,13 @@
         p = JsonParserSequence.createFlattened(tb.asParser(p), p);
         p.nextToken();
     }
-    
-    Object value = deser.deserialize(p, ctxt);
+
+    Object value = null; // Initialize value to prevent potential runtime errors
+    try {
+        value = deser.deserialize(p, ctxt);
+    } catch (Exception e) {
+        throw new IOException("Deserialization failed for type id: " + typeId, e);
+    }
     // And then need the closing END_OBJECT
     if (p.nextToken() != JsonToken.END_OBJECT) {
         throw ctxt.wrongTokenException(p, JsonToken.END_OBJECT,
@@ -40,3 +45,4 @@
     }
     return value;
 }
+
