--- 
+++ 
@@ -14,15 +14,26 @@
     // Ok: start by refining the main type itself; common to all types
     Class<?> serClass = findSerializationType(a);
     if (serClass != null) {
-        if (type.hasRawClass(serClass)) {
+        if (serClass.isAssignableFrom(type.getRawClass())) {
             // 30-Nov-2015, tatu: As per [databind#1023], need to allow forcing of
             //    static typing this way
+            type = type.withStaticTyping();
+        } else if (type.hasRawClass(serClass)) {
+            // exact match: treat as static typing too
             type = type.withStaticTyping();
         } else {
             try {
                 // 11-Oct-2015, tatu: For deser, we call `TypeFactory.constructSpecializedType()`,
                 //   may be needed here too in future?
+                if (type.getRawClass().isAssignableFrom(serClass)) {
+                    type = tf.constructSpecializedType(type, serClass);
+                } else if (serClass.isAssignableFrom(type.getRawClass())) {
                     type = tf.constructGeneralizedType(type, serClass);
+                } else {
+                    throw new JsonMappingException(null,
+                            String.format("Failed to widen type %s with annotation (value %s), from '%s': types not related",
+                                    type, serClass.getName(), a.getName()));
+                }
             } catch (IllegalArgumentException iae) {
                 throw new JsonMappingException(null,
                         String.format("Failed to widen type %s with annotation (value %s), from '%s': %s",
@@ -38,7 +49,7 @@
         JavaType keyType = type.getKeyType();
         Class<?> keyClass = findSerializationKeyType(a, keyType);
         if (keyClass != null) {
-            if (keyType.hasRawClass(keyClass)) {
+            if (keyClass.isAssignableFrom(keyType.getRawClass())) {
                 keyType = keyType.withStaticTyping();
             } else {
                 Class<?> currRaw = keyType.getRawClass();
@@ -46,10 +57,10 @@
                     // 19-May-2016, tatu: As per [databind#1231], [databind#1178] may need to actually
                     //   specialize (narrow) type sometimes, even if more commonly opposite
                     //   is needed.
-                    if (keyClass.isAssignableFrom(currRaw)) { // common case
+                    if (currRaw.isAssignableFrom(keyClass)) { // specialization, ok as well
+                        keyType = tf.constructSpecializedType(keyType, keyClass);
+                    } else if (keyClass.isAssignableFrom(currRaw)) { // common case
                         keyType = tf.constructGeneralizedType(keyType, keyClass);
-                    } else if (currRaw.isAssignableFrom(keyClass)) { // specialization, ok as well
-                        keyType = tf.constructSpecializedType(keyType, keyClass);
                     } else {
                         throw new JsonMappingException(null,
                                 String.format("Can not refine serialization key type %s into %s; types not related",
@@ -71,7 +82,7 @@
         // And then value types for all containers:
        Class<?> contentClass = findSerializationContentType(a, contentType);
        if (contentClass != null) {
-           if (contentType.hasRawClass(contentClass)) {
+           if (contentClass.isAssignableFrom(contentType.getRawClass())) {
                contentType = contentType.withStaticTyping();
            } else {
                // 03-Apr-2016, tatu: As per [databind#1178], may need to actually
@@ -79,10 +90,10 @@
                //   is needed.
                Class<?> currRaw = contentType.getRawClass();
                try {
-                   if (contentClass.isAssignableFrom(currRaw)) { // common case
+                   if (currRaw.isAssignableFrom(contentClass)) { // specialization, ok as well
+                       contentType = tf.constructSpecializedType(contentType, contentClass);
+                   } else if (contentClass.isAssignableFrom(currRaw)) { // common case
                        contentType = tf.constructGeneralizedType(contentType, contentClass);
-                   } else if (currRaw.isAssignableFrom(contentClass)) { // specialization, ok as well
-                       contentType = tf.constructSpecializedType(contentType, contentClass);
                    } else {
                        throw new JsonMappingException(null,
                                String.format("Can not refine serialization content type %s into %s; types not related",
@@ -100,3 +111,4 @@
     }
     return type;
 }
+
