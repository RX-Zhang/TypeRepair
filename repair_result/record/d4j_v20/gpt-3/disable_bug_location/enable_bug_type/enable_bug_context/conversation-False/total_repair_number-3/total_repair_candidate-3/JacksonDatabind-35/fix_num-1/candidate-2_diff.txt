--- 
+++ 
@@ -12,14 +12,19 @@
         throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,
                 "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName());
     }
-        // should always get field name, but just in case...
-        if (p.nextToken() != JsonToken.FIELD_NAME) {
-            throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,
-                    "need JSON String that contains type id (for subtype of "+baseTypeName()+")");
-        }
+
+    // Move to the first field name token; should always get it here
+    if (p.nextToken() != JsonToken.FIELD_NAME) {
+        throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,
+                "need JSON String that contains type id (for subtype of "+baseTypeName()+")");
+    }
     final String typeId = p.getText();
     JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);
-    p.nextToken();
+
+    // Move to the token following the type id field name
+    if (p.nextToken() == null) {
+        throw ctxt.mappingException("Unexpected end of input after type id field");
+    }
 
     // Minor complication: we may need to merge type id in?
     if (_typeIdVisible && p.getCurrentToken() == JsonToken.START_OBJECT) {
@@ -33,10 +38,12 @@
     }
     
     Object value = deser.deserialize(p, ctxt);
-    // And then need the closing END_OBJECT
+
+    // After deserialization, expect the end object token of the wrapper
     if (p.nextToken() != JsonToken.END_OBJECT) {
         throw ctxt.wrongTokenException(p, JsonToken.END_OBJECT,
                 "expected closing END_OBJECT after type information and deserialized value");
     }
     return value;
 }
+
