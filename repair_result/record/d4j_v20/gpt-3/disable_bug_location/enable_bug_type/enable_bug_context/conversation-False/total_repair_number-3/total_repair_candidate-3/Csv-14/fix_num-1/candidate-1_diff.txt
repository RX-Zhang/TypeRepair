--- 
+++ 
@@ -6,7 +6,9 @@
     final int end = offset + len;
 
     final char delimChar = getDelimiter();
-    final char quoteChar = getQuoteCharacter().charValue();
+    final Character quoteCharObj = getQuoteCharacter();
+    // If quoteChar is null, no quoting possible
+    final char quoteChar = quoteCharObj != null ? quoteCharObj.charValue() : 0;
 
     QuoteMode quoteModePolicy = getQuoteMode();
     if (quoteModePolicy == null) {
@@ -35,8 +37,8 @@
         } else {
             char c = value.charAt(pos);
 
-            // RFC4180 (https://tools.ietf.org/html/rfc4180) TEXTDATA =  %x20-21 / %x23-2B / %x2D-7E
-            if (newRecord && (c < '0' || c > '9' && c < 'A' || c > 'Z' && c < 'a' || c > 'z')) {
+            // Correct logical expression with clearer grouping to match RFC4180 TEXTDATA ranges
+            if (newRecord && (c < '0' || (c > '9' && c < 'A') || (c > 'Z' && c < 'a') || c > 'z')) {
                 quote = true;
             } else if (c <= COMMENT) {
                 // Some other chars at the start of a value caused the parser to fail, so for now
@@ -46,7 +48,7 @@
             } else {
                 while (pos < end) {
                     c = value.charAt(pos);
-                    if (c == LF || c == CR || c == quoteChar || c == delimChar) {
+                    if (c == LF || c == CR || (quoteCharObj != null && c == quoteChar) || c == delimChar) {
                         quote = true;
                         break;
                     }
@@ -82,6 +84,13 @@
     }
 
     // we hit something that needed encapsulation
+
+    // If quoteChar is null, can't quote, so just output as-is
+    if (quoteCharObj == null) {
+        out.append(value, start, end);
+        return;
+    }
+
     out.append(quoteChar);
 
     // Pick up where we left off: pos should be positioned on the first character that caused
@@ -90,8 +99,6 @@
         final char c = value.charAt(pos);
         if (c == quoteChar) {
             // write out the chunk up until this point
-
-            // add 1 to the length to write out the encapsulator also
             out.append(value, start, pos + 1);
             // put the next starting position on the encapsulator so we will
             // write it out again with the next string (effectively doubling it)
@@ -104,3 +111,4 @@
     out.append(value, start, pos);
     out.append(quoteChar);
 }
+
