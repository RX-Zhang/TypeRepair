--- 
+++ 
@@ -1,37 +1,50 @@
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
-    long    result = 0;
-    boolean stillPadding = true;
-    int     end = offset + length;
-    int     start = offset;
+    if (length < 2) {
+        throw new IllegalArgumentException("Octal length must be at least 2");
+    }
 
-    for (int i = start; i < end; i++){
+    long result = 0;
+    boolean seenDigit = false;
+    int end = offset + length;
+    int paddingStart = -1;
+
+    for (int i = offset; i < end; i++) {
         final byte currentByte = buffer[i];
         if (currentByte == 0) {
+            // Trailing NUL found, after any digits and padding
             break;
         }
-
-    // Skip leading spaces
-        if (currentByte == (byte) ' ' || currentByte == '0') {
-            if (stillPadding) {
-               continue;
+        if (currentByte == (byte) ' ') {
+            // Once we see a space after digits started, rest should be spaces or NULs
+            if (!seenDigit) {
+                // Leading spaces, skip
+                continue;
+            }
+            // Mark start of padding if not already done
+            if (paddingStart == -1) {
+                paddingStart = i;
+            }
+            continue;
         }
-            if (currentByte == (byte) ' ') {
-            break;
+        if (currentByte >= '0' && currentByte <= '7') {
+            if (paddingStart != -1) {
+                // Embedded digit after padding space detected -> invalid
+                throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, i, currentByte));
             }
+            seenDigit = true;
+            result = (result << 3) + (currentByte - '0');
+            continue;
         }
 
-    // Must have trailing NUL or space
-    // May have additional NUL or space
+        // Invalid character (not space, NUL, or octal digit)
+        throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, i, currentByte));
+    }
 
-        stillPadding = false;
-        // CheckStyle:MagicNumber OFF
-        if (currentByte < '0' || currentByte > '7'){
-            throw new IllegalArgumentException(
-                    exceptionMessage(buffer, offset, length, start, currentByte));
-        }
-        result = (result << 3) + (currentByte - '0'); // convert from ASCII
-        // CheckStyle:MagicNumber ON
+    // Reject if no digits found
+    if (!seenDigit) {
+        throw new IllegalArgumentException("No octal digits found");
     }
 
     return result;
 }
+
