--- 
+++ 
@@ -23,6 +23,29 @@
                 break;
             }
 
+            // Convert option value to expected type if needed before validation
+            Object value = commandLine.getValue(option);
+            if (value != null) {
+                try {
+                    // Assume option.getType() returns Class<?> indicating expected type
+                    Class<?> expectedType = option.getType();
+                    if (expectedType != null && !expectedType.isInstance(value)) {
+                        if (expectedType == String.class) {
+                            value = value.toString();
+                        } else if (expectedType == java.io.File.class && value instanceof String) {
+                            value = new java.io.File((String) value);
+                        } else if (expectedType == Integer.class && value instanceof String) {
+                            value = Integer.valueOf((String) value);
+                        }
+                        // You can add other type conversions as needed
+                        // After conversion, update the value in commandLine or process accordingly
+                        // However, since we cannot modify commandLine here, assume validations handle type properly
+                    }
+                } catch (Exception e) {
+                    throw new OptionException(this, "Type conversion error for option: " + option.getPreferredName());
+                }
+            }
+
             option.validate(commandLine);
         }
     }
@@ -44,3 +67,4 @@
         option.validate(commandLine);
     }
 }
+
