--- 
+++ 
@@ -19,20 +19,45 @@
         }
         else if (arg.startsWith("-"))
         {
-            String opt = Util.stripLeadingHyphens(arg);
+            // handle --foo=bar or -f=bar cases
+            int equalIndex = arg.indexOf('=');
+            String opt = null;
+            String optArg = null;
 
-            if (options.hasOption(opt))
+            if (equalIndex != -1)
             {
-                tokens.add(arg);
+                opt = arg.substring(0, equalIndex);
+                optArg = arg.substring(equalIndex + 1);
             }
             else
             {
-                if (options.hasOption(arg.substring(0, 2)))
+                opt = arg;
+            }
+
+            String optName = Util.stripLeadingHyphens(opt);
+
+            if (options.hasOption(optName))
+            {
+                tokens.add(opt);
+                if (optArg != null)
                 {
-                    // the format is --foo=value or -foo=value
-                    // the format is a special properties option (-Dproperty=value)
-                    tokens.add(arg.substring(0, 2)); // -D
-                    tokens.add(arg.substring(2)); // property=value
+                    tokens.add(optArg);
+                }
+            }
+            else
+            {
+                // Try checking if first 2 chars is an option (for e.g. -Dproperty=value)
+                if (opt.length() > 1 && options.hasOption(opt.substring(0, 2)))
+                {
+                    tokens.add(opt.substring(0, 2)); // -D
+                    if (opt.length() > 2)
+                    {
+                        tokens.add(opt.substring(2));
+                    }
+                    if (optArg != null)
+                    {
+                        tokens.add(optArg);
+                    }
                 }
                 else
                 {
@@ -57,3 +82,4 @@
 
     return (String[]) tokens.toArray(new String[tokens.size()]);
 }
+
