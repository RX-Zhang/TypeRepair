--- 
+++ 
@@ -1,19 +1,19 @@
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
-    long    result = 0;
-    int     end = offset + length;
-    int     start = offset;
+    long result = 0;
+    int end = offset + length;
+    int start = offset;
 
-    if (length < 2){
-        throw new IllegalArgumentException("Length "+length+" must be at least 2");
+    if (length < 2) {
+        throw new IllegalArgumentException("Length " + length + " must be at least 2");
     }
 
     if (buffer[start] == 0) {
         return 0L;
     }
 
-    // Skip leading spaces
-    while (start < end){
-        if (buffer[start] == ' '){
+    // Skip leading spaces and NULs.
+    while (start < end) {
+        if (buffer[start] == ' ' || buffer[start] == 0) {
             start++;
         } else {
             break;
@@ -24,26 +24,25 @@
     // The ustar and POSIX tar specs require a trailing NUL or
     // space but some implementations use the extra digit for big
     // sizes/uids/gids ...
-    byte trailer = buffer[end - 1];
-    while (start < end && (trailer == 0 || trailer == ' ')) {
+    while (end > start && (buffer[end - 1] == 0 || buffer[end - 1] == ' ')) {
         end--;
-        trailer = buffer[end - 1];
     }
+
     if (start == end) {
+        byte trailer = (start < length + offset) ? buffer[start] : 0;
         throw new IllegalArgumentException(
                 exceptionMessage(buffer, offset, length, start, trailer));
     }
 
-    for ( ;start < end; start++) {
+    for (; start < end; start++) {
         final byte currentByte = buffer[start];
-        // CheckStyle:MagicNumber OFF
-        if (currentByte < '0' || currentByte > '7'){
+        if (currentByte < '0' || currentByte > '7') {
             throw new IllegalArgumentException(
                     exceptionMessage(buffer, offset, length, start, currentByte));
         }
         result = (result << 3) + (currentByte - '0'); // convert from ASCII
-        // CheckStyle:MagicNumber ON
     }
 
     return result;
 }
+
