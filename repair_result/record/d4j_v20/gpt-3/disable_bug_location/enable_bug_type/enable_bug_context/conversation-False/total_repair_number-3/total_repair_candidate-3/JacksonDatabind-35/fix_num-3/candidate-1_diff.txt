--- 
+++ 
@@ -10,22 +10,27 @@
     // first, sanity checks
     if (p.getCurrentToken() != JsonToken.START_OBJECT) {
         throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,
-                "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName());
+                "need JSON Object to contain As.WRAPPER_OBJECT type information for class " + baseTypeName());
     }
-        // should always get field name, but just in case...
-        if (p.nextToken() != JsonToken.FIELD_NAME) {
-            throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,
-                    "need JSON String that contains type id (for subtype of "+baseTypeName()+")");
-        }
+    // Move to the first FIELD_NAME inside the wrapper object
+    if (p.nextToken() != JsonToken.FIELD_NAME) {
+        throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,
+                "need JSON String that contains type id (for subtype of " + baseTypeName() + ")");
+    }
     final String typeId = p.getText();
     JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);
-    p.nextToken();
-
-    // Minor complication: we may need to merge type id in?
+    
+    // Move to the value (START_OBJECT) to be deserialized
+    if (p.nextToken() != JsonToken.START_OBJECT && !_typeIdVisible) {
+        // If type id not visible, expect object start for value
+        throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,
+                "expected START_OBJECT token after type id for subtype of " + baseTypeName());
+    }
+    
+    // If type id visible and current token is START_OBJECT, inject type id field
     if (_typeIdVisible && p.getCurrentToken() == JsonToken.START_OBJECT) {
-        // but what if there's nowhere to add it in? Error? Or skip? For now, skip.
         TokenBuffer tb = new TokenBuffer(null, false);
-        tb.writeStartObject(); // recreate START_OBJECT
+        tb.writeStartObject();
         tb.writeFieldName(_typePropertyName);
         tb.writeString(typeId);
         p = JsonParserSequence.createFlattened(tb.asParser(p), p);
@@ -33,10 +38,11 @@
     }
     
     Object value = deser.deserialize(p, ctxt);
-    // And then need the closing END_OBJECT
+    // And then need the closing END_OBJECT of the wrapper
     if (p.nextToken() != JsonToken.END_OBJECT) {
         throw ctxt.wrongTokenException(p, JsonToken.END_OBJECT,
                 "expected closing END_OBJECT after type information and deserialized value");
     }
     return value;
 }
+
