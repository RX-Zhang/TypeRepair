--- 
+++ 
@@ -25,7 +25,7 @@
 
         // if the value has no time component (and no time zone), we are done
         boolean hasT = checkOffset(date, offset, 'T');
-        
+
         if (!hasT && (date.length() <= offset)) {
             Calendar calendar = new GregorianCalendar(year, month - 1, day);
 
@@ -54,7 +54,7 @@
                     // milliseconds can be optional in the format
                     if (checkOffset(date, offset, '.')) {
                         offset += 1;
-                        int endOffset = indexOfNonDigit(date, offset + 1); // assume at least one digit
+                        int endOffset = indexOfNonDigit(date, offset);
                         int parseEndOffset = Math.min(endOffset, offset + 3); // parse up to 3 digits
                         int fraction = parseInt(date, offset, parseEndOffset);
                         // compensate for "missing" digits
@@ -86,40 +86,49 @@
             timezone = TIMEZONE_UTC;
             offset += 1;
         } else if (timezoneIndicator == '+' || timezoneIndicator == '-') {
-            String timezoneOffset = date.substring(offset);
+            int timezoneStart = offset;
+            offset++; // skip '+' or '-'
 
-            // When timezone has no minutes, we should append it, valid timezones are, for example: +00:00, +0000 and +00
+            // parse hour part of timezone offset
+            if (date.length() < offset + 2) {
+                throw new IllegalArgumentException("Incomplete time zone offset");
+            }
+            int tzHour = parseInt(date, offset, offset + 2);
+            offset += 2;
 
-            offset += timezoneOffset.length();
-            // 18-Jun-2015, tatu: Minor simplification, skip offset of "+0000"/"+00:00"
-            if ("+0000".equals(timezoneOffset) || "+00:00".equals(timezoneOffset)) {
-                timezone = TIMEZONE_UTC;
-            } else {
-                // 18-Jun-2015, tatu: Looks like offsets only work from GMT, not UTC...
-                //    not sure why, but that's the way it looks. Further, Javadocs for
-                //    `java.util.TimeZone` specifically instruct use of GMT as base for
-                //    custom timezones... odd.
-                String timezoneId = "GMT" + timezoneOffset;
-                  String timezoneId = "UTC" + timezoneOffset;
+            int tzMinute = 0;
+            if (checkOffset(date, offset, ':')) {
+                offset++; // skip ':'
+                if (date.length() < offset + 2) {
+                    throw new IllegalArgumentException("Incomplete time zone offset");
+                }
+                tzMinute = parseInt(date, offset, offset + 2);
+                offset += 2;
+            } else if (date.length() >= offset + 2) {
+                // Possibly minutes without colon, e.g. +0130
+                char c1 = date.charAt(offset);
+                char c2 = date.charAt(offset + 1);
+                if (Character.isDigit(c1) && Character.isDigit(c2)) {
+                    tzMinute = parseInt(date, offset, offset + 2);
+                    offset += 2;
+                }
+            }
 
-                timezone = TimeZone.getTimeZone(timezoneId);
+            // build timezone ID in "GMT[+|-]HH:mm" format
+            String sign = timezoneIndicator == '+' ? "+" : "-";
+            String tzId = String.format("GMT%s%02d:%02d", sign, tzHour, tzMinute);
+            timezone = TimeZone.getTimeZone(tzId);
 
-                String act = timezone.getID();
-                if (!act.equals(timezoneId)) {
-                    /* 22-Jan-2015, tatu: Looks like canonical version has colons, but we may be given
-                     *    one without. If so, don't sweat.
-                     *   Yes, very inefficient. Hopefully not hit often.
-                     *   If it becomes a perf problem, add 'loose' comparison instead.
-                     */
-                    String cleaned = act.replace(":", "");
-                    if (!cleaned.equals(timezoneId)) {
-                        throw new IndexOutOfBoundsException("Mismatching time zone indicator: "+timezoneId+" given, resolves to "
-                                +timezone.getID());
-                    }
+            String act = timezone.getID();
+            if (!act.equals(tzId)) {
+                // tolerate timezone without colon, e.g. GMT+0100 vs GMT+01:00
+                String cleaned = act.replace(":", "");
+                if (!cleaned.equals(tzId.replace(":", ""))) {
+                    throw new IndexOutOfBoundsException("Mismatching time zone indicator: " + tzId + " given, resolves to " + timezone.getID());
                 }
             }
         } else {
-            throw new IndexOutOfBoundsException("Invalid time zone indicator '" + timezoneIndicator+"'");
+            throw new IndexOutOfBoundsException("Invalid time zone indicator '" + timezoneIndicator + "'");
         }
 
         Calendar calendar = new GregorianCalendar(timezone);
@@ -143,12 +152,13 @@
     } catch (IllegalArgumentException e) {
         fail = e;
     }
-    String input = (date == null) ? null : ('"' + date + "'");
+    String input = (date == null) ? null : ('"' + date + '"');
     String msg = fail.getMessage();
     if (msg == null || msg.isEmpty()) {
-        msg = "("+fail.getClass().getName()+")";
+        msg = "(" + fail.getClass().getName() + ")";
     }
     ParseException ex = new ParseException("Failed to parse date [" + input + "]: " + msg, pos.getIndex());
     ex.initCause(fail);
     throw ex;
 }
+
