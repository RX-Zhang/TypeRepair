--- 
+++ 
@@ -19,25 +19,62 @@
         }
         else if (arg.startsWith("-"))
         {
-            String opt = Util.stripLeadingHyphens(arg);
+            // If the argument contains '=', handle --foo=bar or -f=bar cases
+            int pos = arg.indexOf('=');
 
-            if (options.hasOption(opt))
+            if (pos != -1)
             {
-                tokens.add(arg);
+                String optPart = arg.substring(0, pos);
+                String valuePart = arg.substring(pos + 1);
+
+                // Strip leading hyphens to get option name
+                String opt = Util.stripLeadingHyphens(optPart);
+
+                if (options.hasOption(opt))
+                {
+                    // Add option and its value separately
+                    tokens.add(optPart);
+                    tokens.add(valuePart);
+                }
+                else if (options.hasOption(optPart))
+                {
+                    // If option with hyphens exists (rare), handle it
+                    tokens.add(optPart);
+                    tokens.add(valuePart);
+                }
+                else
+                {
+                    // Not a recognized option, treat entire arg as a token
+                    tokens.add(arg);
+                    if (stopAtNonOption)
+                    {
+                        eatTheRest = true;
+                    }
+                }
             }
             else
             {
-                if (options.hasOption(arg.substring(0, 2)))
+                // No '=' present; check if the stripped option exists
+                String opt = Util.stripLeadingHyphens(arg);
+
+                if (options.hasOption(opt))
                 {
-                    // the format is --foo=value or -foo=value
-                    // the format is a special properties option (-Dproperty=value)
-                    tokens.add(arg.substring(0, 2)); // -D
-                    tokens.add(arg.substring(2)); // property=value
+                    tokens.add(arg);
+                }
+                else if (arg.length() > 2 && options.hasOption(arg.substring(0, 2)))
+                {
+                    // Handling special cases like -Dproperty=value (no '=' here, but arg.length > 2)
+                    tokens.add(arg.substring(0, 2)); // e.g. -D
+                    tokens.add(arg.substring(2));    // e.g. property=value
                 }
                 else
                 {
-                    eatTheRest = stopAtNonOption;
+                    // Unrecognized option
                     tokens.add(arg);
+                    if (stopAtNonOption)
+                    {
+                        eatTheRest = true;
+                    }
                 }
             }
         }
@@ -57,3 +94,4 @@
 
     return (String[]) tokens.toArray(new String[tokens.size()]);
 }
+
