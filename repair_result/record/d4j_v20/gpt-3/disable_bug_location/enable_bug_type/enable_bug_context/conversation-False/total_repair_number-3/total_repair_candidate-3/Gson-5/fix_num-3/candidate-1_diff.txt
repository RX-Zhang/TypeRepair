--- 
+++ 
@@ -25,7 +25,7 @@
 
         // if the value has no time component (and no time zone), we are done
         boolean hasT = checkOffset(date, offset, 'T');
-        
+
         if (!hasT && (date.length() <= offset)) {
             Calendar calendar = new GregorianCalendar(year, month - 1, day);
 
@@ -54,19 +54,19 @@
                     // milliseconds can be optional in the format
                     if (checkOffset(date, offset, '.')) {
                         offset += 1;
-                        int endOffset = indexOfNonDigit(date, offset + 1); // assume at least one digit
+                        int endOffset = indexOfNonDigit(date, offset); // assume at least one digit
                         int parseEndOffset = Math.min(endOffset, offset + 3); // parse up to 3 digits
                         int fraction = parseInt(date, offset, parseEndOffset);
                         // compensate for "missing" digits
                         switch (parseEndOffset - offset) { // number of digits parsed
-                        case 2:
-                            milliseconds = fraction * 10;
-                            break;
-                        case 1:
-                            milliseconds = fraction * 100;
-                            break;
-                        default:
-                            milliseconds = fraction;
+                            case 2:
+                                milliseconds = fraction * 10;
+                                break;
+                            case 1:
+                                milliseconds = fraction * 100;
+                                break;
+                            default:
+                                milliseconds = fraction;
                         }
                         offset = endOffset;
                     }
@@ -86,21 +86,85 @@
             timezone = TIMEZONE_UTC;
             offset += 1;
         } else if (timezoneIndicator == '+' || timezoneIndicator == '-') {
-            String timezoneOffset = date.substring(offset);
+            // timezone offset can be of form +hh, +hhmm, or +hh:mm
+            int tzStart = offset;
+            offset++; // skip + or -
+
+            // parse hour part (2 digits)
+            int tzHourEnd = offset + 2;
+            if (date.length() < tzHourEnd) {
+                throw new IllegalArgumentException("Invalid time zone indicator: incomplete hour offset");
+            }
+            // check hour digits
+            for (int i = offset; i < tzHourEnd; i++) {
+                if (!Character.isDigit(date.charAt(i))) {
+                    throw new IllegalArgumentException("Invalid time zone indicator: malformed hour offset");
+                }
+            }
+            offset = tzHourEnd;
+
+            int tzMinute = 0;
+            if (date.length() > offset) {
+                char c = date.charAt(offset);
+                if (c == ':') {
+                    // colon separator for minutes, skip and parse 2 digits
+                    offset++;
+                    int tzMinEnd = offset + 2;
+                    if (date.length() < tzMinEnd) {
+                        throw new IllegalArgumentException("Invalid time zone indicator: incomplete minute offset");
+                    }
+                    for (int i = offset; i < tzMinEnd; i++) {
+                        if (!Character.isDigit(date.charAt(i))) {
+                            throw new IllegalArgumentException("Invalid time zone indicator: malformed minute offset");
+                        }
+                    }
+                    tzMinute = parseInt(date, offset, tzMinEnd);
+                    offset = tzMinEnd;
+                } else if (Character.isDigit(c)) {
+                    // parse minutes without colon (2 digits)
+                    int tzMinEnd = offset + 2;
+                    if (date.length() < tzMinEnd) {
+                        throw new IllegalArgumentException("Invalid time zone indicator: incomplete minute offset");
+                    }
+                    for (int i = offset; i < tzMinEnd; i++) {
+                        if (!Character.isDigit(date.charAt(i))) {
+                            throw new IllegalArgumentException("Invalid time zone indicator: malformed minute offset");
+                        }
+                    }
+                    tzMinute = parseInt(date, offset, tzMinEnd);
+                    offset = tzMinEnd;
+                }
+                // else no minutes part
+            }
+
+            String timezoneOffset = date.substring(tzStart, offset);
 
             // When timezone has no minutes, we should append it, valid timezones are, for example: +00:00, +0000 and +00
 
-            offset += timezoneOffset.length();
             // 18-Jun-2015, tatu: Minor simplification, skip offset of "+0000"/"+00:00"
-            if ("+0000".equals(timezoneOffset) || "+00:00".equals(timezoneOffset)) {
+            if ("+0000".equals(timezoneOffset) || "+00:00".equals(timezoneOffset) || "+00".equals(timezoneOffset)
+                    || "-0000".equals(timezoneOffset) || "-00:00".equals(timezoneOffset) || "-00".equals(timezoneOffset)) {
                 timezone = TIMEZONE_UTC;
             } else {
-                // 18-Jun-2015, tatu: Looks like offsets only work from GMT, not UTC...
-                //    not sure why, but that's the way it looks. Further, Javadocs for
-                //    `java.util.TimeZone` specifically instruct use of GMT as base for
-                //    custom timezones... odd.
-                String timezoneId = "GMT" + timezoneOffset;
-                  String timezoneId = "UTC" + timezoneOffset;
+                // Build GMT offset string with colon if needed
+                StringBuilder timezoneIdBuilder = new StringBuilder("GMT");
+                timezoneIdBuilder.append(timezoneOffset.charAt(0)); // + or -
+                timezoneIdBuilder.append(String.format("%02d", Integer.parseInt(timezoneOffset.substring(1,3))));
+                if (timezoneOffset.length() == 3) {
+                    // only hours, add ":00"
+                    timezoneIdBuilder.append(":00");
+                } else if (timezoneOffset.length() == 5 && timezoneOffset.charAt(3) != ':') {
+                    // HHMM format -> insert colon between hour and minute
+                    timezoneIdBuilder.append(':').append(timezoneOffset.substring(3,5));
+                } else if (timezoneOffset.length() == 6) {
+                    // already HH:MM format
+                    timezoneIdBuilder.append(timezoneOffset.substring(3,6));
+                } else if (timezoneOffset.length() > 6) {
+                    // Possibly longer, append as is after the hour and colon
+                    timezoneIdBuilder.append(timezoneOffset.substring(3));
+                }
+
+                String timezoneId = timezoneIdBuilder.toString();
 
                 timezone = TimeZone.getTimeZone(timezoneId);
 
@@ -112,7 +176,7 @@
                      *   If it becomes a perf problem, add 'loose' comparison instead.
                      */
                     String cleaned = act.replace(":", "");
-                    if (!cleaned.equals(timezoneId)) {
+                    if (!cleaned.equals(timezoneId.replace(":", ""))) {
                         throw new IndexOutOfBoundsException("Mismatching time zone indicator: "+timezoneId+" given, resolves to "
                                 +timezone.getID());
                     }
@@ -143,12 +207,13 @@
     } catch (IllegalArgumentException e) {
         fail = e;
     }
-    String input = (date == null) ? null : ('"' + date + "'");
+    String input = (date == null) ? null : ('"' + date + '"');
     String msg = fail.getMessage();
     if (msg == null || msg.isEmpty()) {
-        msg = "("+fail.getClass().getName()+")";
+        msg = "(" + fail.getClass().getName() + ")";
     }
     ParseException ex = new ParseException("Failed to parse date [" + input + "]: " + msg, pos.getIndex());
     ex.initCause(fail);
     throw ex;
 }
+
