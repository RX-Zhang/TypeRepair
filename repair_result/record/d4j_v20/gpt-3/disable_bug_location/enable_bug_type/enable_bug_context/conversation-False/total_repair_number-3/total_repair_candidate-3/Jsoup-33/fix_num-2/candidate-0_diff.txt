--- 
+++ 
@@ -1,14 +1,25 @@
 Element insert(Token.StartTag startTag) {
-    // handle empty unknown tags
-    // when the spec expects an empty tag, will directly hit insertEmpty, so won't generate this fake end tag.
+    // handle empty known tags and unknown self-closing tags
+    Tag tag = Tag.valueOf(startTag.name());
     if (startTag.isSelfClosing()) {
         Element el = insertEmpty(startTag);
-        stack.add(el);
-        tokeniser.emit(new Token.EndTag(el.tagName()));  // ensure we get out of whatever state we are in. emitted for yielded processing
+        // For known self-closing tags, do NOT add to stack or emit end tag here;
+        // For unknown tags, insertEmpty sets selfClosing and acknowledges tokeniser flag.
+        if (!tag.isKnownTag()) {
+            stack.add(el);
+            tokeniser.emit(new Token.EndTag(el.tagName()));  // ensure we get out of whatever state we are in. emitted for yielded processing
+        } else if (tag.isSelfClosing()) {
+            // Known self-closing tag: do nothing here (insertEmpty does acknowledge)
+            // We do NOT add to stack or emit end tag after insertEmpty
+        } else {
+            // For known tags that are not self-closing, treat as normal start tag:
+            stack.add(el);
+        }
         return el;
     }
-    
-    Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);
+
+    Element el = new Element(tag, baseUri, startTag.attributes);
     insert(el);
     return el;
 }
+
