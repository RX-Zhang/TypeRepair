--- 
+++ 
@@ -25,7 +25,7 @@
 
         // if the value has no time component (and no time zone), we are done
         boolean hasT = checkOffset(date, offset, 'T');
-        
+
         if (!hasT && (date.length() <= offset)) {
             Calendar calendar = new GregorianCalendar(year, month - 1, day);
 
@@ -54,7 +54,7 @@
                     // milliseconds can be optional in the format
                     if (checkOffset(date, offset, '.')) {
                         offset += 1;
-                        int endOffset = indexOfNonDigit(date, offset + 1); // assume at least one digit
+                        int endOffset = indexOfNonDigit(date, offset); // fixed: start at offset, not offset + 1
                         int parseEndOffset = Math.min(endOffset, offset + 3); // parse up to 3 digits
                         int fraction = parseInt(date, offset, parseEndOffset);
                         // compensate for "missing" digits
@@ -86,40 +86,40 @@
             timezone = TIMEZONE_UTC;
             offset += 1;
         } else if (timezoneIndicator == '+' || timezoneIndicator == '-') {
+            // parse timezone offset differently to handle +01 or +0100 or +01:00 formats
             String timezoneOffset = date.substring(offset);
 
-            // When timezone has no minutes, we should append it, valid timezones are, for example: +00:00, +0000 and +00
+            // Normalize timezoneOffset to handle cases like +01 (add ":00" to get +01:00)
+            if (timezoneOffset.length() == 3) { // e.g. "+01" or "-05"
+                timezoneOffset = timezoneOffset + ":00";
+            } else if (timezoneOffset.length() == 5 && timezoneOffset.charAt(3) != ':') {
+                // e.g. "+0100" -> convert to "+01:00"
+                timezoneOffset = timezoneOffset.substring(0, 3) + ":" + timezoneOffset.substring(3, 5);
+            }
 
             offset += timezoneOffset.length();
-            // 18-Jun-2015, tatu: Minor simplification, skip offset of "+0000"/"+00:00"
-            if ("+0000".equals(timezoneOffset) || "+00:00".equals(timezoneOffset)) {
+
+            if ("+00:00".equals(timezoneOffset) || "+0000".equals(timezoneOffset) || "+00".equals(timezoneOffset)) {
                 timezone = TIMEZONE_UTC;
             } else {
-                // 18-Jun-2015, tatu: Looks like offsets only work from GMT, not UTC...
-                //    not sure why, but that's the way it looks. Further, Javadocs for
-                //    `java.util.TimeZone` specifically instruct use of GMT as base for
-                //    custom timezones... odd.
+                // "GMT" is required prefix in TimeZone.getTimeZone for offsets
                 String timezoneId = "GMT" + timezoneOffset;
-                  String timezoneId = "UTC" + timezoneOffset;
 
                 timezone = TimeZone.getTimeZone(timezoneId);
 
                 String act = timezone.getID();
                 if (!act.equals(timezoneId)) {
-                    /* 22-Jan-2015, tatu: Looks like canonical version has colons, but we may be given
-                     *    one without. If so, don't sweat.
-                     *   Yes, very inefficient. Hopefully not hit often.
-                     *   If it becomes a perf problem, add 'loose' comparison instead.
-                     */
-                    String cleaned = act.replace(":", "");
-                    if (!cleaned.equals(timezoneId)) {
-                        throw new IndexOutOfBoundsException("Mismatching time zone indicator: "+timezoneId+" given, resolves to "
-                                +timezone.getID());
+                    // try cleaning colons for comparison
+                    String cleanedAct = act.replace(":", "");
+                    String cleanedId = timezoneId.replace(":", "");
+                    if (!cleanedAct.equals(cleanedId)) {
+                        throw new IndexOutOfBoundsException("Mismatching time zone indicator: " + timezoneId + " given, resolves to "
+                                + timezone.getID());
                     }
                 }
             }
         } else {
-            throw new IndexOutOfBoundsException("Invalid time zone indicator '" + timezoneIndicator+"'");
+            throw new IndexOutOfBoundsException("Invalid time zone indicator '" + timezoneIndicator + "'");
         }
 
         Calendar calendar = new GregorianCalendar(timezone);
@@ -143,12 +143,13 @@
     } catch (IllegalArgumentException e) {
         fail = e;
     }
-    String input = (date == null) ? null : ('"' + date + "'");
+    String input = (date == null) ? null : ('"' + date + '"');
     String msg = fail.getMessage();
     if (msg == null || msg.isEmpty()) {
-        msg = "("+fail.getClass().getName()+")";
+        msg = "(" + fail.getClass().getName() + ")";
     }
     ParseException ex = new ParseException("Failed to parse date [" + input + "]: " + msg, pos.getIndex());
     ex.initCause(fail);
     throw ex;
 }
+
