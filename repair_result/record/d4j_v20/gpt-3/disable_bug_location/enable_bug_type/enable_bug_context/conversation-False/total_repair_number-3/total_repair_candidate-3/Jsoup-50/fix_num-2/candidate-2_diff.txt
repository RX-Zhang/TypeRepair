--- 
+++ 
@@ -3,6 +3,58 @@
     Document doc = null;
 
     // look for BOM - overrides any other header or input
+    // Check for BOM at the start of byteData first, before any decoding
+    byteData.mark();
+    if (byteData.remaining() >= 2) {
+        int b0 = byteData.get() & 0xFF;
+        int b1 = byteData.get() & 0xFF;
+        // UTF-16BE BOM: 0xFE 0xFF
+        if (b0 == 0xFE && b1 == 0xFF) {
+            charsetName = "UTF-16BE";
+            byteData.reset();
+            docData = Charset.forName(charsetName).decode(byteData).toString();
+            doc = parser.parseInput(docData, baseUri);
+            doc.outputSettings().charset(charsetName);
+            return doc;
+        }
+        // UTF-16LE BOM: 0xFF 0xFE
+        if (b0 == 0xFF && b1 == 0xFE) {
+            charsetName = "UTF-16LE";
+            byteData.reset();
+            docData = Charset.forName(charsetName).decode(byteData).toString();
+            doc = parser.parseInput(docData, baseUri);
+            doc.outputSettings().charset(charsetName);
+            return doc;
+        }
+    }
+    byteData.reset();
+
+    if (byteData.remaining() >= 4) {
+        byteData.mark();
+        int b0 = byteData.get() & 0xFF;
+        int b1 = byteData.get() & 0xFF;
+        int b2 = byteData.get() & 0xFF;
+        int b3 = byteData.get() & 0xFF;
+        // UTF-32BE BOM: 0x00 0x00 0xFE 0xFF
+        if (b0 == 0x00 && b1 == 0x00 && b2 == 0xFE && b3 == 0xFF) {
+            charsetName = "UTF-32BE";
+            byteData.reset();
+            docData = Charset.forName(charsetName).decode(byteData).toString();
+            doc = parser.parseInput(docData, baseUri);
+            doc.outputSettings().charset(charsetName);
+            return doc;
+        }
+        // UTF-32LE BOM: 0xFF 0xFE 0x00 0x00
+        if (b0 == 0xFF && b1 == 0xFE && b2 == 0x00 && b3 == 0x00) {
+            charsetName = "UTF-32LE";
+            byteData.reset();
+            docData = Charset.forName(charsetName).decode(byteData).toString();
+            doc = parser.parseInput(docData, baseUri);
+            doc.outputSettings().charset(charsetName);
+            return doc;
+        }
+        byteData.reset();
+    }
 
     if (charsetName == null) { // determine from meta. safe parse as UTF-8
         // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
@@ -24,7 +76,7 @@
                 }
             }
 
-            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equalsIgnoreCase(defaultCharset)) { // need to re-decode
                 foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                 charsetName = foundCharset;
                 byteData.rewind();
@@ -49,3 +101,4 @@
     }
     return doc;
 }
+
