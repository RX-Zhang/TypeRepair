--- 
+++ 
@@ -1,23 +1,19 @@
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
-    long    result = 0;
-    int     end = offset + length;
-    int     start = offset;
+    long result = 0;
+    int end = offset + length;
+    int start = offset;
 
-    if (length < 2){
-        throw new IllegalArgumentException("Length "+length+" must be at least 2");
+    if (length < 2) {
+        throw new IllegalArgumentException("Length " + length + " must be at least 2");
     }
 
-    if (buffer[start] == 0) {
-        return 0L;
+    // Skip leading NULs and spaces
+    while (start < end && (buffer[start] == 0 || buffer[start] == ' ')) {
+        start++;
     }
 
-    // Skip leading spaces
-    while (start < end){
-        if (buffer[start] == ' '){
-            start++;
-        } else {
-            break;
-        }
+    if (start == end) {
+        return 0L;
     }
 
     // Trim all trailing NULs and spaces.
@@ -30,14 +26,13 @@
         trailer = buffer[end - 1];
     }
     if (start == end) {
-        throw new IllegalArgumentException(
-                exceptionMessage(buffer, offset, length, start, trailer));
+        return 0L;
     }
 
-    for ( ;start < end; start++) {
+    for (; start < end; start++) {
         final byte currentByte = buffer[start];
         // CheckStyle:MagicNumber OFF
-        if (currentByte < '0' || currentByte > '7'){
+        if (currentByte < '0' || currentByte > '7') {
             throw new IllegalArgumentException(
                     exceptionMessage(buffer, offset, length, start, currentByte));
         }
@@ -47,3 +42,4 @@
 
     return result;
 }
+
