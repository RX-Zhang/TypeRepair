--- 
+++ 
@@ -36,10 +36,10 @@
         builder.setAnySetter(constructAnySetter(ctxt, beanDesc, anySetterMethod));
     }
     else {
-    	anySetterField = beanDesc.findAnySetterField();
-    	if(anySetterField != null) {
-    		builder.setAnySetter(constructAnySetter(ctxt, beanDesc, anySetterField));
-    	}
+        anySetterField = beanDesc.findAnySetterField();
+        if(anySetterField != null) {
+            builder.setAnySetter(constructAnySetter(ctxt, beanDesc, anySetterField));
+        }
     }
     // NOTE: we do NOT add @JsonIgnore'd properties into blocked ones if there's any-setter
     // Implicit ones via @JsonIgnore and equivalent?
@@ -70,10 +70,7 @@
     // At which point we still have all kinds of properties; not all with mutators:
     for (BeanPropertyDefinition propDef : propDefs) {
         SettableBeanProperty prop = null;
-        /* 18-Oct-2013, tatu: Although constructor parameters have highest precedence,
-         *   we need to do linkage (as per [databind#318]), and so need to start with
-         *   other types, and only then create constructor parameter, if any.
-         */
+
         if (propDef.hasSetter()) {
             JavaType propertyType = propDef.getSetter().getParameterType(0);
             prop = constructSettableProperty(ctxt, beanDesc, propDef, propertyType);
@@ -81,25 +78,18 @@
             JavaType propertyType = propDef.getField().getType();
             prop = constructSettableProperty(ctxt, beanDesc, propDef, propertyType);
         } else if (useGettersAsSetters && propDef.hasGetter()) {
-            /* May also need to consider getters
-             * for Map/Collection properties; but with lowest precedence
-             */
+            // should only consider Collections and Maps, for now?
             AnnotatedMethod getter = propDef.getGetter();
-            // should only consider Collections and Maps, for now?
             Class<?> rawPropertyType = getter.getRawType();
             if (Collection.class.isAssignableFrom(rawPropertyType)
                     || Map.class.isAssignableFrom(rawPropertyType)) {
                 prop = constructSetterlessProperty(ctxt, beanDesc, propDef);
             }
         }
+
         // 25-Sep-2014, tatu: No point in finding constructor parameters for abstract types
         //   (since they are never used anyway)
         if (hasCreatorProps && propDef.hasConstructorParameter()) {
-            /* If property is passed via constructor parameter, we must
-             * handle things in special way. Not sure what is the most optimal way...
-             * for now, let's just call a (new) method in builder, which does nothing.
-             */
-            // but let's call a method just to allow custom builders to be aware...
             final String name = propDef.getName();
             CreatorProperty cprop = null;
             if (creatorProps != null) {
@@ -131,7 +121,6 @@
         if (prop != null) {
             Class<?>[] views = propDef.findViews();
             if (views == null) {
-                // one more twist: if default inclusion disabled, need to force empty set of views
                 if (!ctxt.isEnabled(MapperFeature.DEFAULT_VIEW_INCLUSION)) {
                     views = NO_VIEWS;
                 }
@@ -142,3 +131,4 @@
         }
     }
 }
+
