--- 
+++ 
@@ -25,7 +25,7 @@
 
         // if the value has no time component (and no time zone), we are done
         boolean hasT = checkOffset(date, offset, 'T');
-        
+
         if (!hasT && (date.length() <= offset)) {
             Calendar calendar = new GregorianCalendar(year, month - 1, day);
 
@@ -35,7 +35,7 @@
 
         if (hasT) {
 
-            // extract hours, minutes, seconds and milliseconds
+            // extract hours, minutes
             hour = parseInt(date, offset += 1, offset += 2);
             if (checkOffset(date, offset, ':')) {
                 offset += 1;
@@ -45,6 +45,7 @@
             if (checkOffset(date, offset, ':')) {
                 offset += 1;
             }
+
             // second and milliseconds can be optional
             if (date.length() > offset) {
                 char c = date.charAt(offset);
@@ -54,7 +55,7 @@
                     // milliseconds can be optional in the format
                     if (checkOffset(date, offset, '.')) {
                         offset += 1;
-                        int endOffset = indexOfNonDigit(date, offset + 1); // assume at least one digit
+                        int endOffset = indexOfNonDigit(date, offset);
                         int parseEndOffset = Math.min(endOffset, offset + 3); // parse up to 3 digits
                         int fraction = parseInt(date, offset, parseEndOffset);
                         // compensate for "missing" digits
@@ -86,40 +87,72 @@
             timezone = TIMEZONE_UTC;
             offset += 1;
         } else if (timezoneIndicator == '+' || timezoneIndicator == '-') {
-            String timezoneOffset = date.substring(offset);
+            // Parse timezone offset properly:
+            // Expected formats: +HH:mm, +HHmm, +HH
 
-            // When timezone has no minutes, we should append it, valid timezones are, for example: +00:00, +0000 and +00
+            int idx = offset + 1;
+            // Parse hour offset (two digits)
+            int tzHour = 0;
+            int tzMinute = 0;
 
-            offset += timezoneOffset.length();
-            // 18-Jun-2015, tatu: Minor simplification, skip offset of "+0000"/"+00:00"
-            if ("+0000".equals(timezoneOffset) || "+00:00".equals(timezoneOffset)) {
-                timezone = TIMEZONE_UTC;
+            // There must be at least 1 digit (hour)
+            int hourEnd = idx + 2 <= date.length() ? idx + 2 : date.length();
+            tzHour = parseInt(date, idx, hourEnd);
+
+            idx = hourEnd;
+
+            if (idx < date.length() && date.charAt(idx) == ':') {
+                // Format +HH:mm
+                idx++;
+                int minEnd = idx + 2 <= date.length() ? idx + 2 : date.length();
+                tzMinute = parseInt(date, idx, minEnd);
+                idx = minEnd;
+            } else if (idx + 2 <= date.length()) {
+                // Format +HHmm
+                tzMinute = parseInt(date, idx, idx + 2);
+                idx += 2;
             } else {
-                // 18-Jun-2015, tatu: Looks like offsets only work from GMT, not UTC...
-                //    not sure why, but that's the way it looks. Further, Javadocs for
-                //    `java.util.TimeZone` specifically instruct use of GMT as base for
-                //    custom timezones... odd.
-                String timezoneId = "GMT" + timezoneOffset;
-                  String timezoneId = "UTC" + timezoneOffset;
+                // Format +HH
+                tzMinute = 0;
+            }
 
-                timezone = TimeZone.getTimeZone(timezoneId);
+            offset = idx;
 
-                String act = timezone.getID();
-                if (!act.equals(timezoneId)) {
-                    /* 22-Jan-2015, tatu: Looks like canonical version has colons, but we may be given
-                     *    one without. If so, don't sweat.
-                     *   Yes, very inefficient. Hopefully not hit often.
-                     *   If it becomes a perf problem, add 'loose' comparison instead.
-                     */
-                    String cleaned = act.replace(":", "");
-                    if (!cleaned.equals(timezoneId)) {
-                        throw new IndexOutOfBoundsException("Mismatching time zone indicator: "+timezoneId+" given, resolves to "
-                                +timezone.getID());
-                    }
-                }
+            // Validate hour and minute ranges
+            if (tzHour < 0 || tzHour > 23) {
+                throw new IllegalArgumentException("Invalid time zone hour offset: " + tzHour);
             }
+            if (tzMinute < 0 || tzMinute > 59) {
+                throw new IllegalArgumentException("Invalid time zone minute offset: " + tzMinute);
+            }
+
+            int totalMinutes = tzHour * 60 + tzMinute;
+            if (timezoneIndicator == '-') {
+                totalMinutes = -totalMinutes;
+            }
+
+            // Construct timezone ID
+            StringBuilder timezoneId = new StringBuilder("GMT");
+            int absHours = Math.abs(totalMinutes / 60);
+            int absMinutes = Math.abs(totalMinutes % 60);
+            timezoneId.append(timezoneIndicator);
+            if (absHours < 10) timezoneId.append('0');
+            timezoneId.append(absHours);
+            timezoneId.append(':');
+            if (absMinutes < 10) timezoneId.append('0');
+            timezoneId.append(absMinutes);
+
+            timezone = TimeZone.getTimeZone(timezoneId.toString());
+
+            // Validate timezone ID matches constructed ID ignoring colon differences
+            String act = timezone.getID();
+            if (!act.equals(timezoneId.toString()) && !act.replace(":", "").equals(timezoneId.toString().replace(":", ""))) {
+                throw new IndexOutOfBoundsException("Mismatching time zone indicator: " + timezoneId + " given, resolves to "
+                        + timezone.getID());
+            }
+
         } else {
-            throw new IndexOutOfBoundsException("Invalid time zone indicator '" + timezoneIndicator+"'");
+            throw new IndexOutOfBoundsException("Invalid time zone indicator '" + timezoneIndicator + "'");
         }
 
         Calendar calendar = new GregorianCalendar(timezone);
@@ -143,12 +176,13 @@
     } catch (IllegalArgumentException e) {
         fail = e;
     }
-    String input = (date == null) ? null : ('"' + date + "'");
+    String input = (date == null) ? null : ('"' + date + '"');
     String msg = fail.getMessage();
     if (msg == null || msg.isEmpty()) {
-        msg = "("+fail.getClass().getName()+")";
+        msg = "(" + fail.getClass().getName() + ")";
     }
     ParseException ex = new ParseException("Failed to parse date [" + input + "]: " + msg, pos.getIndex());
     ex.initCause(fail);
     throw ex;
 }
+
