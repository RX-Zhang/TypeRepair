--- 
+++ 
@@ -42,17 +42,22 @@
           !thatParamType.isSubtype(thisParamType)) {
         return false;
       }
+    } else {
+      // if thisParamType == null but thatParamType != null, return false
+      if (thatParamType != null) {
+        return false;
+      }
     }
 
     boolean thisIsVarArgs = thisParam.isVarArgs();
     boolean thatIsVarArgs = thatParam.isVarArgs();
 
     // "that" can't be a supertype, because it's missing a required argument.
-      // NOTE(nicksantos): In our type system, we use {function(...?)} and
-      // {function(...NoType)} to to indicate that arity should not be
-      // checked. Strictly speaking, this is not a correct formulation,
-      // because now a sub-function can required arguments that are var_args
-      // in the super-function. So we special-case this.
+    // NOTE(nicksantos): In our type system, we use {function(...?)} and
+    // {function(...NoType)} to to indicate that arity should not be
+    // checked. Strictly speaking, this is not a correct formulation,
+    // because now a sub-function can required arguments that are var_args
+    // in the super-function. So we special-case this.
 
     // don't advance if we have variable arguments
     if (!thisIsVarArgs) {
@@ -69,7 +74,12 @@
     }
   }
 
-  // "that" can't be a supertype, because it's missing a required arguement.
+  // If there are leftover parameters in "that", that indicates "that"
+  // requires more parameters than "this" provides, so "this" is not a subtype.
+  if (thatParam != null) {
+    return false;
+  }
 
   return true;
 }
+
