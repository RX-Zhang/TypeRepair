--- 
+++ 
@@ -7,35 +7,31 @@
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
         if (meta != null) { // if not found, will keep utf-8 as best attempt
-            String foundCharset;
+            String foundCharset = null;
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
-                if (foundCharset == null && meta.hasAttr("charset")) {
-                    try {
-                        if (Charset.isSupported(meta.attr("charset"))) {
-                            foundCharset = meta.attr("charset");
-                        }
-                    } catch (IllegalCharsetNameException e) {
-                        foundCharset = null;
-                    }
+            }
+            if (foundCharset == null && meta.hasAttr("charset")) {
+                foundCharset = meta.attr("charset").trim().replaceAll("[\"']", "");
+                if (!foundCharset.isEmpty() && Charset.isSupported(foundCharset)) {
+                    // Valid charset found
+                } else {
+                    foundCharset = null; // Reset if not valid
                 }
-            } else {
-                foundCharset = meta.attr("charset");
             }
 
-            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
-                foundCharset = foundCharset.trim().replaceAll("[\"']", "");
+            if (foundCharset != null && !foundCharset.equals(defaultCharset)) { // need to re-decode
                 charsetName = foundCharset;
                 byteData.rewind();
                 docData = Charset.forName(foundCharset).decode(byteData).toString();
-                doc = null;
+                doc = null; // Reset doc to ensure re-parsing
             }
         }
     } else { // specified by content type header (or by user on file load)
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
         docData = Charset.forName(charsetName).decode(byteData).toString();
     }
-    // UTF-8 BOM indicator. takes precedence over everything else. rarely used. re-decodes incase above decoded incorrectly
+    // UTF-8 BOM indicator. takes precedence over everything else. rarely used. re-decodes in case above decoded incorrectly
     if (docData.length() > 0 && docData.charAt(0) == 65279) {
         byteData.rewind();
         docData = Charset.forName(defaultCharset).decode(byteData).toString();
@@ -48,3 +44,4 @@
     }
     return doc;
 }
+
