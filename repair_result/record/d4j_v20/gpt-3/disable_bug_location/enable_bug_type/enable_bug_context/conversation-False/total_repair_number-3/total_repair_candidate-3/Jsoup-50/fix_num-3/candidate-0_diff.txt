--- 
+++ 
@@ -3,10 +3,50 @@
     Document doc = null;
 
     // look for BOM - overrides any other header or input
+    if (charsetName == null) {
+        // Try to detect BOM first
+        byteData.mark();
+        if (byteData.remaining() >= 3) {
+            byte b1 = byteData.get();
+            byte b2 = byteData.get();
+            byte b3 = byteData.get();
+            byteData.reset();
+
+            // UTF-8 BOM
+            if ((b1 & 0xFF) == 0xEF && (b2 & 0xFF) == 0xBB && (b3 & 0xFF) == 0xBF) {
+                charsetName = "UTF-8";
+                byteData.position(byteData.position() + 3); // skip BOM
+            } 
+            // UTF-16BE BOM
+            else if ((b1 & 0xFF) == 0xFE && (b2 & 0xFF) == 0xFF) {
+                charsetName = "UTF-16BE";
+                byteData.position(byteData.position() + 2);
+            } 
+            // UTF-16LE BOM
+            else if ((b1 & 0xFF) == 0xFF && (b2 & 0xFF) == 0xFE) {
+                charsetName = "UTF-16LE";
+                byteData.position(byteData.position() + 2);
+            }
+            // UTF-32BE BOM
+            else if (byteData.remaining() >= 4) {
+                byte b4 = byteData.get(3);
+                if ((b1 & 0xFF) == 0x00 && (b2 & 0xFF) == 0x00 && (b3 & 0xFF) == 0xFE && (b4 & 0xFF) == 0xFF) {
+                    charsetName = "UTF-32BE";
+                    byteData.position(byteData.position() + 4);
+                } 
+                // UTF-32LE BOM
+                else if ((b1 & 0xFF) == 0xFF && (b2 & 0xFF) == 0xFE && (b3 & 0xFF) == 0x00 && (b4 & 0xFF) == 0x00) {
+                    charsetName = "UTF-32LE";
+                    byteData.position(byteData.position() + 4);
+                }
+            }
+        }
+    }
 
     if (charsetName == null) { // determine from meta. safe parse as UTF-8
-        // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
-        docData = Charset.forName(defaultCharset).decode(byteData).toString();
+        charsetName = defaultCharset;
+        byteData.rewind();
+        docData = Charset.forName(charsetName).decode(byteData).toString();
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
         if (meta != null) { // if not found, will keep utf-8 as best attempt
@@ -24,7 +64,7 @@
                 }
             }
 
-            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equalsIgnoreCase(defaultCharset)) { // need to re-decode
                 foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                 charsetName = foundCharset;
                 byteData.rewind();
@@ -34,18 +74,20 @@
         }
     } else { // specified by content type header (or by user on file load)
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
+        byteData.rewind();
         docData = Charset.forName(charsetName).decode(byteData).toString();
     }
+
     if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-        byteData.rewind();
-        docData = Charset.forName(defaultCharset).decode(byteData).toString();
+        // Strip BOM char from the string
         docData = docData.substring(1);
-        charsetName = defaultCharset;
         doc = null;
     }
+
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
         doc.outputSettings().charset(charsetName);
     }
     return doc;
 }
+
