--- 
+++ 
@@ -1,10 +1,10 @@
 protected int findWrapPos(String text, int width, int startPos)
 {
     int pos;
-    
+
     // the line ends before the max wrap pos or a new line char found
-    if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
-            || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
+    if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= startPos + width)
+            || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= startPos + width))
     {
         return pos + 1;
     }
@@ -13,14 +13,13 @@
         return -1;
     }
 
-
     // look for the last whitespace character before startPos+width
     pos = startPos + width;
 
     char c;
 
-    while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
-            && (c != '\n') && (c != '\r'))
+    while (pos > startPos && pos < text.length() &&
+           ((c = text.charAt(pos)) != ' ') && (c != '\n') && (c != '\r'))
     {
         --pos;
     }
@@ -30,13 +29,14 @@
     {
         return pos;
     }
-    
+
     // if we didn't find one, simply chop at startPos+width
     pos = startPos + width;
-    while ((pos <= text.length()) && ((c = text.charAt(pos)) != ' ')
-           && (c != '\n') && (c != '\r'))
+    while (pos < text.length() &&
+           ((c = text.charAt(pos)) != ' ') && (c != '\n') && (c != '\r'))
     {
         ++pos;
-    }        
+    }
     return pos == text.length() ? -1 : pos;
 }
+
