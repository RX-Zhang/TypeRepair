--- 
+++ 
@@ -1,12 +1,18 @@
 protected int findWrapPos(String text, int width, int startPos)
 {
     int pos;
-    
+
     // the line ends before the max wrap pos or a new line char found
-    if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
-            || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
+    int newLinePos = text.indexOf('\n', startPos);
+    int tabPos = text.indexOf('\t', startPos);
+
+    if ((newLinePos != -1 && newLinePos <= startPos + width) ||
+        (tabPos != -1 && tabPos <= startPos + width))
     {
-        return pos + 1;
+        return Math.min(
+            newLinePos != -1 && newLinePos <= startPos + width ? newLinePos : Integer.MAX_VALUE,
+            tabPos != -1 && tabPos <= startPos + width ? tabPos : Integer.MAX_VALUE
+        ) + 1;
     }
     else if (startPos + width >= text.length())
     {
@@ -19,7 +25,7 @@
 
     char c;
 
-    while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
+    while ((pos > startPos) && ((c = text.charAt(pos)) != ' ')
             && (c != '\n') && (c != '\r'))
     {
         --pos;
@@ -30,13 +36,15 @@
     {
         return pos;
     }
-    
-    // if we didn't find one, simply chop at startPos+width
+
+    // if we didn't find one, simply chop at startPos+width and move forward
     pos = startPos + width;
-    while ((pos <= text.length()) && ((c = text.charAt(pos)) != ' ')
+    int textLength = text.length();
+    while ((pos < textLength) && ((c = text.charAt(pos)) != ' ')
            && (c != '\n') && (c != '\r'))
     {
         ++pos;
-    }        
-    return pos == text.length() ? -1 : pos;
+    }
+    return pos == textLength ? -1 : pos;
 }
+
