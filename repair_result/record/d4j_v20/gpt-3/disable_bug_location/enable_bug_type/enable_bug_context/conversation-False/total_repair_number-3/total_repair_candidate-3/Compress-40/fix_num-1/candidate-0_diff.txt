--- 
+++ 
@@ -3,27 +3,37 @@
         throw new IllegalArgumentException("count must not be negative or greater than " + MAXIMUM_CACHE_SIZE);
     }
     while (bitsCachedSize < count) {
-        final long nextByte = in.read();
+        final int nextByte = in.read();
         if (nextByte < 0) {
-            return nextByte;
+            // Indicate EOF by returning -1 when no bits are left to read
+            if (bitsCachedSize == 0) {
+                return -1;
+            } else {
+                break;
+            }
         }
         if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
-            bitsCached |= (nextByte << bitsCachedSize);
+            bitsCached |= ((long)nextByte << bitsCachedSize);
         } else {
-            bitsCached <<= 8;
-            bitsCached |= nextByte;
+            bitsCached = (bitsCached << 8) | (nextByte & 0xFFL);
         }
         bitsCachedSize += 8;
     }
-        // bitsCachedSize >= 57 and left-shifting it 8 bits would cause an overflow
-    
+
+    if (bitsCachedSize < count) {
+        // Not enough bits available, return EOF
+        return -1;
+    }
+
     final long bitsOut;
-        if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
-            bitsOut = (bitsCached & MASKS[count]);
-            bitsCached >>>= count;
-        } else {
-            bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];
-        }
-        bitsCachedSize -= count;
+    if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
+        bitsOut = bitsCached & MASKS[count];
+        bitsCached >>>= count;
+    } else {
+        bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];
+        bitsCached &= MASKS[bitsCachedSize - count];
+    }
+    bitsCachedSize -= count;
     return bitsOut;
 }
+
