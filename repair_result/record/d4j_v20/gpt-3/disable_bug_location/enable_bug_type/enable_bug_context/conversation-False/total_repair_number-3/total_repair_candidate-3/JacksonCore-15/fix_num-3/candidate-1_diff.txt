--- 
+++ 
@@ -1,11 +1,12 @@
 public JsonToken nextToken() throws IOException
 {
-	//Check for _allowMultipleMatches - false and atleast there is one token - which is _currToken
-	// check for no buffered context _exposedContext - null
-	//If all the conditions matches then check for scalar / non-scalar property
-		//if not scalar and ended successfully, then return null
-		//else if scalar, and scalar not present in obj/array and !includePath and INCLUDE_ALL matched once
-		// then return null 
+    // Check for _allowMultipleMatches - false and at least there is one token - which is _currToken
+    // check for no buffered context _exposedContext - null
+    // If all the conditions matches then check for scalar / non-scalar property
+    //  if not scalar and ended successfully, then return null
+    // else if scalar, and scalar not present in obj/array and !includePath and INCLUDE_ALL matched once
+    // then return null 
+
     // Anything buffered?
     TokenFilterContext ctxt = _exposedContext;
 
@@ -19,23 +20,15 @@
             // all done with buffered stuff?
             if (ctxt == _headContext) {
                 _exposedContext = null;
-                if (ctxt.inArray()) {
+                // Normally, if in buffered context and finished, return current token from delegate if suitable
+                if (ctxt.inArray() || ctxt.inObject()) {
+                    // Could return current token from delegate if not START_ARRAY or START_OBJECT to avoid infinite loop
                     t = delegate.getCurrentToken();
-s this guaranteed to work without further checks?
-                      if (t != JsonToken.START_ARRAY) {
-                    _currToken = t;
-                    return t;
-                }
-
-                // Almost! Most likely still have the current token;
-                // with the sole exception of 
-                /*
-                t = delegate.getCurrentToken();
-                if (t != JsonToken.FIELD_NAME) {
-                    _currToken = t;
-                    return t;
-                }
-                */
+                    if (t != JsonToken.START_ARRAY && t != JsonToken.START_OBJECT) {
+                        _currToken = t;
+                        return t;
+                    }
+                }
                 break;
             }
             // If not, traverse down the context chain
@@ -56,7 +49,7 @@
 
     // otherwise... to include or not?
     TokenFilter f;
-    
+
     switch (t.id()) {
     case ID_START_ARRAY:
         f = _itemFilter;
@@ -83,7 +76,7 @@
             return (_currToken = t);
         }
         _headContext = _headContext.createChildArrayContext(f, false);
-        
+
         // Also: only need buffering if parent path to be included
         if (_includePath) {
             t = _nextTokenWithBuffering(_headContext);
@@ -194,12 +187,24 @@
     default: // scalar value
         f = _itemFilter;
         if (f == TokenFilter.INCLUDE_ALL) {
+            // Here we add the fix to prevent multiple matches when _allowMultipleMatches == false
+            if (!_allowMultipleMatches && _matchCount > 0) {
+                // Skip this token, try next
+                break;
+            }
+            _matchCount++;
             return (_currToken = t);
         }
         if (f != null) {
             f = _headContext.checkValue(f);
             if ((f == TokenFilter.INCLUDE_ALL)
                     || ((f != null) && f.includeValue(delegate))) {
+                // Similar check to prevent multiple matches if not allowed
+                if (!_allowMultipleMatches && _matchCount > 0) {
+                    // Skip this token, try next
+                    break;
+                }
+                _matchCount++;
                 return (_currToken = t);
             }
         }
@@ -210,3 +215,4 @@
     // We get here if token was not yet found; offlined handling
     return _nextToken2();
 }
+
