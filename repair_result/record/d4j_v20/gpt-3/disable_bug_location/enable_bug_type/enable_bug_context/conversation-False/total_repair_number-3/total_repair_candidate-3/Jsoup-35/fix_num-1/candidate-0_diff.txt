--- 
+++ 
@@ -3,7 +3,6 @@
         case Character: {
             Token.Character c = t.asCharacter();
             if (c.getData().equals(nullString)) {
-                // todo confirm that check
                 tb.error(this);
                 return false;
             } else if (isWhitespace(c)) {
@@ -29,7 +28,6 @@
             String name = startTag.name();
             if (name.equals("html")) {
                 tb.error(this);
-                // merge attributes onto real html
                 Element html = tb.getStack().getFirst();
                 for (Attribute attribute : startTag.getAttributes()) {
                     if (!html.hasAttr(attribute.getKey()))
@@ -41,7 +39,6 @@
                 tb.error(this);
                 LinkedList<Element> stack = tb.getStack();
                 if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals("body"))) {
-                    // only in fragment case
                     return false; // ignore
                 } else {
                     tb.framesetOk(false);
@@ -55,7 +52,6 @@
                 tb.error(this);
                 LinkedList<Element> stack = tb.getStack();
                 if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals("body"))) {
-                    // only in fragment case
                     return false; // ignore
                 } else if (!tb.framesetOk()) {
                     return false; // ignore frameset
@@ -63,7 +59,6 @@
                     Element second = stack.get(1);
                     if (second.parent() != null)
                         second.remove();
-                    // pop up to html element
                     while (stack.size() > 1)
                         stack.removeLast();
                     tb.insert(startTag);
@@ -91,7 +86,6 @@
                     tb.process(new Token.EndTag("p"));
                 }
                 tb.insert(startTag);
-                // todo: ignore LF if next token
                 tb.framesetOk(false);
             } else if (name.equals("form")) {
                 if (tb.getFormElement() != null) {
@@ -139,10 +133,9 @@
                     tb.process(new Token.EndTag("p"));
                 }
                 tb.insert(startTag);
-                tb.tokeniser.transition(TokeniserState.PLAINTEXT); // once in, never gets out
+                tb.tokeniser.transition(TokeniserState.PLAINTEXT);
             } else if (name.equals("button")) {
                 if (tb.inButtonScope("button")) {
-                    // close and reprocess
                     tb.error(this);
                     tb.process(new Token.EndTag("button"));
                     tb.process(startTag);
@@ -155,8 +148,6 @@
                 if (tb.getActiveFormattingElement("a") != null) {
                     tb.error(this);
                     tb.process(new Token.EndTag("a"));
-
-                    // still on stack?
                     Element remainingA = tb.getFromStack("a");
                     if (remainingA != null) {
                         tb.removeFromActiveFormattingElements(remainingA);
@@ -210,11 +201,9 @@
                 tb.insertEmpty(startTag);
                 tb.framesetOk(false);
             } else if (name.equals("image")) {
-                // we're not supposed to ask.
                 startTag.name("img");
                 return tb.process(startTag);
             } else if (name.equals("isindex")) {
-                // how much do we care about the early 90s?
                 tb.error(this);
                 if (tb.getFormElement() != null)
                     return false;
@@ -227,14 +216,12 @@
                 }
                 tb.process(new Token.StartTag("hr"));
                 tb.process(new Token.StartTag("label"));
-                // hope you like english.
                 String prompt = startTag.attributes.hasKey("prompt") ?
                         startTag.attributes.get("prompt") :
                         "This is a searchable index. Enter search keywords: ";
 
                 tb.process(new Token.Character(prompt));
 
-                // input
                 Attributes inputAttribs = new Attributes();
                 for (Attribute attr : startTag.attributes) {
                     if (!StringUtil.in(attr.getKey(), "name", "action", "prompt"))
@@ -247,7 +234,6 @@
                 tb.process(new Token.EndTag("form"));
             } else if (name.equals("textarea")) {
                 tb.insert(startTag);
-                // todo: If the next token is a U+000A LINE FEED (LF) character token, then ignore that token and move on to the next one. (Newlines at the start of textarea elements are ignored as an authoring convenience.)
                 tb.tokeniser.transition(TokeniserState.Rcdata);
                 tb.markInsertionMode();
                 tb.framesetOk(false);
@@ -263,7 +249,6 @@
                 tb.framesetOk(false);
                 handleRawtext(startTag, tb);
             } else if (name.equals("noembed")) {
-                // also handle noscript if script enabled
                 handleRawtext(startTag, tb);
             } else if (name.equals("select")) {
                 tb.reconstructFormattingElements();
@@ -285,18 +270,16 @@
                     tb.generateImpliedEndTags();
                     if (!tb.currentElement().nodeName().equals("ruby")) {
                         tb.error(this);
-                        tb.popStackToBefore("ruby"); // i.e. close up to but not include name
+                        tb.popStackToBefore("ruby");
                     }
                     tb.insert(startTag);
                 }
             } else if (name.equals("math")) {
                 tb.reconstructFormattingElements();
-                // todo: handle A start tag whose tag name is "math" (i.e. foreign, mathml)
                 tb.insert(startTag);
                 tb.tokeniser.acknowledgeSelfClosingFlag();
             } else if (name.equals("svg")) {
                 tb.reconstructFormattingElements();
-                // todo: handle A start tag whose tag name is "svg" (xlink, svg)
                 tb.insert(startTag);
                 tb.tokeniser.acknowledgeSelfClosingFlag();
             } else if (StringUtil.in(name,
@@ -317,7 +300,6 @@
                     tb.error(this);
                     return false;
                 } else {
-                    // todo: error if stack contains something not dd, dt, li, optgroup, option, p, rp, rt, tbody, td, tfoot, th, thead, tr, body, html
                     tb.transition(AfterBody);
                 }
             } else if (name.equals("html")) {
@@ -328,9 +310,7 @@
                     "address", "article", "aside", "blockquote", "button", "center", "details", "dir", "div",
                     "dl", "fieldset", "figcaption", "figure", "footer", "header", "hgroup", "listing", "menu",
                     "nav", "ol", "pre", "section", "summary", "ul")) {
-                // todo: refactor these lookups
                 if (!tb.inScope(name)) {
-                    // nothing to close
                     tb.error(this);
                     return false;
                 } else {
@@ -349,13 +329,12 @@
                     tb.generateImpliedEndTags();
                     if (!tb.currentElement().nodeName().equals(name))
                         tb.error(this);
-                    // remove currentForm from stack. will shift anything under up.
                     tb.removeFromStack(currentForm);
                 }
             } else if (name.equals("p")) {
                 if (!tb.inButtonScope(name)) {
                     tb.error(this);
-                    tb.process(new Token.StartTag(name)); // if no p to close, creates an empty <p></p>
+                    tb.process(new Token.StartTag(name));
                     return tb.process(endTag);
                 } else {
                     tb.generateImpliedEndTags(name);
@@ -393,12 +372,8 @@
                         tb.error(this);
                     tb.popStackToClose("h1", "h2", "h3", "h4", "h5", "h6");
                 }
-            } else if (name.equals("sarcasm")) {
-                // *sigh*
-                return anyOtherEndTag(t, tb);
             } else if (StringUtil.in(name,
                     "a", "b", "big", "code", "em", "font", "i", "nobr", "s", "small", "strike", "strong", "tt", "u")) {
-                // Adoption Agency Algorithm.
                 OUTER:
                 for (int i = 0; i < 8; i++) {
                     Element formatEl = tb.getActiveFormattingElement(name);
@@ -418,8 +393,6 @@
                     Element commonAncestor = null;
                     boolean seenFormattingElement = false;
                     LinkedList<Element> stack = tb.getStack();
-                    // the spec doesn't limit to < 64, but in degenerate cases (9000+ stack depth) this prevents
-                    // run-aways
                     for (int si = 0; si < stack.size() && si < 64; si++) {
                         Element el = stack.get(si);
                         if (el == formatEl) {
@@ -436,15 +409,13 @@
                         return true;
                     }
 
-                    // todo: Let a bookmark note the position of the formatting element in the list of active formatting elements relative to the elements on either side of it in the list.
-                    // does that mean: int pos of format el in list?
                     Element node = furthestBlock;
                     Element lastNode = furthestBlock;
                     INNER:
                     for (int j = 0; j < 3; j++) {
                         if (tb.onStack(node))
                             node = tb.aboveOnStack(node);
-                        if (!tb.isInActiveFormattingElements(node)) { // note no bookmark check
+                        if (!tb.isInActiveFormattingElements(node)) {
                             tb.removeFromStack(node);
                             continue INNER;
                         } else if (node == formatEl)
@@ -456,8 +427,6 @@
                         node = replacement;
 
                         if (lastNode == furthestBlock) {
-                            // todo: move the aforementioned bookmark to be immediately after the new node in the list of active formatting elements.
-                            // not getting how this bookmark both straddles the element above, but is inbetween here...
                         }
                         if (lastNode.parent() != null)
                             lastNode.remove();
@@ -479,11 +448,10 @@
                     Element adopter = new Element(formatEl.tag(), tb.getBaseUri());
                     Node[] childNodes = furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()]);
                     for (Node childNode : childNodes) {
-                        adopter.appendChild(childNode); // append will reparent. thus the clone to avoid concurrent mod.
+                        adopter.appendChild(childNode);
                     }
                     furthestBlock.appendChild(adopter);
                     tb.removeFromActiveFormattingElements(formatEl);
-                    // todo: insert the new element into the list of active formatting elements at the position of the aforementioned bookmark.
                     tb.removeFromStack(formatEl);
                     tb.insertOnStackAfter(furthestBlock, adopter);
                 }
@@ -509,9 +477,8 @@
 
             break;
         case EOF:
-            // todo: error if stack contains something not dd, dt, li, p, tbody, td, tfoot, th, thead, tr, body, html
-            // stop parsing
             break;
     }
     return true;
 }
+
