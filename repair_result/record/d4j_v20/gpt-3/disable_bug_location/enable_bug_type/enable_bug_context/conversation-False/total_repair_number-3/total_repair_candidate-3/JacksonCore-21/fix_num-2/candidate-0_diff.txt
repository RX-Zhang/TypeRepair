--- 
+++ 
@@ -3,24 +3,28 @@
     // 23-May-2017, tatu: To be honest, code here is rather hairy and I don't like all
     //    conditionals; and it seems odd to return `null` but NOT considering input
     //    as closed... would love a rewrite to simplify/clear up logic here.
-    
+
     // Check for _allowMultipleMatches - false and at least there is one token - which is _currToken
     // check for no buffered context _exposedContext - null
     // If all the conditions matches then check for scalar / non-scalar property
     if (!_allowMultipleMatches && (_currToken != null) && (_exposedContext == null)) {
-        //if not scalar and ended successfully, and !includePath, then return null
-            if (_currToken.isStructEnd()) {
-                if (_headContext.isStartHandled()) {
-                    return (_currToken = null);
-                }
-            } else if (_currToken.isScalarValue()) {
-                //else if scalar, and scalar not present in obj/array and !includePath and INCLUDE_ALL matched once
-                // then return null 
-                if (!_headContext.isStartHandled() && (_itemFilter == TokenFilter.INCLUDE_ALL)) {
-                    return (_currToken = null);
-                }
-        }
-    }
+        // If token is end of structure and start was handled, no more tokens to return
+        if (_currToken.isStructEnd()) {
+            if (_headContext.isStartHandled()) {
+                return (_currToken = null);
+            }
+        } else if (_currToken.isScalarValue()) {
+            // If scalar and start not handled yet but itemFilter is INCLUDE_ALL,
+            // means no more tokens to emit
+            if (_headContext.isStartHandled() || (_itemFilter != TokenFilter.INCLUDE_ALL)) {
+                // Do nothing, continue to next token
+            } else {
+                // if start not handled AND INCLUDE_ALL matched once, end
+                return (_currToken = null);
+            }
+        }
+    }
+
     // Anything buffered?
     TokenFilterContext ctxt = _exposedContext;
 
@@ -36,21 +40,15 @@
                 _exposedContext = null;
                 if (ctxt.inArray()) {
                     t = delegate.getCurrentToken();
-s this guaranteed to work without further checks?
-                      if (t != JsonToken.START_ARRAY) {
-                    _currToken = t;
-                    return t;
-                }
-
-                // Almost! Most likely still have the current token;
-                // with the sole exception of 
-                /*
-                t = delegate.getCurrentToken();
-                if (t != JsonToken.FIELD_NAME) {
-                    _currToken = t;
-                    return t;
-                }
-                */
+                    // Safeguard for unexpected tokens; only allow START_ARRAY
+                    if (t != JsonToken.START_ARRAY) {
+                        _currToken = t;
+                        return t;
+                    }
+
+                    // When current token is START_ARRAY, likely need to continue,
+                    // so break and continue normal processing
+                }
                 break;
             }
             // If not, traverse down the context chain
@@ -72,7 +70,7 @@
 
     // otherwise... to include or not?
     TokenFilter f;
-    
+
     switch (t.id()) {
     case ID_START_ARRAY:
         f = _itemFilter;
@@ -99,7 +97,7 @@
             return (_currToken = t);
         }
         _headContext = _headContext.createChildArrayContext(f, false);
-        
+
         // Also: only need buffering if parent path to be included
         if (_includePath) {
             t = _nextTokenWithBuffering(_headContext);
@@ -226,3 +224,4 @@
     // We get here if token was not yet found; offlined handling
     return _nextToken2();
 }
+
