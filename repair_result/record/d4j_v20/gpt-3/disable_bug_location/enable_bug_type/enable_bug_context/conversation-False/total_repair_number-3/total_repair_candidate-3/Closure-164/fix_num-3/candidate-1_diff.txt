--- 
+++ 
@@ -9,7 +9,7 @@
   // Section 3.4.7: Subtyping Function Types.
 
   // this.returnType <: that.returnType (covariant)
-  if (!this.returnType.isSubtype(that.returnType)) {
+  if (!that.returnType.isSubtype(this.returnType)) {
     return false;
   }
 
@@ -24,7 +24,7 @@
   // function f(number, number) {}
   // function g(number) {}
   //
-  // Then f *should* not be a subtype of g, and g *should* not be
+  // Then f *should* not be a subtype of g, and g ** not be
   // a subtype of f. But in practice, we do not implement it this way.
   // We want to support the use case where you can pass g where f is
   // expected, and pretend that g ignores the second argument.
@@ -39,7 +39,7 @@
     JSType thatParamType = thatParam.getJSType();
     if (thisParamType != null) {
       if (thatParamType == null ||
-          !thatParamType.isSubtype(thisParamType)) {
+          !thisParamType.isSubtype(thatParamType)) {
         return false;
       }
     }
@@ -48,11 +48,11 @@
     boolean thatIsVarArgs = thatParam.isVarArgs();
 
     // "that" can't be a supertype, because it's missing a required argument.
-      // NOTE(nicksantos): In our type system, we use {function(...?)} and
-      // {function(...NoType)} to to indicate that arity should not be
-      // checked. Strictly speaking, this is not a correct formulation,
-      // because now a sub-function can required arguments that are var_args
-      // in the super-function. So we special-case this.
+    // NOTE(nicksantos): In our type system, we use {function(...?)} and
+    // {function(...NoType)} to indicate that arity should not be
+    // checked. Strictly speaking, this is not a correct formulation,
+    // because now a sub-function can require arguments that are var_args
+    // in the super-function. So we special-case this.
 
     // don't advance if we have variable arguments
     if (!thisIsVarArgs) {
@@ -69,7 +69,14 @@
     }
   }
 
-  // "that" can't be a supertype, because it's missing a required arguement.
+  // If 'that' has more required params than 'this', then 'that' is not a supertype.
+  while (thatParam != null) {
+    if (!thatParam.isOptionalArg() && !thatParam.isVarArgs()) {
+      return false;
+    }
+    thatParam = thatParam.getNext();
+  }
 
   return true;
 }
+
