--- 
+++ 
@@ -6,7 +6,24 @@
     final int end = offset + len;
 
     final char delimChar = getDelimiter();
-    final char quoteChar = getQuoteCharacter().charValue();
+    final Character quoteCharObj = getQuoteCharacter();
+    // If quoteChar is null, no quoting can occur, so treat accordingly
+    if (quoteCharObj == null) {
+        // If QuoteMode is NONE, just print and escape
+        QuoteMode quoteModePolicyNullQuote = getQuoteMode();
+        if (quoteModePolicyNullQuote == null) {
+            quoteModePolicyNullQuote = QuoteMode.MINIMAL;
+        }
+        if (quoteModePolicyNullQuote == QuoteMode.NONE) {
+            printAndEscape(value, offset, len, out);
+            return;
+        } else {
+            // No quote char - treat as no quoting, just print the value
+            out.append(value, start, end);
+            return;
+        }
+    }
+    final char quoteChar = quoteCharObj.charValue();
 
     QuoteMode quoteModePolicy = getQuoteMode();
     if (quoteModePolicy == null) {
@@ -35,8 +52,8 @@
         } else {
             char c = value.charAt(pos);
 
-            // RFC4180 (https://tools.ietf.org/html/rfc4180) TEXTDATA =  %x20-21 / %x23-2B / %x2D-7E
-            if (newRecord && (c < '0' || c > '9' && c < 'A' || c > 'Z' && c < 'a' || c > 'z')) {
+            // Correct the logical expression grouping here
+            if (newRecord && ((c < '0') || (c > '9' && c < 'A') || (c > 'Z' && c < 'a') || (c > 'z'))) {
                 quote = true;
             } else if (c <= COMMENT) {
                 // Some other chars at the start of a value caused the parser to fail, so for now
@@ -90,11 +107,8 @@
         final char c = value.charAt(pos);
         if (c == quoteChar) {
             // write out the chunk up until this point
-
-            // add 1 to the length to write out the encapsulator also
             out.append(value, start, pos + 1);
-            // put the next starting position on the encapsulator so we will
-            // write it out again with the next string (effectively doubling it)
+            // put the next starting position on the quoteChar to double it
             start = pos;
         }
         pos++;
@@ -104,3 +118,4 @@
     out.append(value, start, pos);
     out.append(quoteChar);
 }
+
