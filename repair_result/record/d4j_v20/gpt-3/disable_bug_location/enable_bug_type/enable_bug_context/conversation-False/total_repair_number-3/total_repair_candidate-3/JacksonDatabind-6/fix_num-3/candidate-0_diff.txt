--- 
+++ 
@@ -24,7 +24,7 @@
             df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);
         }
         // [JACKSON-334]: may be missing milliseconds... if so, add
-        if (dateStr.charAt(len-4) == ':') {
+        if (len > 4 && dateStr.charAt(len-4) == ':') {
             StringBuilder sb = new StringBuilder(dateStr);
             sb.insert(len-1, ".000");
             dateStr = sb.toString();
@@ -38,18 +38,42 @@
                 StringBuilder sb = new StringBuilder(dateStr);
                 sb.delete(len-3, len-2);
                 dateStr = sb.toString();
+                len = dateStr.length();
             } else if (c == '+' || c == '-') { // missing minutes
                 // let's just append '00'
                 dateStr += "00";
+                len = dateStr.length();
             }
             // Milliseconds partial or missing; and even seconds are optional
-            len = dateStr.length();
-            // remove 'T', '+'/'-' and 4-digit timezone-offset
-            c = dateStr.charAt(len-9);
-            if (Character.isDigit(c)) {
+            // check if milliseconds are missing or incomplete and add ".000" if needed
+            int timeStart = dateStr.indexOf('T');
+            int timeEnd = len - 5; // Start of timezone offset (e.g. +HHmm)
+            // Look for presence of '.' in time part to detect milliseconds presence
+            int dotIndex = dateStr.indexOf('.', timeStart);
+            if (dotIndex < 0 || dotIndex > timeEnd) {
+                // No milliseconds found, insert before timezone offset
                 StringBuilder sb = new StringBuilder(dateStr);
-                sb.insert(len-5, ".000");
+                sb.insert(timeEnd, ".000");
                 dateStr = sb.toString();
+                len = dateStr.length();
+            } else {
+                // milliseconds found, check length and pad if needed
+                int millisEnd = dateStr.indexOf('+', dotIndex);
+                if (millisEnd < 0) {
+                    millisEnd = dateStr.indexOf('-', dotIndex);
+                    if (millisEnd < 0) {
+                        millisEnd = len;
+                    }
+                }
+                int millisLen = millisEnd - dotIndex - 1;
+                if (millisLen < 3) {
+                    StringBuilder sb = new StringBuilder(dateStr);
+                    for (int i = 0; i < 3 - millisLen; i++) {
+                        sb.insert(millisEnd, '0');
+                    }
+                    dateStr = sb.toString();
+                    len = dateStr.length();
+                }
             }
             df = _formatISO8601;
             if (_formatISO8601 == null) {
@@ -61,7 +85,7 @@
             // And possible also millisecond part if missing
             int timeLen = len - dateStr.lastIndexOf('T') - 1;
             if (timeLen <= 8) {
-                    sb.append(".000");
+                sb.append(".000");
             }
             sb.append('Z');
             dateStr = sb.toString();
@@ -74,3 +98,4 @@
     }
     return df.parse(dateStr, pos);
 }
+
