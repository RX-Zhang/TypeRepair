--- 
+++ 
@@ -1,37 +1,48 @@
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
-    long    result = 0;
+    if (length < 2) {
+        throw new IllegalArgumentException("Length must be at least 2");
+    }
+
+    long result = 0;
     boolean stillPadding = true;
-    int     end = offset + length;
-    int     start = offset;
+    int end = offset + length;
+    int i = offset;
 
-    for (int i = start; i < end; i++){
+    for (; i < end; i++) {
         final byte currentByte = buffer[i];
         if (currentByte == 0) {
+            // Valid trailing NUL, number ended
             break;
         }
-
-    // Skip leading spaces
-        if (currentByte == (byte) ' ' || currentByte == '0') {
+        // Skip leading spaces and zeros
+        if (currentByte == (byte) ' ' || currentByte == (byte) '0') {
             if (stillPadding) {
-               continue;
-        }
+                continue;
+            }
             if (currentByte == (byte) ' ') {
-            break;
+                // Trailing space, number ended
+                break;
             }
         }
 
-    // Must have trailing NUL or space
-    // May have additional NUL or space
+        stillPadding = false;
 
-        stillPadding = false;
-        // CheckStyle:MagicNumber OFF
-        if (currentByte < '0' || currentByte > '7'){
-            throw new IllegalArgumentException(
-                    exceptionMessage(buffer, offset, length, start, currentByte));
+        // Check for valid octal digit
+        if (currentByte < '0' || currentByte > '7') {
+            throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, i, currentByte));
         }
-        result = (result << 3) + (currentByte - '0'); // convert from ASCII
-        // CheckStyle:MagicNumber ON
+
+        result = (result << 3) + (currentByte - '0');
+    }
+
+    // After parsing digits, all remaining bytes must be NUL or spaces
+    for (; i < end; i++) {
+        final byte currentByte = buffer[i];
+        if (currentByte != 0 && currentByte != (byte) ' ') {
+            throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, i, currentByte));
+        }
     }
 
     return result;
 }
+
