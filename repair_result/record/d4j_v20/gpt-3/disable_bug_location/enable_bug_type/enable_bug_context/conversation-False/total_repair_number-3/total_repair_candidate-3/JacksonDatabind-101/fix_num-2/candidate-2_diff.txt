--- 
+++ 
@@ -4,7 +4,7 @@
     // 01-Dec-2016, tatu: Note: This IS legal to call, but only when unwrapped
     //    value itself is NOT passed via `CreatorProperty` (which isn't supported).
     //    Ok however to pass via setter or field.
-    
+
     final PropertyBasedCreator creator = _propertyBasedCreator;
     PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);
 
@@ -30,16 +30,17 @@
                 }
                 // [databind#631]: Assign current value, to be accessible by custom serializers
                 p.setCurrentValue(bean);
-                // if so, need to copy all remaining tokens into buffer
+                // if so, need to copy all remaining tokens into buffer,
+                // AND to apply buffered properties which are unwrapped
                 while (t == JsonToken.FIELD_NAME) {
-                    // NOTE: do NOT skip name as it needs to be copied; `copyCurrentStructure` does that
+                    String bufferedName = p.getCurrentName();
                     p.nextToken();
+                    tokens.writeFieldName(bufferedName);
                     tokens.copyCurrentStructure(p);
                     t = p.nextToken();
                 }
-                // 28-Aug-2018, tatu: Let's add sanity check here, easier to catch off-by-some
-                //    problems if we maintain invariants
                 tokens.writeEndObject();
+
                 if (bean.getClass() != _beanType.getRawClass()) {
                     // !!! 08-Jul-2011, tatu: Could probably support; but for now
                     //   it's too complicated, so bail out
@@ -97,5 +98,7 @@
         wrapInstantiationProblem(e, ctxt);
         return null; // never gets here
     }
+    tokens.writeEndObject();
     return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
 }
+
