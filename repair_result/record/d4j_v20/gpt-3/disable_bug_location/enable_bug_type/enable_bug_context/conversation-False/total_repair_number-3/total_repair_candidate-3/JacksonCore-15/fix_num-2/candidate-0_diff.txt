--- 
+++ 
@@ -1,11 +1,11 @@
 public JsonToken nextToken() throws IOException
 {
-	//Check for _allowMultipleMatches - false and atleast there is one token - which is _currToken
-	// check for no buffered context _exposedContext - null
-	//If all the conditions matches then check for scalar / non-scalar property
-		//if not scalar and ended successfully, then return null
-		//else if scalar, and scalar not present in obj/array and !includePath and INCLUDE_ALL matched once
-		// then return null 
+    // Check if multiple matches are disallowed and something is buffered
+    if (!_allowMultipleMatches && _matchCount > 0) {
+        // Need to fail fast if no multiple matches allowed and we already matched something
+        return null;
+    }
+
     // Anything buffered?
     TokenFilterContext ctxt = _exposedContext;
 
@@ -21,21 +21,12 @@
                 _exposedContext = null;
                 if (ctxt.inArray()) {
                     t = delegate.getCurrentToken();
-s this guaranteed to work without further checks?
-                      if (t != JsonToken.START_ARRAY) {
-                    _currToken = t;
-                    return t;
-                }
-
-                // Almost! Most likely still have the current token;
-                // with the sole exception of 
-                /*
-                t = delegate.getCurrentToken();
-                if (t != JsonToken.FIELD_NAME) {
-                    _currToken = t;
-                    return t;
-                }
-                */
+                    if (t != JsonToken.START_ARRAY) {
+                        _currToken = t;
+                        return t;
+                    }
+                    // No token to return here, break out to continue reading from delegate
+                }
                 break;
             }
             // If not, traverse down the context chain
@@ -47,22 +38,25 @@
         }
     }
 
-    // If not, need to read more. If we got any:
+    // If not buffered, read next token from delegate
     JsonToken t = delegate.nextToken();
     if (t == null) {
-        // no strict need to close, since we have no state here
-        return (_currToken = t);
+        return (_currToken = null);
     }
 
     // otherwise... to include or not?
     TokenFilter f;
-    
+
     switch (t.id()) {
     case ID_START_ARRAY:
         f = _itemFilter;
         if (f == TokenFilter.INCLUDE_ALL) {
             _headContext = _headContext.createChildArrayContext(f, true);
-            return (_currToken = t);
+            _currToken = t;
+            if (!_allowMultipleMatches) {
+                _matchCount++;
+            }
+            return t;
         }
         if (f == null) { // does this occur?
             delegate.skipChildren();
@@ -80,15 +74,21 @@
         _itemFilter = f;
         if (f == TokenFilter.INCLUDE_ALL) {
             _headContext = _headContext.createChildArrayContext(f, true);
-            return (_currToken = t);
+            _currToken = t;
+            if (!_allowMultipleMatches) {
+                _matchCount++;
+            }
+            return t;
         }
         _headContext = _headContext.createChildArrayContext(f, false);
-        
-        // Also: only need buffering if parent path to be included
+
         if (_includePath) {
             t = _nextTokenWithBuffering(_headContext);
             if (t != null) {
                 _currToken = t;
+                if (!_allowMultipleMatches) {
+                    _matchCount++;
+                }
                 return t;
             }
         }
@@ -98,7 +98,11 @@
         f = _itemFilter;
         if (f == TokenFilter.INCLUDE_ALL) {
             _headContext = _headContext.createChildObjectContext(f, true);
-            return (_currToken = t);
+            _currToken = t;
+            if (!_allowMultipleMatches) {
+                _matchCount++;
+            }
+            return t;
         }
         if (f == null) { // does this occur?
             delegate.skipChildren();
@@ -116,19 +120,24 @@
         _itemFilter = f;
         if (f == TokenFilter.INCLUDE_ALL) {
             _headContext = _headContext.createChildObjectContext(f, true);
-            return (_currToken = t);
+            _currToken = t;
+            if (!_allowMultipleMatches) {
+                _matchCount++;
+            }
+            return t;
         }
         _headContext = _headContext.createChildObjectContext(f, false);
-        // Also: only need buffering if parent path to be included
+
         if (_includePath) {
             t = _nextTokenWithBuffering(_headContext);
             if (t != null) {
                 _currToken = t;
-                return t;
-            }
-        }
-        // note: inclusion of surrounding Object handled separately via
-        // FIELD_NAME
+                if (!_allowMultipleMatches) {
+                    _matchCount++;
+                }
+                return t;
+            }
+        }
         break;
 
     case ID_END_ARRAY:
@@ -142,7 +151,8 @@
             _headContext = _headContext.getParent();
             _itemFilter = _headContext.getFilter();
             if (returnEnd) {
-                return (_currToken = t);
+                _currToken = t;
+                return t;
             }
         }
         break;
@@ -150,19 +160,20 @@
     case ID_FIELD_NAME:
         {
             final String name = delegate.getCurrentName();
-            // note: this will also set 'needToHandleName'
             f = _headContext.setFieldName(name);
             if (f == TokenFilter.INCLUDE_ALL) {
                 _itemFilter = f;
                 if (!_includePath) {
-                    // Minor twist here: if parent NOT included, may need to induce output of
-                    // surrounding START_OBJECT/END_OBJECT
                     if (_includeImmediateParent && !_headContext.isStartHandled()) {
                         t = _headContext.nextTokenToRead(); // returns START_OBJECT but also marks it handled
                         _exposedContext = _headContext;
                     }
                 }
-                return (_currToken = t);
+                _currToken = t;
+                if (!_allowMultipleMatches) {
+                    _matchCount++;
+                }
+                return t;
             }
             if (f == null) {
                 delegate.nextToken();
@@ -178,35 +189,51 @@
             _itemFilter = f;
             if (f == TokenFilter.INCLUDE_ALL) {
                 if (_includePath) {
-                    return (_currToken = t);
+                    _currToken = t;
+                    if (!_allowMultipleMatches) {
+                        _matchCount++;
+                    }
+                    return t;
                 }
             }
             if (_includePath) {
                 t = _nextTokenWithBuffering(_headContext);
                 if (t != null) {
                     _currToken = t;
+                    if (!_allowMultipleMatches) {
+                        _matchCount++;
+                    }
                     return t;
                 }
             }
-            break;
-        }
+        }
+        break;
 
     default: // scalar value
         f = _itemFilter;
         if (f == TokenFilter.INCLUDE_ALL) {
-            return (_currToken = t);
+            _currToken = t;
+            if (!_allowMultipleMatches) {
+                _matchCount++;
+            }
+            return t;
         }
         if (f != null) {
             f = _headContext.checkValue(f);
             if ((f == TokenFilter.INCLUDE_ALL)
                     || ((f != null) && f.includeValue(delegate))) {
-                return (_currToken = t);
+                _currToken = t;
+                if (!_allowMultipleMatches) {
+                    _matchCount++;
+                }
+                return t;
             }
         }
         // Otherwise not included (leaves must be explicitly included)
         break;
     }
 
-    // We get here if token was not yet found; offlined handling
+    // We get here if token was not yet emitted; try again with deeper check
     return _nextToken2();
 }
+
