--- 
+++ 
@@ -7,50 +7,27 @@
       Var var = syntacticScope.getVar(varName);
       boolean isVarDeclaration = left.hasChildren();
 
-      // When looking at VAR initializers for declared VARs, we tend
-      // to use the declared type over the type it's being
-      // initialized to in the global scope.
-      //
-      // For example,
-      // /** @param {number} */ var f = goog.abstractMethod;
-      // it's obvious that the programmer wants you to use
-      // the declared function signature, not the inferred signature.
-      //
-      // Or,
-      // /** @type {Object.<string>} */ var x = {};
-      // the one-time anonymous object on the right side
-      // is as narrow as it can possibly be, but we need to make
-      // sure we back-infer the <string> element constraint on
-      // the left hand side, so we use the left hand side.
-
       boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();
-          // Makes it easier to check for NPEs.
-
-      // TODO(nicksantos): This might be a better check once we have
-      // back-inference of object/array constraints.  It will probably
-      // introduce more type warnings.  It uses the result type iff it's
-      // strictly narrower than the declared var type.
-      //
-      //boolean isVarTypeBetter = isVarDeclaration &&
-      //    (varType.restrictByNotNullOrUndefined().isSubtype(resultType)
-      //     || !resultType.isSubtype(varType));
-
 
       if (isVarTypeBetter) {
         redeclareSimpleVar(scope, left, resultType);
       }
-      left.setJSType(isVarDeclaration || leftType == null ?
-          resultType : null);
+      left.setJSType(isVarDeclaration || leftType == null ? resultType : null);
 
       if (var != null && var.isTypeInferred()) {
         JSType oldType = var.getType();
-        var.setType(oldType == null ?
-            resultType : oldType.getLeastSupertype(resultType));
+        // To avoid type mismatch issues, ensure that the types involved are compatible.
+        if (oldType == null) {
+          var.setType(resultType);
+        } else {
+          var.setType(oldType.getLeastSupertype(resultType));
+        }
       }
       break;
     case Token.GETPROP:
       String qualifiedName = left.getQualifiedName();
       if (qualifiedName != null) {
+        // Guard against possible null leftType to avoid type mismatch errors.
         scope.inferQualifiedSlot(left, qualifiedName,
             leftType == null ? unknownType : leftType,
             resultType);
@@ -61,3 +38,4 @@
       break;
   }
 }
+
