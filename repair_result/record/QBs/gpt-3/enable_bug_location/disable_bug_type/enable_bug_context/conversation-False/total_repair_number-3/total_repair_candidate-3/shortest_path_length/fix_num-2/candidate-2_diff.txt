--- 
+++ 
@@ -1,36 +1,28 @@
 from heapq import *
+
 def shortest_path_length(length_by_edge, startnode, goalnode):
-    unvisited_nodes = [] # FibHeap containing (node, distance) pairs
+    unvisited_nodes = []  # heap containing (distance, node) pairs
     heappush(unvisited_nodes, (0, startnode))
     visited_nodes = set()
-    while len(unvisited_nodes) > 0:
+    # Track the best distances to nodes
+    best_distances = {startnode: 0}
+
+    while unvisited_nodes:
         distance, node = heappop(unvisited_nodes)
+        if node in visited_nodes:
+            continue
         if node is goalnode:
             return distance
         visited_nodes.add(node)
+
         for nextnode in node.successors:
             if nextnode in visited_nodes:
                 continue
-            insert_or_update(unvisited_nodes,
-                (min(
-                    get(unvisited_nodes, nextnode) or float('inf'),
-                    get(unvisited_nodes, nextnode) + length_by_edge[node, nextnode]
-                ),
-                nextnode)
-            )
+            edge_length = length_by_edge.get((node, nextnode), float('inf'))
+            new_distance = distance + edge_length
+            if new_distance < best_distances.get(nextnode, float('inf')):
+                best_distances[nextnode] = new_distance
+                heappush(unvisited_nodes, (new_distance, nextnode))
+
     return float('inf')
-def get(node_heap, wanted_node):
-    for dist, node in node_heap:
-        if node == wanted_node:
-            return dist
-    return 0
-def insert_or_update(node_heap, dist_node):
-    dist, node = dist_node
-    for i, tpl in enumerate(node_heap):
-        a, b = tpl
-        if b == node:
-            node_heap[i] = dist_node #heapq retains sorted property
-            return None
-    heappush(node_heap, dist_node)
-    return None
 
