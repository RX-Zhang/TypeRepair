--- 
+++ 
@@ -6,7 +6,7 @@
     // Checks whether there is at least one finite bound value.
     boolean hasFiniteBounds = false;
     for (int i = 0; i < lB.length; i++) {
-        if (!Double.isInfinite(lB[i]) ||
+        if (!Double.isInfinite(lB[i]) &&
             !Double.isInfinite(uB[i])) {
             hasFiniteBounds = true;
             break;
@@ -34,6 +34,14 @@
             boundaries[1] = uB;
 
             // Abort early if the normalization will overflow (cf. "encode" method).
+            for (int i = 0; i < lB.length; i++) {
+                double diff = boundaries[1][i] - boundaries[0][i];
+                if (Double.isInfinite(diff) || Double.isNaN(diff)) {
+                    throw new NumberIsTooLargeException(boundaries[1][i],
+                                                        boundaries[0][i],
+                                                        true);
+                }
+            }
         }
     } else {
         // Convert API to internal handling of boundaries.
@@ -56,3 +64,4 @@
         }
     }
 }
+
