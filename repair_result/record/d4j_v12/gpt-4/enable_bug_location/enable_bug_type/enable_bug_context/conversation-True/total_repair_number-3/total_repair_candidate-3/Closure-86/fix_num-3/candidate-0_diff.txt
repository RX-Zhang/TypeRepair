--- 
+++ 
@@ -1,7 +1,7 @@
 static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
   switch (value.getType()) {
     case Token.ASSIGN:
-      // A result that is aliased by a non-local name, is the effectively the
+      // A result that is aliased by a non-local name, is effectively the
       // same as returning a non-local name, but this doesn't matter if the
       // value is immutable.
       return NodeUtil.isImmutableValue(value.getLastChild())
@@ -19,9 +19,9 @@
     case Token.INC:
     case Token.DEC:
       if (value.getBooleanProp(Node.INCRDECR_PROP)) {
+        return true;
+      } else {
         return evaluatesToLocalValue(value.getFirstChild(), locals);
-      } else {
-        return true;
       }
     case Token.THIS:
       return locals.apply(value);
@@ -39,12 +39,12 @@
       // TODO(nicksantos): This needs to be changed so that it
       // returns true iff we're sure the value was never aliased from inside
       // the constructor (similar to callHasLocalResult)
-      return true;
+      return false;
     case Token.FUNCTION:
     case Token.REGEXP:
     case Token.ARRAYLIT:
     case Token.OBJECTLIT:
-      // Literals objects with non-literal children are allowed.
+      // Literal objects with non-literal children are allowed.
       return true;
     case Token.IN:
       // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
@@ -53,9 +53,9 @@
       // Other op force a local value:
       //  x = '' + g (x is now an local string)
       //  x -= g (x is now an local number)
-      if (isAssignmentOp(value)
-          || isSimpleOperator(value)
-          || isImmutableValue(value)) {
+      if (NodeUtil.isAssignmentOp(value)
+          || NodeUtil.isSimpleOperator(value)
+          || NodeUtil.isImmutableValue(value)) {
         return true;
       }
 
@@ -64,3 +64,4 @@
           "\n parent:" + value.getParent());
   }
 }
+
