--- 
+++ 
@@ -1,42 +1,33 @@
 Node processFunctionNode(FunctionNode functionNode) {
   Name name = functionNode.getFunctionName();
-  Boolean isUnnamedFunction = false;
+  boolean isUnnamedFunction = false;
   if (name == null) {
-    name = new Name();
-    name.setIdentifier("");
     isUnnamedFunction = true;
   }
   Node node = newNode(Token.FUNCTION);
-  Node newName = transform(name);
+  Node newName;
   if (isUnnamedFunction) {
-    // Old Rhino tagged the empty name node with the line number of the
-    // declaration.
+    newName = newNode(Token.NAME);
     newName.setLineno(functionNode.getLineno());
-    // TODO(bowdidge) Mark line number of paren correctly.
-    // Same problem as below - the left paren might not be on the
-    // same line as the function keyword.
-    int lpColumn = functionNode.getAbsolutePosition() +
-        functionNode.getLp();
-    newName.setCharno(position2charno(lpColumn));
+    newName.setCharno(position2charno(functionNode.getAbsolutePosition()));
+  } else {
+    newName = transform(name);
   }
 
   node.addChildToBack(newName);
+
   Node lp = newNode(Token.LP);
   // The left paren's complicated because it's not represented by an
   // AstNode, so there's nothing that has the actual line number that it
   // appeared on.  We know the paren has to appear on the same line as the
   // function name (or else a semicolon will be inserted.)  If there's no
   // function name, assume the paren was on the same line as the function.
-  // TODO(bowdidge): Mark line number of paren correctly.
-  Name fnName = functionNode.getFunctionName();
-  if (fnName != null) {
-    lp.setLineno(fnName.getLineno());
+  if (!isUnnamedFunction) {
+    lp.setLineno(name.getLineno());
   } else {
     lp.setLineno(functionNode.getLineno());
   }
-  int lparenCharno = functionNode.getLp() +
-      functionNode.getAbsolutePosition();
-
+  int lparenCharno = functionNode.getLp() + functionNode.getAbsolutePosition();
   lp.setCharno(position2charno(lparenCharno));
   for (AstNode param : functionNode.getParams()) {
     lp.addChildToBack(transform(param));
@@ -46,5 +37,6 @@
   Node bodyNode = transform(functionNode.getBody());
   parseDirectives(bodyNode);
   node.addChildToBack(bodyNode);
- return node;
+  return node;
 }
+
