--- 
+++ 
@@ -26,25 +26,35 @@
   }
 
   Node replacement;
-    // All assignments evaluate to true, so make sure that the
-    // expr statement evaluates to true in case it matters.
-    nodes.add(new Node(Token.TRUE));
+  // All assignments evaluate to true, so make sure that the
+  // expr statement evaluates to true in case it matters.
+  nodes.add(new Node(Token.TRUE));
 
-    // Join these using COMMA.  A COMMA node must have 2 children, so we
-    // create a tree. In the tree the first child be the COMMA to match
-    // the parser, otherwise tree equality tests fail.
-    nodes = Lists.reverse(nodes);
-    replacement = new Node(Token.COMMA);
-    Node cur = replacement;
-    int i;
+  // Join these using COMMA.  A COMMA node must have 2 children, so we
+  // create a tree. In the tree the first child must be the COMMA to match
+  // the parser, otherwise tree equality tests fail.
+  nodes = Lists.reverse(nodes);
+  replacement = new Node(Token.COMMA);
+  Node cur = replacement;
+  int i;
+  if (nodes.size() == 1) {
+    // Only one node, so replacement is just that node.
+    replacement = nodes.get(0);
+  } else if (nodes.size() == 2) {
+    // Just two nodes, add them as children
+    cur.addChildToBack(nodes.get(0));
+    cur.addChildToBack(nodes.get(1));
+  } else {
+    // More than two nodes, build the tree
     for (i = 0; i < nodes.size() - 2; i++) {
-      cur.addChildToFront(nodes.get(i));
       Node t = new Node(Token.COMMA);
-      cur.addChildToFront(t);
+      cur.addChildToBack(t);
+      cur.addChildToBack(nodes.get(i));
       cur = t;
     }
-    cur.addChildToFront(nodes.get(i));
-    cur.addChildToFront(nodes.get(i + 1));
+    cur.addChildToBack(nodes.get(nodes.size() - 2));
+    cur.addChildToBack(nodes.get(nodes.size() - 1));
+  }
 
   Node replace = ref.getParent();
   replacement.copyInformationFromForTree(replace);
@@ -56,3 +66,4 @@
     replace.getParent().replaceChild(replace, replacement);
   }
 }
+
