--- 
+++ 
@@ -19,10 +19,10 @@
 
         final double[] lI = lTData[i];
 
-        if (lTData[i][i] < absolutePositivityThreshold) {
+        if (lI[i] < absolutePositivityThreshold) {
             throw new NotPositiveDefiniteMatrixException();
         }
-        // check off-diagonal elements (and reset them to 0)
+        // check off-diagonal elements (and enforce symmetry by averaging)
         for (int j = i + 1; j < order; ++j) {
             final double[] lJ = lTData[j];
             final double lIJ = lI[j];
@@ -32,8 +32,11 @@
             if (Math.abs(lIJ - lJI) > maxDelta) {
                 throw new NotSymmetricMatrixException();
             }
-            lJ[i] = 0;
-       }
+            // Enforce symmetry by averaging the two elements
+            final double symValue = 0.5 * (lIJ + lJI);
+            lI[j] = symValue;
+            lJ[i] = symValue;
+        }
     }
 
     // transform the matrix
@@ -41,19 +44,21 @@
 
         final double[] ltI = lTData[i];
 
-        // check diagonal element
+        // check diagonal element before sqrt
+        if (ltI[i] <= 0) {
+            throw new NotPositiveDefiniteMatrixException();
+        }
 
         ltI[i] = Math.sqrt(ltI[i]);
         final double inverse = 1.0 / ltI[i];
 
-        for (int q = order - 1; q > i; --q) {
+        for (int q = i + 1; q < order; ++q) {
             ltI[q] *= inverse;
             final double[] ltQ = lTData[q];
             for (int p = q; p < order; ++p) {
                 ltQ[p] -= ltI[q] * ltI[p];
             }
         }
+    }
+}
 
-    }
-
-}
