--- 
+++ 
@@ -5,19 +5,33 @@
         int start = index + 2;
         boolean isHex = false;
 
+        if(start >= seqEnd) {
+            // No characters after '&#'
+            return 0;
+        }
+
         char firstChar = input.charAt(start);
         if(firstChar == 'x' || firstChar == 'X') {
             start++;
             isHex = true;
-
-            // Check there's more than just an x after the &#
+            if(start >= seqEnd) {
+                // No characters after '&#x' or '&#X'
+                return 0;
+            }
         }
 
         int end = start;
         // Note that this supports character codes without a ; on the end
-        while(input.charAt(end) != ';') 
-        {
+        while(end < seqEnd && input.charAt(end) != ';') {
             end++;
+        }
+
+        // If we reached the end without finding ';', end might be == seqEnd,
+        // so we allow unfinished entity (no trailing semicolon)
+
+        if(end == start) {
+            // No digits after '&#' or '&#x'
+            return 0;
         }
 
         int entityValue;
@@ -28,7 +42,7 @@
                 entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
             }
         } catch(NumberFormatException nfe) {
-        System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
+            System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start + "][" + end + "]");
             return 0;
         }
 
@@ -40,8 +54,8 @@
             out.write(entityValue);
         }
 
-
-        return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+        return 2 + (end - start) + (isHex ? 1 : 0) + (end < seqEnd && input.charAt(end) == ';' ? 1 : 0);
     }
     return 0;
 }
+
