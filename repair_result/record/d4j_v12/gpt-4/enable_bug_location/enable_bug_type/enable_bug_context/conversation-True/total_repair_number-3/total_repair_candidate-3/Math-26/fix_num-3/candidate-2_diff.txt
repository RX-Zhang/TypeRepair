--- 
+++ 
@@ -4,15 +4,17 @@
     long overflow = Integer.MAX_VALUE;
     double r0 = value;
     long a0 = (long)FastMath.floor(r0);
-    if (a0 > overflow) {
-        throw new FractionConversionException(value, a0, 1l);
+    if (a0 > overflow || a0 < -overflow) {
+        throw new FractionConversionException(value, a0, 1L);
     }
 
     // check for (almost) integer arguments, which should not go
     // to iterations.
     if (FastMath.abs(a0 - value) < epsilon) {
-        this.numerator = (int) a0;
-        this.denominator = 1;
+        // Use getReducedFraction to handle potential overflow and properly reduce
+        Fraction f = Fraction.getReducedFraction((int)a0, 1);
+        this.numerator = f.getNumerator();
+        this.denominator = f.getDenominator();
         return;
     }
 
@@ -32,7 +34,8 @@
         long a1 = (long)FastMath.floor(r1);
         p2 = (a1 * p1) + p0;
         q2 = (a1 * q1) + q0;
-        if ((p2 > overflow) || (q2 > overflow)) {
+
+        if ((p2 > overflow) || (p2 < -overflow) || (q2 > overflow) || (q2 < -overflow)) {
             throw new FractionConversionException(value, p2, q2);
         }
 
@@ -53,12 +56,18 @@
         throw new FractionConversionException(value, maxIterations);
     }
 
-    if (q2 < maxDenominator) {
-        this.numerator = (int) p2;
-        this.denominator = (int) q2;
-    } else {
-        this.numerator = (int) p1;
-        this.denominator = (int) q1;
+    // Use getReducedFraction to ensure numerator and denominator fit and are reduced
+    try {
+        Fraction f;
+        if (q2 < maxDenominator) {
+            f = Fraction.getReducedFraction((int)p2, (int)q2);
+        } else {
+            f = Fraction.getReducedFraction((int)p1, (int)q1);
+        }
+        this.numerator = f.getNumerator();
+        this.denominator = f.getDenominator();
+    } catch (MathArithmeticException mae) {
+        throw new FractionConversionException(value, p2, q2);
     }
+}
 
-}
