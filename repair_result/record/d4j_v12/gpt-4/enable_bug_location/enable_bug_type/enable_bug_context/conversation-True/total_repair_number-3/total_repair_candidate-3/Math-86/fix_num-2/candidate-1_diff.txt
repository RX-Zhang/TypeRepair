--- 
+++ 
@@ -22,7 +22,7 @@
         if (lTData[i][i] < absolutePositivityThreshold) {
             throw new NotPositiveDefiniteMatrixException();
         }
-        // check off-diagonal elements (and reset them to 0)
+        // check off-diagonal elements for symmetry
         for (int j = i + 1; j < order; ++j) {
             final double[] lJ = lTData[j];
             final double lIJ = lI[j];
@@ -32,28 +32,36 @@
             if (Math.abs(lIJ - lJI) > maxDelta) {
                 throw new NotSymmetricMatrixException();
             }
-            lJ[i] = 0;
-       }
+        }
     }
 
-    // transform the matrix
+    // perform the Cholesky decomposition
     for (int i = 0; i < order; ++i) {
 
         final double[] ltI = lTData[i];
 
-        // check diagonal element
+        // check diagonal element for positive definiteness
+        if (ltI[i] <= 0) {
+            throw new NotPositiveDefiniteMatrixException();
+        }
 
         ltI[i] = Math.sqrt(ltI[i]);
         final double inverse = 1.0 / ltI[i];
 
-        for (int q = order - 1; q > i; --q) {
-            ltI[q] *= inverse;
+        for (int q = i + 1; q < order; ++q) {
             final double[] ltQ = lTData[q];
-            for (int p = q; p < order; ++p) {
-                ltQ[p] -= ltI[q] * ltI[p];
+            double sum = 0.0;
+            for (int k = i; k < q; ++k) {
+                sum += ltQ[k] * ltI[k];
             }
+            ltQ[i] = (ltQ[i] - sum) * inverse;
         }
 
+        // zero out upper triangle elements (above the diagonal)
+        for (int j = i + 1; j < order; ++j) {
+            lTData[i][j] = 0.0;
+        }
     }
 
 }
+
