--- 
+++ 
@@ -18,34 +18,20 @@
         final double a = getA(n, x);
         final double b = getB(n, x);
 
-        double cN = a * hPrev + b * p0;
-        double q2 = a * q1 + b * dPrev;
-        if (Double.isInfinite(cN) || Double.isInfinite(q2)) {
-            double scaleFactor = 1d;
-            double lastScaleFactor = 1d;
-            final int maxPower = 5;
-            final double scale = FastMath.max(a,b);
-            if (scale <= 0) {  // Can't scale
-                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);
-            }
-            for (int i = 0; i < maxPower; i++) {
-                lastScaleFactor = scaleFactor;
-                scaleFactor *= scale;
-                if (a != 0.0 && a > b) {
-                    cN = hPrev / lastScaleFactor + (b / scaleFactor * p0);
-                    q2 = q1 / lastScaleFactor + (b / scaleFactor * dPrev);
-                } else if (b != 0) {
-                    cN = (a / scaleFactor * hPrev) + p0 / lastScaleFactor;
-                    q2 = (a / scaleFactor * q1) + dPrev / lastScaleFactor;
-                }
-                if (!(Double.isInfinite(cN) || Double.isInfinite(q2))) {
-                    break;
-                }
-            }
+        // Using Lentz's method for continued fraction evaluation
+        double dN = b + a * dPrev;
+        if (Math.abs(dN) < small) {
+            dN = small;
+        }
+        dN = 1.0 / dN;
+
+        double cN = b + a / cPrev;
+        if (Math.abs(cN) < small) {
+            cN = small;
         }
 
-        final double deltaN = cN / q2 / cPrev;
-        hN = cPrev * deltaN;
+        double deltaN = cN * dN;
+        hN = hPrev * deltaN;
 
         if (Double.isInfinite(hN)) {
             throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,
@@ -56,15 +42,13 @@
                                            x);
         }
 
-        if (FastMath.abs(deltaN - 1.0) < epsilon) {
+        if (Math.abs(deltaN - 1.0) < epsilon) {
             break;
         }
 
-        dPrev = q1;
-        cPrev = cN / q2;
-        p0 = hPrev;
-        hPrev = cN;
-        q1 = q2;
+        dPrev = dN;
+        cPrev = cN;
+        hPrev = hN;
         n++;
     }
 
@@ -75,3 +59,4 @@
 
     return hN;
 }
+
