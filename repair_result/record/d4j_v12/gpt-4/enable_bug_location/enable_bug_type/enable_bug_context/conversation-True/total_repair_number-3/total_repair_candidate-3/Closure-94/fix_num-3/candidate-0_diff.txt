--- 
+++ 
@@ -8,11 +8,14 @@
 
     // Binary operators are only valid if both children are valid.
     case Token.BITAND:
-    case Token.BITNOT:
     case Token.BITOR:
     case Token.BITXOR:
+    case Token.ADD:
+      return isValidDefineValue(val.getFirstChild(), defines) &&
+             isValidDefineValue(val.getLastChild(), defines);
 
-    // Uniary operators are valid if the child is valid.
+    // Unary operators are valid if the child is valid.
+    case Token.BITNOT:
     case Token.NOT:
     case Token.NEG:
       return isValidDefineValue(val.getFirstChild(), defines);
@@ -23,6 +26,8 @@
       if (val.isQualifiedName()) {
         return defines.contains(val.getQualifiedName());
       }
+      return false;
   }
   return false;
 }
+
