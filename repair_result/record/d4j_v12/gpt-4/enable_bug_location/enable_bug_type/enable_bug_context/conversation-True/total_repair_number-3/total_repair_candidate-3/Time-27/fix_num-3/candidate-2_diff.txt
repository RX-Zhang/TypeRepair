--- 
+++ 
@@ -3,18 +3,43 @@
         throw new IllegalStateException("Builder has created neither a printer nor a parser");
     }
     int size = elementPairs.size();
+
+    // Validate Separator element if present
     if (size >= 2 && elementPairs.get(0) instanceof Separator) {
         Separator sep = (Separator) elementPairs.get(0);
-            PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);
-            sep = sep.finish(f.getPrinter(), f.getParser());
-            return new PeriodFormatter(sep, sep);
+
+        // Defensive check to make sure subList indices are valid
+        if (size < 3) {
+            throw new IllegalArgumentException("Separator found but no elements after it.");
+        }
+
+        PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);
+        sep = sep.finish(f.getPrinter(), f.getParser());
+        return new PeriodFormatter(sep, sep);
     }
+
     Object[] comp = createComposite(elementPairs);
+
+    // Defensive validation on composite elements
+    if (comp == null || comp.length < 2) {
+        throw new IllegalArgumentException("Invalid composite elements for formatter creation.");
+    }
+
     if (notPrinter) {
+        if (!(comp[1] instanceof PeriodParser)) {
+            throw new IllegalArgumentException("Expected a PeriodParser for parser part but got: " + comp[1]);
+        }
         return new PeriodFormatter(null, (PeriodParser) comp[1]);
     } else if (notParser) {
+        if (!(comp[0] instanceof PeriodPrinter)) {
+            throw new IllegalArgumentException("Expected a PeriodPrinter for printer part but got: " + comp[0]);
+        }
         return new PeriodFormatter((PeriodPrinter) comp[0], null);
     } else {
+        if (!(comp[0] instanceof PeriodPrinter) || !(comp[1] instanceof PeriodParser)) {
+            throw new IllegalArgumentException("Expected PeriodPrinter and PeriodParser instances for formatter creation.");
+        }
         return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);
     }
 }
+
