--- 
+++ 
@@ -10,20 +10,22 @@
     }
 
     final int order = matrix.getRowDimension();
-    lTData   = matrix.getData();
-    cachedL  = null;
+
+    // Copy the matrix data to avoid modifying the original matrix
+    lTData = matrix.getData();
+    cachedL = null;
     cachedLT = null;
 
-    // check the matrix before transformation
+    // Check symmetry and zero out lower triangle elements
     for (int i = 0; i < order; ++i) {
 
         final double[] lI = lTData[i];
 
-        if (lTData[i][i] < absolutePositivityThreshold) {
+        if (lI[i] < absolutePositivityThreshold) {
             throw new NotPositiveDefiniteMatrixException();
         }
-        // check off-diagonal elements (and reset them to 0)
-        for (int j = i + 1; j < order; ++j) {
+
+        for (int j = 0; j < i; ++j) {
             final double[] lJ = lTData[j];
             final double lIJ = lI[j];
             final double lJI = lJ[i];
@@ -32,28 +34,40 @@
             if (Math.abs(lIJ - lJI) > maxDelta) {
                 throw new NotSymmetricMatrixException();
             }
-            lJ[i] = 0;
-       }
+            // Force lower triangle to zero (since we store upper triangular)
+            lI[j] = 0;
+        }
     }
 
-    // transform the matrix
+    // Perform Cholesky decomposition
     for (int i = 0; i < order; ++i) {
 
         final double[] ltI = lTData[i];
 
-        // check diagonal element
-
+        // Compute sqrt of diagonal element
+        if (ltI[i] <= 0) {
+            throw new NotPositiveDefiniteMatrixException();
+        }
         ltI[i] = Math.sqrt(ltI[i]);
         final double inverse = 1.0 / ltI[i];
 
-        for (int q = order - 1; q > i; --q) {
-            ltI[q] *= inverse;
+        for (int q = i + 1; q < order; ++q) {
             final double[] ltQ = lTData[q];
-            for (int p = q; p < order; ++p) {
-                ltQ[p] -= ltI[q] * ltI[p];
+            double sum = ltQ[i];
+            for (int k = 0; k < i; ++k) {
+                sum -= ltQ[k] * ltI[k];
+            }
+            ltQ[i] = sum * inverse;
+        }
+
+        // Update the trailing submatrix
+        for (int j = i + 1; j < order; ++j) {
+            final double[] ltJ = lTData[j];
+            final double[] ltIrow = lTData[i];
+            for (int k = j; k < order; ++k) {
+                ltJ[k] -= ltJ[i] * ltIrow[k];
             }
         }
+    }
+}
 
-    }
-
-}
