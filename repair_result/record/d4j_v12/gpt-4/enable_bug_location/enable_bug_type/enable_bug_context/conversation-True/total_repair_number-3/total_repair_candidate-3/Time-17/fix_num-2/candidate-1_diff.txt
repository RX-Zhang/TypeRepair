--- 
+++ 
@@ -1,18 +1,26 @@
 public long adjustOffset(long instant, boolean earlierOrLater) {
-    // a bit messy, but will work in all non-pathological cases
-    
-    // evaluate 3 hours before and after to work out if anything is happening
+    // evaluate instants a few hours before and after to detect overlaps
     long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
     long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
-    if (instantBefore == instantAfter) {
-        return instant;  // not an overlap (less than is a gap, equal is normal case)
+    if (instantBefore >= instantAfter) {
+        // gap or normal case, no overlap detected
+        return instant;
     }
-    
-    // work out range of instants that have duplicate local times
+
+    // determine the local time of the instant
     long local = convertUTCToLocal(instant);
-    return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);
-    
-    // calculate result
-      // currently in later offset
-      // currently in earlier offset
+
+    // find the transition times surrounding the overlap
+    long overlapStart = instantBefore;
+    long overlapEnd = instantAfter;
+
+    // adjust the instant according to earlierOrLater flag
+    if (earlierOrLater) {
+        // want the later offset at overlap
+        return convertLocalToUTC(local, false, overlapEnd);
+    } else {
+        // want the earlier offset at overlap
+        return convertLocalToUTC(local, false, overlapStart);
+    }
 }
+
