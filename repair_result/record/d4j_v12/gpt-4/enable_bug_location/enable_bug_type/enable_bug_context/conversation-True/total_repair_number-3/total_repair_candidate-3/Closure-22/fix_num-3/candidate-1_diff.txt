--- 
+++ 
@@ -19,12 +19,12 @@
     Node gramps = parent.getParent();
     if (gramps.isCall() && parent == gramps.getFirstChild()) {
       if (n == parent.getFirstChild() && parent.getChildCount() == 2 && n.getNext().isName() && "eval".equals(n.getNext().getString())) {
-    return;
+        return;
       }
-  }
+    }
 
-  // This no-op statement was there so that JSDoc information could
-  // be attached to the name. This check should not complain about it.
+    // This no-op statement was there so that JSDoc information could
+    // be attached to the name. This check should not complain about it.
     if (n == parent.getLastChild()) {
       for (Node an : parent.getAncestors()) {
         int ancestorType = an.getType();
@@ -40,7 +40,7 @@
     if (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() ||
          n == parent.getFirstChild().getNext().getNext())) {
     } else {
-    return;
+      return;
     }
   }
 
@@ -65,8 +65,9 @@
         t.makeError(n, level, USELESS_CODE_ERROR, msg));
     // TODO(johnlenz): determine if it is necessary to
     // try to protect side-effect free statements as well.
-    if (!NodeUtil.isStatement(n)) {
+    if (protectSideEffectFreeCode && !NodeUtil.isStatement(n)) {
       problemNodes.add(n);
     }
   }
 }
+
