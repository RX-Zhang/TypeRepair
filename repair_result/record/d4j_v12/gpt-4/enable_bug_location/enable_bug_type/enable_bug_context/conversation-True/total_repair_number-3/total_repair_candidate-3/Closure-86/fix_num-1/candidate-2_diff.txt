--- 
+++ 
@@ -4,8 +4,10 @@
       // A result that is aliased by a non-local name, is the effectively the
       // same as returning a non-local name, but this doesn't matter if the
       // value is immutable.
-      return NodeUtil.isImmutableValue(value.getLastChild())
-          || (locals.apply(value)
+      // Use isAssignmentOp(Node) here instead of locals.apply directly on Node,
+      // and properly handle the left and right sides.
+      return isImmutableValue(value.getLastChild())
+          || (locals.apply(value.getFirstChild())
               && evaluatesToLocalValue(value.getLastChild(), locals));
     case Token.COMMA:
       return evaluatesToLocalValue(value.getLastChild(), locals);
@@ -14,10 +16,15 @@
       return evaluatesToLocalValue(value.getFirstChild(), locals)
          && evaluatesToLocalValue(value.getLastChild(), locals);
     case Token.HOOK:
+      // The operands of a hook (conditional) where only the two options need to be checked,
+      // the condition can be anything.
       return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)
          && evaluatesToLocalValue(value.getLastChild(), locals);
     case Token.INC:
     case Token.DEC:
+      // If increment/decrement is postfix (has INCRDECR_PROP set),
+      // it evaluates to the old value (non-local if variable is non-local)
+      // Otherwise it's the updated value (local)
       if (value.getBooleanProp(Node.INCRDECR_PROP)) {
         return evaluatesToLocalValue(value.getFirstChild(), locals);
       } else {
@@ -30,6 +37,7 @@
     case Token.GETELEM:
     case Token.GETPROP:
       // There is no information about the locality of object properties.
+      // We can only trust locals for the entire node.
       return locals.apply(value);
     case Token.CALL:
       return callHasLocalResult(value)
@@ -39,15 +47,17 @@
       // TODO(nicksantos): This needs to be changed so that it
       // returns true iff we're sure the value was never aliased from inside
       // the constructor (similar to callHasLocalResult)
-      return true;
+      // Correct handling: check if constructor call has side effects.
+      // Since no compiler is passed, we conservatively return false here.
+      return false;
     case Token.FUNCTION:
     case Token.REGEXP:
     case Token.ARRAYLIT:
     case Token.OBJECTLIT:
-      // Literals objects with non-literal children are allowed.
+      // Literal objects with non-literal children are allowed.
       return true;
     case Token.IN:
-      // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
+      // A simple operator always considered local.
       return true;
     default:
       // Other op force a local value:
@@ -64,3 +74,4 @@
           "\n parent:" + value.getParent());
   }
 }
+
