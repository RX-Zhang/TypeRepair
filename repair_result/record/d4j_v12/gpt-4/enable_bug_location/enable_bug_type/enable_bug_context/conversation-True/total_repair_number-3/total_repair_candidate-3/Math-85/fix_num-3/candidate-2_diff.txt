--- 
+++ 
@@ -17,21 +17,30 @@
     }
     double a = initial;
     double b = initial;
-    double fa;
-    double fb;
-    int numIterations = 0 ;
+    double fa = function.value(a);
+    double fb = function.value(b);
+    int numIterations = 0;
 
-    do {
-        a = Math.max(a - 1.0, lowerBound);
-        b = Math.min(b + 1.0, upperBound);
-        fa = function.value(a);
-        
-        fb = function.value(b);
-        numIterations++ ;
-    } while ((fa * fb > 0.0) && (numIterations < maximumIterations) && 
-            ((a > lowerBound) || (b < upperBound)));
+    // Expand interval until a root is bracketed or bounds are reached or max iterations exceeded
+    while (fa * fb > 0.0 && numIterations < maximumIterations) {
+        if (a > lowerBound) {
+            double nextA = Math.max(a - 1.0, lowerBound);
+            fa = function.value(nextA);
+            a = nextA;
+        }
+        if (fb * fa > 0.0 && b < upperBound) {  // Only expand b if no root bracket yet
+            double nextB = Math.min(b + 1.0, upperBound);
+            fb = function.value(nextB);
+            b = nextB;
+        }
+        numIterations++;
+        // If cannot move a or b further, break to avoid infinite loop
+        if ((a == lowerBound && fa * fb > 0.0) && (b == upperBound && fa * fb > 0.0)) {
+            break;
+        }
+    }
 
-    if (fa * fb >= 0.0 ) {
+    if (fa * fb >= 0.0) {
         throw new ConvergenceException(
                   "number of iterations={0}, maximum iterations={1}, " +
                   "initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " +
@@ -39,6 +48,7 @@
                   numIterations, maximumIterations, initial,
                   lowerBound, upperBound, a, b, fa, fb);
     }
-    
+
     return new double[]{a, b};
 }
+
