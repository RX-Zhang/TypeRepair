--- 
+++ 
@@ -1,15 +1,19 @@
 private Fraction(double value, double epsilon, int maxDenominator, int maxIterations)
     throws FractionConversionException
 {
-    long overflow = Integer.MAX_VALUE;
-    double r0 = value;
-    long a0 = (long)FastMath.floor(r0);
-    if (a0 > overflow) {
-        throw new FractionConversionException(value, a0, 1l);
+    if (Double.isNaN(value) || Double.isInfinite(value)) {
+        throw new FractionConversionException(value, 0, 1);
     }
 
-    // check for (almost) integer arguments, which should not go
-    // to iterations.
+    double r0 = value;
+    long a0 = (long) FastMath.floor(r0);
+
+    // Check for overflow (consider negative values as well)
+    if (a0 > Integer.MAX_VALUE || a0 < Integer.MIN_VALUE) {
+        throw new FractionConversionException(value, a0, 1L);
+    }
+
+    // Check for (almost) integer arguments, which should not go to iterations.
     if (FastMath.abs(a0 - value) < epsilon) {
         this.numerator = (int) a0;
         this.denominator = 1;
@@ -29,15 +33,24 @@
     do {
         ++n;
         double r1 = 1.0 / (r0 - a0);
-        long a1 = (long)FastMath.floor(r1);
-        p2 = (a1 * p1) + p0;
-        q2 = (a1 * q1) + q0;
-        if ((p2 > overflow) || (q2 > overflow)) {
+        long a1 = (long) FastMath.floor(r1);
+
+        if (a1 > Integer.MAX_VALUE || a1 < Integer.MIN_VALUE) {
+            throw new FractionConversionException(value, p1, q1);
+        }
+
+        p2 = a1 * p1 + p0;
+        q2 = a1 * q1 + q0;
+
+        // Check for overflow on numerator or denominator
+        if (p2 > Integer.MAX_VALUE || p2 < Integer.MIN_VALUE || q2 > Integer.MAX_VALUE || q2 < Integer.MIN_VALUE) {
             throw new FractionConversionException(value, p2, q2);
         }
 
-        double convergent = (double)p2 / (double)q2;
-        if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) {
+        double convergent = (double) p2 / (double) q2;
+        if (n < maxIterations &&
+            FastMath.abs(convergent - value) > epsilon &&
+            q2 < maxDenominator) {
             p0 = p1;
             p1 = p2;
             q0 = q1;
@@ -53,12 +66,15 @@
         throw new FractionConversionException(value, maxIterations);
     }
 
-    if (q2 < maxDenominator) {
-        this.numerator = (int) p2;
-        this.denominator = (int) q2;
+    // Use getReducedFraction method to ensure numerator and denominator are reduced and validated
+    Fraction reducedFraction;
+    if (q2 <= maxDenominator) {
+        reducedFraction = Fraction.getReducedFraction((int) p2, (int) q2);
     } else {
-        this.numerator = (int) p1;
-        this.denominator = (int) q1;
+        reducedFraction = Fraction.getReducedFraction((int) p1, (int) q1);
     }
 
+    this.numerator = reducedFraction.getNumerator();
+    this.denominator = reducedFraction.getDenominator();
 }
+
