--- 
+++ 
@@ -19,10 +19,11 @@
 
         final double[] lI = lTData[i];
 
-        if (lTData[i][i] < absolutePositivityThreshold) {
+        // check diagonal element positivity
+        if (lI[i] < absolutePositivityThreshold) {
             throw new NotPositiveDefiniteMatrixException();
         }
-        // check off-diagonal elements (and reset them to 0)
+        // check off-diagonal elements for symmetry
         for (int j = i + 1; j < order; ++j) {
             final double[] lJ = lTData[j];
             final double lIJ = lI[j];
@@ -32,28 +33,42 @@
             if (Math.abs(lIJ - lJI) > maxDelta) {
                 throw new NotSymmetricMatrixException();
             }
-            lJ[i] = 0;
-       }
+        }
     }
 
-    // transform the matrix
+    // Perform Cholesky decomposition
     for (int i = 0; i < order; ++i) {
 
         final double[] ltI = lTData[i];
 
-        // check diagonal element
+        // Calculate diagonal element
+        double sumSquares = 0.0;
+        for (int k = 0; k < i; ++k) {
+            sumSquares += ltI[k] * ltI[k];
+        }
+        double diag = ltI[i] - sumSquares;
+        if (diag <= absolutePositivityThreshold) {
+            throw new NotPositiveDefiniteMatrixException();
+        }
+        ltI[i] = Math.sqrt(diag);
 
-        ltI[i] = Math.sqrt(ltI[i]);
-        final double inverse = 1.0 / ltI[i];
-
-        for (int q = order - 1; q > i; --q) {
-            ltI[q] *= inverse;
-            final double[] ltQ = lTData[q];
-            for (int p = q; p < order; ++p) {
-                ltQ[p] -= ltI[q] * ltI[p];
+        // Calculate off-diagonal elements
+        for (int j = i + 1; j < order; ++j) {
+            final double[] ltJ = lTData[j];
+            double sumProducts = 0.0;
+            for (int k = 0; k < i; ++k) {
+                sumProducts += ltJ[k] * ltI[k];
             }
+            ltJ[i] = (ltJ[i] - sumProducts) / ltI[i];
         }
-
     }
 
+    // Zero out the upper triangular elements to keep only lower part
+    for (int i = 0; i < order; ++i) {
+        final double[] ltI = lTData[i];
+        for (int j = i + 1; j < order; ++j) {
+            ltI[j] = 0.0;
+        }
+    }
 }
+
