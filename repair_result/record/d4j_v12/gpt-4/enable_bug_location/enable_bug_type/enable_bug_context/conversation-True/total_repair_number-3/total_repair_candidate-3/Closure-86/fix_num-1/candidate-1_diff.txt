--- 
+++ 
@@ -5,7 +5,7 @@
       // same as returning a non-local name, but this doesn't matter if the
       // value is immutable.
       return NodeUtil.isImmutableValue(value.getLastChild())
-          || (locals.apply(value)
+          || (locals.apply(value.getFirstChild())
               && evaluatesToLocalValue(value.getLastChild(), locals));
     case Token.COMMA:
       return evaluatesToLocalValue(value.getLastChild(), locals);
@@ -19,7 +19,7 @@
     case Token.INC:
     case Token.DEC:
       if (value.getBooleanProp(Node.INCRDECR_PROP)) {
-        return evaluatesToLocalValue(value.getFirstChild(), locals);
+        return false;
       } else {
         return true;
       }
@@ -30,7 +30,7 @@
     case Token.GETELEM:
     case Token.GETPROP:
       // There is no information about the locality of object properties.
-      return locals.apply(value);
+      return false;
     case Token.CALL:
       return callHasLocalResult(value)
           || isToStringMethodCall(value)
@@ -39,7 +39,7 @@
       // TODO(nicksantos): This needs to be changed so that it
       // returns true iff we're sure the value was never aliased from inside
       // the constructor (similar to callHasLocalResult)
-      return true;
+      return callHasLocalResult(value);
     case Token.FUNCTION:
     case Token.REGEXP:
     case Token.ARRAYLIT:
@@ -64,3 +64,4 @@
           "\n parent:" + value.getParent());
   }
 }
+
