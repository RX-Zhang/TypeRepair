--- 
+++ 
@@ -4,7 +4,7 @@
     }
     if (StringUtils.isBlank(str)) {
         throw new NumberFormatException("A blank string is not a valid number");
-    }  
+    }
     if (str.startsWith("--")) {
         // this is protection for poorness in java.lang.BigDecimal.
         // it accepts this as a legal value, but it does not appear 
@@ -14,13 +14,21 @@
     }
     if (str.startsWith("0x") || str.startsWith("-0x")) {
         return createInteger(str);
-    }   
+    }
+
     char lastChar = str.charAt(str.length() - 1);
     String mant;
     String dec;
     String exp;
     int decPos = str.indexOf('.');
-    int expPos = str.indexOf('e') + str.indexOf('E') + 1;
+    int expPosE = str.indexOf('e');
+    int expPosEUpper = str.indexOf('E');
+    int expPos = -1;
+    if (expPosE > -1) {
+        expPos = expPosE;
+    } else if (expPosEUpper > -1) {
+        expPos = expPosEUpper;
+    }
 
     if (decPos > -1) {
 
@@ -55,7 +63,7 @@
             case 'L' :
                 if (dec == null
                     && exp == null
-                    && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
+                    && ((numeric.charAt(0) == '-' && isDigits(numeric.substring(1))) || isDigits(numeric))) {
                     try {
                         return createLong(numeric);
                     } catch (NumberFormatException nfe) {
@@ -68,7 +76,7 @@
             case 'f' :
             case 'F' :
                 try {
-                    Float f = NumberUtils.createFloat(numeric);
+                    Float f = createFloat(numeric);
                     if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
                         //If it's too big for a float or the float value = 0 and the string
                         //has non-zeros in it, then float does not have the precision we want
@@ -82,8 +90,8 @@
             case 'd' :
             case 'D' :
                 try {
-                    Double d = NumberUtils.createDouble(numeric);
-                    if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
+                    Double d = createDouble(numeric);
+                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
                         return d;
                     }
                 } catch (NumberFormatException nfe) {
@@ -146,3 +154,4 @@
         }
     }
 }
+
