--- 
+++ 
@@ -1,21 +1,24 @@
 private boolean isPrototypePropertyAssign(Node assign) {
   Node n = assign.getFirstChild();
   if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
-      && n.getType() == Token.GETPROP
-      ) {
+      && n.getType() == Token.GETPROP) {
     // We want to exclude the assignment itself from the usage list
     boolean isChainedProperty =
-        n.getFirstChild().getType() == Token.GETPROP;
+        n.getFirstChild() != null && n.getFirstChild().getType() == Token.GETPROP;
 
     if (isChainedProperty) {
-      Node child = n.getFirstChild().getFirstChild().getNext();
+      Node child = n.getFirstChild().getFirstChild();
+      if (child != null && child.getType() == Token.NAME) {
+        Node prototype = child.getNext();
 
-      if (child.getType() == Token.STRING &&
-          child.getString().equals("prototype")) {
-        return true;
+        if (prototype != null && prototype.getType() == Token.STRING
+            && prototype.getString().equals("prototype")) {
+          return true;
+        }
       }
     }
   }
 
   return false;
 }
+
