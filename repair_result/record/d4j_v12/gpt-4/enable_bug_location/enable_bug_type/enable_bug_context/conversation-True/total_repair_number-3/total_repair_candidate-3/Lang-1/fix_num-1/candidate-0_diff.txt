--- 
+++ 
@@ -8,9 +8,11 @@
     // Need to deal with all possible hex prefixes here
     final String[] hex_prefixes = {"0x", "0X", "-0x", "-0X", "#", "-#"};
     int pfxLen = 0;
-    for(final String pfx : hex_prefixes) {
-        if (str.startsWith(pfx)) {
-            pfxLen += pfx.length();
+    String pfx = null;
+    for(final String candidate : hex_prefixes) {
+        if (str.startsWith(candidate)) {
+            pfxLen = candidate.length();
+            pfx = candidate;
             break;
         }
     }
@@ -20,16 +22,32 @@
             return createBigInteger(str);
         }
         if (hexDigits > 8) { // too many for an int
-            return createLong(str);
+            try {
+                return createLong(str);
+            } catch (final NumberFormatException nfe) {
+                return createBigInteger(str);
+            }
         }
-        return createInteger(str);
+        try {
+            return createInteger(str);
+        } catch (final NumberFormatException nfe) {
+            try {
+                return createLong(str);
+            } catch (final NumberFormatException nfe2) {
+                return createBigInteger(str);
+            }
+        }
     }
     final char lastChar = str.charAt(str.length() - 1);
     String mant;
     String dec;
     String exp;
     final int decPos = str.indexOf('.');
-    final int expPos = str.indexOf('e') + str.indexOf('E') + 1; // assumes both not present
+    // fix for expPos calculation to correctly find either 'e' or 'E'
+    int expPos = str.indexOf('e');
+    if (expPos == -1) {
+        expPos = str.indexOf('E');
+    }
     // if both e and E are present, this is caught by the checks on expPos (which prevent IOOBE)
     // and the parsing which will detect if e or E appear in a number due to using the wrong offset
 
@@ -163,3 +181,4 @@
 
     return createBigDecimal(str);
 }
+
