--- 
+++ 
@@ -10,45 +10,51 @@
     }
 
     final int order = matrix.getRowDimension();
-    lTData   = matrix.getData();
+    // Copy the matrix data to avoid modifying the original matrix
+    lTData = new double[order][order];
+    for (int i = 0; i < order; i++) {
+        System.arraycopy(matrix.getRow(i), 0, lTData[i], 0, order);
+    }
     cachedL  = null;
     cachedLT = null;
 
-    // check the matrix before transformation
+    // Check symmetry and positivity
     for (int i = 0; i < order; ++i) {
-
-        final double[] lI = lTData[i];
 
         if (lTData[i][i] < absolutePositivityThreshold) {
             throw new NotPositiveDefiniteMatrixException();
         }
-        // check off-diagonal elements (and reset them to 0)
         for (int j = i + 1; j < order; ++j) {
-            final double[] lJ = lTData[j];
-            final double lIJ = lI[j];
-            final double lJI = lJ[i];
+            final double lIJ = lTData[i][j];
+            final double lJI = lTData[j][i];
             final double maxDelta =
                 relativeSymmetryThreshold * Math.max(Math.abs(lIJ), Math.abs(lJI));
             if (Math.abs(lIJ - lJI) > maxDelta) {
                 throw new NotSymmetricMatrixException();
             }
-            lJ[i] = 0;
-       }
+            // Enforce symmetry by copying lJI into lIJ (upper triangle)
+            lTData[i][j] = lJI;
+            // Zero out the lower triangle since decomposition uses upper triangle
+            lTData[j][i] = 0.0;
+        }
     }
 
-    // transform the matrix
+    // Perform the Cholesky decomposition on the upper triangle data
     for (int i = 0; i < order; ++i) {
 
-        final double[] ltI = lTData[i];
+        double[] ltI = lTData[i];
 
-        // check diagonal element
+        // Check diagonal element
+        if (ltI[i] <= 0.0) {
+            throw new NotPositiveDefiniteMatrixException();
+        }
 
         ltI[i] = Math.sqrt(ltI[i]);
         final double inverse = 1.0 / ltI[i];
 
-        for (int q = order - 1; q > i; --q) {
+        for (int q = i + 1; q < order; ++q) {
+            double[] ltQ = lTData[q];
             ltI[q] *= inverse;
-            final double[] ltQ = lTData[q];
             for (int p = q; p < order; ++p) {
                 ltQ[p] -= ltI[q] * ltI[p];
             }
@@ -57,3 +63,4 @@
     }
 
 }
+
