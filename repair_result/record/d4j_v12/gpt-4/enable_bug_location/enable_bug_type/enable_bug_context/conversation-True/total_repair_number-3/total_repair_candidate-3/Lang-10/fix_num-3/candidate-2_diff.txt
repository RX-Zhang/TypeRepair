--- 
+++ 
@@ -1,41 +1,45 @@
 private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {
-    boolean wasWhite= false;
-    for(int i= 0; i<value.length(); ++i) {
-        char c= value.charAt(i);
-        if(Character.isWhitespace(c)) {
-            if(!wasWhite) {
-                wasWhite= true;
+    boolean wasWhite = false;
+    for (int i = 0; i < value.length(); ++i) {
+        char c = value.charAt(i);
+        if (Character.isWhitespace(c)) {
+            if (!wasWhite) {
+                wasWhite = true;
                 regex.append("\\s*+");
             }
             continue;
         }
-        wasWhite= false;
-        switch(c) {
-        case '\'':
-            if(unquote) {
-                if(++i==value.length()) {
-                    return regex;
+        wasWhite = false;
+        switch (c) {
+            case '\'':
+                if (unquote) {
+                    if (++i == value.length()) {
+                        return regex;
+                    }
+                    c = value.charAt(i);
                 }
-                c= value.charAt(i);
-            }
-            break;
-        case '?':
-        case '[':
-        case ']':
-        case '(':
-        case ')':
-        case '{':
-        case '}':
-        case '\\':
-        case '|':
-        case '*':
-        case '+':
-        case '^':
-        case '$':
-        case '.':
-            regex.append('\\');
+                break;
+            case '?':
+            case '[':
+            case ']':
+            case '(':
+            case ')':
+            case '{':
+            case '}':
+            case '\\':
+            case '|':
+            case '*':
+            case '+':
+            case '^':
+            case '$':
+            case '.':
+                regex.append('\\');
+                break;  // Added break to prevent fall-through
+            default:
+                break;
         }
         regex.append(c);
     }
     return regex;
 }
+
