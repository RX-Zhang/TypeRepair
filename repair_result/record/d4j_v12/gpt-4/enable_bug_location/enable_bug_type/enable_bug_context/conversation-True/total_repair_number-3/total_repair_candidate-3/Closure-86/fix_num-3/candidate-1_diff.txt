--- 
+++ 
@@ -5,7 +5,7 @@
       // same as returning a non-local name, but this doesn't matter if the
       // value is immutable.
       return NodeUtil.isImmutableValue(value.getLastChild())
-          || (locals.apply(value)
+          || (locals.apply(value.getFirstChild())
               && evaluatesToLocalValue(value.getLastChild(), locals));
     case Token.COMMA:
       return evaluatesToLocalValue(value.getLastChild(), locals);
@@ -19,32 +19,33 @@
     case Token.INC:
     case Token.DEC:
       if (value.getBooleanProp(Node.INCRDECR_PROP)) {
-        return evaluatesToLocalValue(value.getFirstChild(), locals);
+        return true;
       } else {
-        return true;
+        return false;
       }
     case Token.THIS:
       return locals.apply(value);
     case Token.NAME:
-      return isImmutableValue(value) || locals.apply(value);
+      return NodeUtil.isImmutableValue(value) || locals.apply(value);
     case Token.GETELEM:
     case Token.GETPROP:
       // There is no information about the locality of object properties.
       return locals.apply(value);
     case Token.CALL:
-      return callHasLocalResult(value)
-          || isToStringMethodCall(value)
+      return NodeUtil.callHasLocalResult(value)
+          || NodeUtil.isToStringMethodCall(value)
           || locals.apply(value);
     case Token.NEW:
       // TODO(nicksantos): This needs to be changed so that it
       // returns true iff we're sure the value was never aliased from inside
       // the constructor (similar to callHasLocalResult)
-      return true;
+      return NodeUtil.callHasLocalResult(value)
+          || locals.apply(value);
     case Token.FUNCTION:
     case Token.REGEXP:
     case Token.ARRAYLIT:
     case Token.OBJECTLIT:
-      // Literals objects with non-literal children are allowed.
+      // Literal objects with non-literal children are allowed.
       return true;
     case Token.IN:
       // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
@@ -53,9 +54,9 @@
       // Other op force a local value:
       //  x = '' + g (x is now an local string)
       //  x -= g (x is now an local number)
-      if (isAssignmentOp(value)
-          || isSimpleOperator(value)
-          || isImmutableValue(value)) {
+      if (NodeUtil.isAssignmentOp(value)
+          || NodeUtil.isSimpleOperator(value)
+          || NodeUtil.isImmutableValue(value)) {
         return true;
       }
 
@@ -64,3 +65,4 @@
           "\n parent:" + value.getParent());
   }
 }
+
