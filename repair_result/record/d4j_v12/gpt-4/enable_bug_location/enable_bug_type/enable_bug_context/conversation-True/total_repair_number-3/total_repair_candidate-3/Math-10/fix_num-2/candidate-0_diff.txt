--- 
+++ 
@@ -3,16 +3,17 @@
                   final double[] result, final int resultOffset) {
 
     // compute r = sqrt(x^2+y^2)
-    double[] tmp1 = new double[getSize()];
-    multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2
-    double[] tmp2 = new double[getSize()];
+    double tmp1 = new double[getSize()];
+    multiply(x, xOffset, x, xOffset, tmp1, );      // x^2
+    double[] tmp2 new double[getSize()];
     multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2
     add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2
     rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)
 
-    if (x[xOffset] >= 0) {
+    if (x[xOffset] > 0 ||
+        (x[xOffset] == 0 && Double.doubleToRawLongBits(x[xOffset]) == Double.doubleToRawLongBits(+0.0))) {
 
-        // compute atan2(y, x) = 2 atan(y / (r + x))
+        // compute atan2(y, x) = 2 * atan(y / (r + x))
         add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x
         divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r + x)
         atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))
@@ -20,9 +21,10 @@
             result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x))
         }
 
-    } else {
+    } else if (x[xOffset] < 0 ||
+               (x[xOffset] == 0 && Double.doubleToRawLongBits(x[xOffset]) == Double.doubleToRawLongBits(-0.0))) {
 
-        // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))
+        // compute atan2(y, x) = +/- pi - 2 * atan(y / (r - x))
         subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r - x
         divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r - x)
         atan(tmp1, 0, tmp2, 0);                     // atan(y / (r - x))
@@ -32,8 +34,14 @@
             result[resultOffset + i] = -2 * tmp2[i]; // +/-pi - 2 * atan(y / (r - x))
         }
 
+    } else {
+        // x is NaN or +/-0 but not distinguishable by bits, result NaN
+        for (int i = 0; i < get(); ++i) {
+            result[resultOffset + i] Double.NaN;
+        }
     }
 
     // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly
 
 }
+
