--- 
+++ 
@@ -20,27 +20,31 @@
 
         double cN = a * hPrev + b * p0;
         double q2 = a * q1 + b * dPrev;
+
         if (Double.isInfinite(cN) || Double.isInfinite(q2)) {
+            final double scale = FastMath.max(FastMath.abs(a), FastMath.abs(b));
+            if (scale <= 0) {  // Can't scale
+                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);
+            }
             double scaleFactor = 1d;
             double lastScaleFactor = 1d;
             final int maxPower = 5;
-            final double scale = FastMath.max(a,b);
-            if (scale <= 0) {  // Can't scale
-                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);
-            }
             for (int i = 0; i < maxPower; i++) {
                 lastScaleFactor = scaleFactor;
                 scaleFactor *= scale;
-                if (a != 0.0 && a > b) {
-                    cN = hPrev / lastScaleFactor + (b / scaleFactor * p0);
-                    q2 = q1 / lastScaleFactor + (b / scaleFactor * dPrev);
+                if (a != 0.0 && FastMath.abs(a) >= FastMath.abs(b)) {
+                    cN = (hPrev / lastScaleFactor) + (b / scaleFactor * p0);
+                    q2 = (q1 / lastScaleFactor) + (b / scaleFactor * dPrev);
                 } else if (b != 0) {
-                    cN = (a / scaleFactor * hPrev) + p0 / lastScaleFactor;
-                    q2 = (a / scaleFactor * q1) + dPrev / lastScaleFactor;
+                    cN = (a / scaleFactor * hPrev) + (p0 / lastScaleFactor);
+                    q2 = (a / scaleFactor * q1) + (dPrev / lastScaleFactor);
                 }
                 if (!(Double.isInfinite(cN) || Double.isInfinite(q2))) {
                     break;
                 }
+            }
+            if (Double.isInfinite(cN) || Double.isInfinite(q2)) {
+                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);
             }
         }
 
@@ -48,12 +52,10 @@
         hN = cPrev * deltaN;
 
         if (Double.isInfinite(hN)) {
-            throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,
-                                           x);
+            throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);
         }
         if (Double.isNaN(hN)) {
-            throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,
-                                           x);
+            throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, x);
         }
 
         if (FastMath.abs(deltaN - 1.0) < epsilon) {
@@ -69,9 +71,9 @@
     }
 
     if (n >= maxIterations) {
-        throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,
-                                            maxIterations, x);
+        throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION, maxIterations, x);
     }
 
     return hN;
 }
+
