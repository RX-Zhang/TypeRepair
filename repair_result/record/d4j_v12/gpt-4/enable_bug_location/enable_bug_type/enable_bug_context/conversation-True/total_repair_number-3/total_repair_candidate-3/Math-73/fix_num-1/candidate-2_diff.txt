--- 
+++ 
@@ -3,7 +3,10 @@
     throws MaxIterationsExceededException, FunctionEvaluationException {
 
     clearResult();
-    verifySequence(min, initial, max);
+    verifySequence(min, max);
+    if (initial < min || initial > max) {
+        throw new IllegalArgumentException("Initial guess must be within the interval [" + min + ", " + max + "]");
+    }
 
     // return the initial guess if it is good enough
     double yInitial = f.value(initial);
@@ -15,29 +18,37 @@
     // return the first endpoint if it is good enough
     double yMin = f.value(min);
     if (Math.abs(yMin) <= functionValueAccuracy) {
-        setResult(yMin, 0);
+        setResult(min, 0);
         return result;
+    }
+
+    // check that the interval brackets a root
+    double yMax = f.value(max);
+    if (Math.abs(yMax) <= functionValueAccuracy) {
+        setResult(max, 0);
+        return result;
+    }
+
+    if (yMin * yMax > 0) {
+        throw new IllegalArgumentException(
+            NON_BRACKETING_MESSAGE.replace("{0}", Double.toString(min))
+                                 .replace("{1}", Double.toString(max))
+                                 .replace("{2}", Double.toString(yMin))
+                                 .replace("{3}", Double.toString(yMax))
+        );
     }
 
     // reduce interval if min and initial bracket the root
     if (yInitial * yMin < 0) {
         return solve(f, min, yMin, initial, yInitial, min, yMin);
     }
-
-    // return the second endpoint if it is good enough
-    double yMax = f.value(max);
-    if (Math.abs(yMax) <= functionValueAccuracy) {
-        setResult(yMax, 0);
-        return result;
-    }
-
+    
     // reduce interval if initial and max bracket the root
     if (yInitial * yMax < 0) {
         return solve(f, initial, yInitial, max, yMax, initial, yInitial);
     }
 
+    // fallback - use full Brent algorithm starting with provided initial guess
+    return solve(f, min, yMin, max, yMax, initial, yInitial);
+}
 
-    // full Brent algorithm starting with provided initial guess
-    return solve(f, min, yMin, max, yMax, initial, yInitial);
-
-}
