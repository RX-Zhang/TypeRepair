--- 
+++ 
@@ -42,11 +42,13 @@
 
         // Update the bounds with the new approximation.
         if (f1 * fx < 0) {
-            // The value of x1 has switched to the other bound, thus inverting
+            // The value of x0 has switched to the other bound, thus inverting
             // the interval.
             x0 = x1;
             f0 = f1;
             inverted = !inverted;
+            x1 = x;
+            f1 = fx;
         } else {
             switch (method) {
             case ILLINOIS:
@@ -58,7 +60,7 @@
             case REGULA_FALSI:
                 // Nothing.
                 if (x == x1) {
-                    x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));
+                    x0 = 0.5 * (x0 + x1 - Math.max(rtol * Math.abs(x1), atol));
                     f0 = computeObjectiveValue(x0);
                 }
                 break;
@@ -66,15 +68,14 @@
                 // Should never happen.
                 throw new MathInternalError();
             }
+            x1 = x;
+            f1 = fx;
         }
-        // Update from [x0, x1] to [x0, x].
-        x1 = x;
-        f1 = fx;
 
         // If the function value of the last approximation is too small,
         // given the function value accuracy, then we can't get closer to
         // the root than we already are.
-        if (FastMath.abs(f1) <= ftol) {
+        if (Math.abs(f1) <= ftol) {
             switch (allowed) {
             case ANY_SIDE:
                 return x1;
@@ -105,8 +106,8 @@
 
         // If the current interval is within the given accuracies, we
         // are satisfied with the current approximation.
-        if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
-                                                 atol)) {
+        if (Math.abs(x1 - x0) < Math.max(rtol * Math.abs(x1),
+                                         atol)) {
             switch (allowed) {
             case ANY_SIDE:
                 return x1;
@@ -124,3 +125,4 @@
         }
     }
 }
+
