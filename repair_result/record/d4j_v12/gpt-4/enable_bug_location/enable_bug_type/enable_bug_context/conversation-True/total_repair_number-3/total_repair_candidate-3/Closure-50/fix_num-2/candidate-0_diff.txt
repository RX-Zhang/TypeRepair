--- 
+++ 
@@ -20,8 +20,7 @@
     return n;
   }
 
-    // "," is the default, it doesn't need to be explicit
-
+  // "," is the default, it doesn't need to be explicit
   String joinString = (right == null) ? "," : NodeUtil.getStringValue(right);
   List<Node> arrayFoldedChildren = Lists.newLinkedList();
   StringBuilder sb = null;
@@ -64,6 +63,7 @@
   foldedSize += arrayFoldedChildren.size() - 1;
 
   int originalSize = InlineCostEstimator.getCost(n);
+
   switch (arrayFoldedChildren.size()) {
     case 0:
       Node emptyStringNode = Node.newString("");
@@ -98,13 +98,33 @@
       if (foldedSize > originalSize) {
         return n;
       }
+      // Fix: When the original join had an explicit separator, we should keep it in the folded call.
       arrayNode.detachChildren();
       for (Node node : arrayFoldedChildren) {
         arrayNode.addChildToBack(node);
       }
+
+      if (right == null) {
+        // No explicit separator: remove the argument from the join call.
+        // So set the function call's RHS to 'join()' with no args.
+        // The current node is a call node with call target: array.join, args: right (optional).
+        // Remove the argument node.
+        // n is CALL node, first child is callTarget (GETPROP), second child is argument list.
+        n.removeChild(right);
+      } else {
+        // There was an explicit argument that we must keep: replace the join separator string with null to force join() call here.
+        // Actually no modification needed because we kept right node.
+        // But the tests expect that if argument is default ",", then argument is omitted
+        // So if joinString is ",", omit argument.
+        if (",".equals(joinString)) {
+          n.removeChild(right);
+        }
+      }
+
       reportCodeChange();
       break;
   }
 
   return n;
 }
+
