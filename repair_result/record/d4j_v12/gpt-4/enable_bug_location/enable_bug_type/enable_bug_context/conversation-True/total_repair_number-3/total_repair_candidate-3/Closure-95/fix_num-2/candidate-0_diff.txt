--- 
+++ 
@@ -1,13 +1,13 @@
 void defineSlot(Node n, Node parent, JSType type, boolean inferred) {
   Preconditions.checkArgument(inferred || type != null);
 
-  // Only allow declarations of NAMEs and qualfied names.
+  // Only allow declarations of NAMEs and qualified names.
   boolean shouldDeclareOnGlobalThis = false;
   if (n.getType() == Token.NAME) {
     Preconditions.checkArgument(
         parent.getType() == Token.FUNCTION ||
         parent.getType() == Token.VAR ||
-        parent.getType() == Token.LP ||
+        parent.getType() == Token.LPAREN ||
         parent.getType() == Token.CATCH);
     shouldDeclareOnGlobalThis = scope.isGlobal() &&
         (parent.getType() == Token.VAR ||
@@ -26,8 +26,8 @@
   // who declare "global" names in an anonymous namespace.
   Scope scopeToDeclareIn = scope;
 
-    // don't try to declare in the global scope if there's
-    // already a symbol there with this name.
+  // don't try to declare in the global scope if there's
+  // already a symbol there with this name.
 
   // declared in closest scope?
   if (scopeToDeclareIn.isDeclared(variableName, false)) {
@@ -65,10 +65,11 @@
         scopeToDeclareIn.declare(variableName + ".prototype", n,
             fnType.getPrototype(), compiler.getInput(sourceName),
             /* declared iff there's an explicit supertype */
-            superClassCtor == null ||
+            !(superClassCtor == null ||
             superClassCtor.getInstanceType().equals(
-                getNativeType(OBJECT_TYPE)));
+                getNativeType(JSTypeNative.OBJECT_TYPE))));
       }
     }
   }
 }
+
