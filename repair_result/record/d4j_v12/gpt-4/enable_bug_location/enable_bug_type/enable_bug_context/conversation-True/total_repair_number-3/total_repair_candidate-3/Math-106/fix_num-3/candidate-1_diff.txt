--- 
+++ 
@@ -4,7 +4,7 @@
     if (ret != null) {
         return ret;
     }
-    
+
     int initialIndex = pos.getIndex();
 
     // parse whitespace
@@ -22,7 +22,7 @@
 
     // parse whitespace
     parseAndIgnoreWhitespace(source, pos);
-    
+
     // parse numerator
     Number num = getNumeratorFormat().parse(source, pos);
     if (num == null) {
@@ -33,7 +33,13 @@
         return null;
     }
     
-        // minus signs should be leading, invalid expression
+    // Validate minus signs in whole and numerator parts
+    // Minus signs should be leading only and not on both whole and numerator
+    if ((whole.intValue() < 0 && num.intValue() < 0) || (num.intValue() < 0)) {
+        pos.setIndex(initialIndex);
+        pos.setErrorIndex(pos.getIndex());
+        return null;
+    }
 
     // parse '/'
     int startIndex = pos.getIndex();
@@ -68,10 +74,16 @@
         return null;
     }
     
-        // minus signs must be leading, invalid
+    // minus signs must be leading, invalid
+    if (den.intValue() < 0) {
+        pos.setIndex(initialIndex);
+        pos.setErrorIndex(pos.getIndex());
+        return null;
+    }
 
     int w = whole.intValue();
     int n = num.intValue();
     int d = den.intValue();
     return new Fraction(((Math.abs(w) * d) + n) * MathUtils.sign(w), d);
 }
+
