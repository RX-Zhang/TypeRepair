--- 
+++ 
@@ -8,14 +8,17 @@
     // Need to deal with all possible hex prefixes here
     final String[] hex_prefixes = {"0x", "0X", "-0x", "-0X", "#", "-#"};
     int pfxLen = 0;
+    String pfxFound = null;
     for(final String pfx : hex_prefixes) {
         if (str.startsWith(pfx)) {
-            pfxLen += pfx.length();
+            pfxLen = pfx.length();
+            pfxFound = pfx;
             break;
         }
     }
     if (pfxLen > 0) { // we have a hex number
-        final int hexDigits = str.length() - pfxLen;
+        final String hexNumber = str.substring(pfxLen);
+        final int hexDigits = hexNumber.length();
         if (hexDigits > 16) { // too many for Long
             return createBigInteger(str);
         }
@@ -29,9 +32,16 @@
     String dec;
     String exp;
     final int decPos = str.indexOf('.');
-    final int expPos = str.indexOf('e') + str.indexOf('E') + 1; // assumes both not present
-    // if both e and E are present, this is caught by the checks on expPos (which prevent IOOBE)
-    // and the parsing which will detect if e or E appear in a number due to using the wrong offset
+    final int indexOfE = str.indexOf('e');
+    final int indexOfBigE = str.indexOf('E');
+    final int expPos;
+    if (indexOfE == -1) {
+        expPos = indexOfBigE;
+    } else if (indexOfBigE == -1) {
+        expPos = indexOfE;
+    } else {
+        expPos = Math.min(indexOfE, indexOfBigE);
+    }
 
     int numDecimals = 0; // Check required precision (LANG-693)
     if (decPos > -1) { // there is a decimal point
@@ -163,3 +173,4 @@
 
     return createBigDecimal(str);
 }
+
