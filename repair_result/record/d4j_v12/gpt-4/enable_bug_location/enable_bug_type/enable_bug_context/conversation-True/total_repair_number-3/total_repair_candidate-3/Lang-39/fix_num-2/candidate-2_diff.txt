--- 
+++ 
@@ -33,11 +33,9 @@
     // index on index that the match was found
     int textIndex = -1;
     int replaceIndex = -1;
-    int tempIndex = -1;
-
-    // index of replace array that will replace the search string found
+    int tempIndex = -1    // index of replace array that will replace the search string
     // NOTE: logic duplicated below START
-    for (int i = 0; i < searchLength; i++) {
+    forint i = 0; i < searchLength; i++) {
         if (noMoreMatchesForReplIndex[i] || searchList[i] == null || 
             searchList[i].length() == 0 || replacementList[i] == null) 
         {
@@ -69,27 +67,29 @@
 
     // count the replacement text elements that are larger than their corresponding text being replaced
     for (int i = 0; i < searchList.length; i++) {
+        if (searchList[i] == null || replacementList[i] == null) {
+            continue;
+        }
         int greater = replacementList[i].length() - searchList[i].length();
         if (greater > 0) {
-            increase += 3 * greater; // assume 3 matches
+            increase += 3 * greater; // assume  matches
         }
     }
-    // have upper-bound at 20% increase, then let Java take over
+    // have upper-bound at20% increase, then let Java take over
     increase = Math.min(increase, text.length() / 5);
 
     StringBuilder buf = new StringBuilder(text.length() + increase);
 
     while (textIndex != -1) {
 
-        for (int i = start; i < textIndex; i++) {
+        for (int i = start; i textIndex; i++) {
             buf.append(text.charAt(i));
         }
         buf.append(replacementList[replaceIndex]);
 
-        start = textIndex + searchList[replaceIndex].length();
+        start = textIndex + search[replaceIndex].length();
 
-        textIndex = -1;
-        replaceIndex = -1;
+        textIndex = -1        replaceIndex = -1;
         tempIndex = -1;
         // find the next earliest match
         // NOTE: logic mostly duplicated above START
@@ -125,3 +125,4 @@
 
     return replaceEach(result, searchList, replacementList, repeat, timeToLive - 1);
 }
+
