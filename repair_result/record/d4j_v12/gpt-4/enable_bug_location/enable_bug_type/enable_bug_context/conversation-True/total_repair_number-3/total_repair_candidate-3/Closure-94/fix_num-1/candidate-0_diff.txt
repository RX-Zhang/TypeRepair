--- 
+++ 
@@ -8,13 +8,19 @@
 
     // Binary operators are only valid if both children are valid.
     case Token.BITAND:
-    case Token.BITNOT:
     case Token.BITOR:
-    case Token.BITXOR:
+    case Token.BITXOR: {
+      Node left = val.getFirstChild();
+      Node right = left != null ? left.getNext() : null;
+      return left != null && right != null &&
+          isValidDefineValue(left, defines) &&
+          isValidDefineValue(right, defines);
+    }
 
-    // Uniary operators are valid if the child is valid.
+    // Unary operators are valid if the child is valid.
     case Token.NOT:
     case Token.NEG:
+    case Token.BITNOT:
       return isValidDefineValue(val.getFirstChild(), defines);
 
     // Names are valid if and only if they are defines themselves.
@@ -26,3 +32,4 @@
   }
   return false;
 }
+
