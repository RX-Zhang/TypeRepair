--- 
+++ 
@@ -9,8 +9,13 @@
     return null;
   }
 
+  int numLines = getNumLines();
+  if (lineNumber < 1 || lineNumber > numLines) {
+    return null;
+  }
+
+  int startLine = 1;
   int pos = 0;
-  int startLine = 1;
 
   // If we've saved a previous offset and it's for a line less than the
   // one we're searching for, then start at that point.
@@ -19,9 +24,11 @@
     startLine = lastLine;
   }
 
+  // Find the offset for the requested line by walking forward from pos
   for (int n = startLine; n < lineNumber; n++) {
     int nextpos = js.indexOf('\n', pos);
     if (nextpos == -1) {
+      // No more lines, but asked for a line beyond that
       return null;
     }
     pos = nextpos + 1;
@@ -31,12 +38,13 @@
   lastOffset = pos;
   lastLine = lineNumber;
 
-  if (js.indexOf('\n', pos) == -1) {
-    // If next new line cannot be found, there are two cases
-    // 1. pos already reaches the end of file, then null should be returned
-    // 2. otherwise, return the contents between pos and the end of file.
-      return null;
+  int nextNewLinePos = js.indexOf('\n', pos);
+  if (nextNewLinePos == -1) {
+    // If no next new line, return substring from pos to end of string
+    return js.substring(pos);
   } else {
-    return js.substring(pos, js.indexOf('\n', pos));
+    // Return substring between pos and next new line
+    return js.substring(pos, nextNewLinePos);
   }
 }
+
