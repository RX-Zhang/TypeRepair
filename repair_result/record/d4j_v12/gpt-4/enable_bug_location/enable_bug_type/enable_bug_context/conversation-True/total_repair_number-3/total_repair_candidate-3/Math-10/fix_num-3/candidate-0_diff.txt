--- 
+++ 
@@ -10,12 +10,12 @@
     add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2
     rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)
 
-    if (x[xOffset] >= 0) {
+    if (FastMath.copySign(1.0, x[xOffset]) > 0) {
 
         // compute atan2(y, x) = 2 atan(y / (r + x))
         add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x
         divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r + x)
-        atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))
+        atan(tmp1, 0, tmp2, 0);                      // atan(y / (r + x))
         for (int i = 0; i < tmp2.length; ++i) {
             result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x))
         }
@@ -25,11 +25,12 @@
         // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))
         subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r - x
         divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r - x)
-        atan(tmp1, 0, tmp2, 0);                     // atan(y / (r - x))
+        atan(tmp1, 0, tmp2, 0);                      // atan(y / (r - x))
+        double sign = (FastMath.copySign(1.0, y[yOffset]) > 0) ? 1 : -1;
         result[resultOffset] =
-                ((tmp2[0] <= 0) ? -FastMath.PI : FastMath.PI) - 2 * tmp2[0]; // +/-pi - 2 * atan(y / (r - x))
+                sign * FastMath.PI - 2 * tmp2[0];    // +/-pi - 2 * atan(y / (r - x))
         for (int i = 1; i < tmp2.length; ++i) {
-            result[resultOffset + i] = -2 * tmp2[i]; // +/-pi - 2 * atan(y / (r - x))
+            result[resultOffset + i] = -2 * tmp2[i]; // derivatives
         }
 
     }
@@ -37,3 +38,4 @@
     // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly
 
 }
+
