--- 
+++ 
@@ -2,7 +2,7 @@
                   final double[] x, final int xOffset,
                   final double[] result, final int resultOffset) {
 
-    // compute r = sqrt(x^2+y^2)
+    // compute r = sqrt(x^2 + y^2)
     double[] tmp1 = new double[getSize()];
     multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2
     double[] tmp2 = new double[getSize()];
@@ -10,12 +10,12 @@
     add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2
     rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)
 
-    if (x[xOffset] >= 0) {
+    if (x[xOffset] > 0 || (x[xOffset] == 0 && y[yOffset] >= 0)) {
 
         // compute atan2(y, x) = 2 atan(y / (r + x))
         add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x
-        divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r + x)
-        atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))
+        divide(y, yOffset, tmp2, 0, tmp1, 0);       // y / (r + x)
+        atan(tmp1, 0, tmp2, 0);                      // atan(y / (r + x))
         for (int i = 0; i < tmp2.length; ++i) {
             result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x))
         }
@@ -24,8 +24,8 @@
 
         // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))
         subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r - x
-        divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r - x)
-        atan(tmp1, 0, tmp2, 0);                     // atan(y / (r - x))
+        divide(y, yOffset, tmp2, 0, tmp1, 0);       // y / (r - x)
+        atan(tmp1, 0, tmp2, 0);                      // atan(y / (r - x))
         result[resultOffset] =
                 ((tmp2[0] <= 0) ? -FastMath.PI : FastMath.PI) - 2 * tmp2[0]; // +/-pi - 2 * atan(y / (r - x))
         for (int i = 1; i < tmp2.length; ++i) {
@@ -34,6 +34,5 @@
 
     }
 
-    // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly
+}
 
-}
