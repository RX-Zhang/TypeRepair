--- 
+++ 
@@ -1,8 +1,28 @@
 public void captureArgumentsFrom(Invocation invocation) {
     if (invocation.getMethod().isVarArgs()) {
         int indexOfVararg = invocation.getRawArguments().length - 1;
-        throw new UnsupportedOperationException();
-
+        // process all matchers except for the vararg argument first
+        for (int position = 0; position < indexOfVararg; position++) {
+            Matcher m = matchers.get(position);
+            if (m instanceof CapturesArguments) {
+                ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
+            }
+        }
+        // handle vararg matcher separately
+        if (indexOfVararg < matchers.size()) {
+            Matcher m = matchers.get(indexOfVararg);
+            if (m instanceof CapturesArguments && isVarargMatcher(m)) {
+                Object array = invocation.getRawArguments()[indexOfVararg];
+                if (array != null && array.getClass().isArray()) {
+                    for (int i = 0; i < Array.getLength(array); i++) {
+                        ((CapturesArguments) m).captureFrom(Array.get(array, i));
+                    }
+                }
+            } else if (m instanceof CapturesArguments) {
+                ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[indexOfVararg]);
+            }
+        }
+        return;
     } else {
         for (int position = 0; position < matchers.size(); position++) {
             Matcher m = matchers.get(position);
@@ -12,20 +32,21 @@
         }
     }
 
-      for (int position = 0; position < matchers.size(); position++) {
-          Matcher m = matchers.get(position);
-          if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {
-              //TODO SF - this whole lot can be moved captureFrom implementation
-              if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {
-                  Object array = invocation.getRawArguments()[position];
-                  for (int i = 0; i < Array.getLength(array); i++) {
-                      ((CapturesArguments) m).captureFrom(Array.get(array, i));
-                  }
-                  //since we've captured all varargs already, it does not make sense to process other matchers.
-                  return;
-              } else {
-                  ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
-              }
-          }
-      }
+    for (int position = 0; position < matchers.size(); position++) {
+        Matcher m = matchers.get(position);
+        if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {
+            if (isVariableArgument(invocation, position) && isVarargMatcher(m)) {
+                Object array = invocation.getRawArguments()[position];
+                if (array != null && array.getClass().isArray()) {
+                    for (int i = 0; i < Array.getLength(array); i++) {
+                        ((CapturesArguments) m).captureFrom(Array.get(array, i));
+                    }
+                }
+                return;
+            } else {
+                ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
+            }
+        }
+    }
 }
+
