--- 
+++ 
@@ -10,7 +10,7 @@
     int pfxLen = 0;
     for(final String pfx : hex_prefixes) {
         if (str.startsWith(pfx)) {
-            pfxLen += pfx.length();
+            pfxLen = pfx.length();
             break;
         }
     }
@@ -29,7 +29,14 @@
     String dec;
     String exp;
     final int decPos = str.indexOf('.');
-    final int expPos = str.indexOf('e') + str.indexOf('E') + 1; // assumes both not present
+    final int ePos = str.indexOf('e');
+    final int EPos = str.indexOf('E');
+    int expPos = -1;
+    if (ePos > -1 && EPos > -1) {
+        expPos = Math.min(ePos, EPos);
+    } else {
+        expPos = Math.max(ePos, EPos);
+    }
     // if both e and E are present, this is caught by the checks on expPos (which prevent IOOBE)
     // and the parsing which will detect if e or E appear in a number due to using the wrong offset
 
@@ -99,7 +106,7 @@
             case 'D' :
                 try {
                     final Double d = NumberUtils.createDouble(numeric);
-                    if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
+                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
                         return d;
                     }
                 } catch (final NumberFormatException nfe) { // NOPMD
@@ -141,21 +148,22 @@
     //Must be a Float, Double, BigDecimal
     final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
     try {
-            final Float f = createFloat(str);
-            if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
-                return f;
-            }
+        final Float f = createFloat(str);
+        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
+            return f;
+        }
     } catch (final NumberFormatException nfe) { // NOPMD
         // ignore the bad number
     }
     try {
-            final Double d = createDouble(str);
-            if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
-                return d;
-            }
+        final Double d = createDouble(str);
+        if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
+            return d;
+        }
     } catch (final NumberFormatException nfe) { // NOPMD
         // ignore the bad number
     }
 
     return createBigDecimal(str);
 }
+
