--- 
+++ 
@@ -6,8 +6,8 @@
     // Checks whether there is at least one finite bound value.
     boolean hasFiniteBounds = false;
     for (int i = 0; i < lB.length; i++) {
-        if (!Double.isInfinite(lB[i]) ||
-            !Double.isInfinite(uB[i])) {
+        if (!Double.isInfinite(lB[i]) && 
+            !Double.isInfinite(uB[i])) { // Corrected from || to &&
             hasFiniteBounds = true;
             break;
         }
@@ -34,6 +34,17 @@
             boundaries[1] = uB;
 
             // Abort early if the normalization will overflow (cf. "encode" method).
+            for (int i = 0; i < boundaries[0].length; i++) {
+                double diff = boundaries[1][i] - boundaries[0][i];
+                if (diff <= 0 || Double.isNaN(diff) || Double.isInfinite(diff)) {
+                    throw new NumberIsTooLargeException(boundaries[1][i], boundaries[0][i], false);
+                }
+                // Also check for potential overflow if difference is extremely large
+                // preventing normalization overflow as per comment in test case.
+                if (diff >= Double.MAX_VALUE / 2) {
+                    throw new NumberIsTooLargeException(diff, Double.MAX_VALUE / 2, false);
+                }
+            }
         }
     } else {
         // Convert API to internal handling of boundaries.
@@ -56,3 +67,4 @@
         }
     }
 }
+
