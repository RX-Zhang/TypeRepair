--- 
+++ 
@@ -6,26 +6,29 @@
   // prototype chain. So climb the prototype chain and find out where
   // the property was originally defined.
   if (n.isGetProp()) {
-    ObjectType objectType = getJSType(n.getFirstChild()).dereference();
-    if (objectType != null) {
-      String propName = n.getLastChild().getString();
-      if (objectType.getConstructor() != null &&
-          objectType.getConstructor().isInterface()) {
-        objectType = FunctionType.getTopDefiningInterface(
-            objectType, propName);
-      } else {
-        // classes
-        while (objectType != null && !objectType.hasOwnProperty(propName)) {
-          objectType = objectType.getImplicitPrototype();
+    JSType jstype = getJSType(n.getFirstChild());
+    if (jstype != null) {
+      ObjectType objectType = jstype.dereference();
+      if (objectType != null) {
+        String propName = n.getLastChild().getString();
+        if (objectType.getConstructor() != null &&
+            objectType.getConstructor().isInterface()) {
+          objectType = FunctionType.getTopDefiningInterface(
+              objectType, propName);
+        } else {
+          // classes
+          while (objectType != null && !objectType.hasOwnProperty(propName)) {
+            objectType = objectType.getImplicitPrototype();
+          }
         }
-      }
 
-      // Don't show complex function names or anonymous types.
-      // Instead, try to get a human-readable type name.
-      if (objectType != null &&
-          (objectType.getConstructor() != null ||
-           objectType.isFunctionPrototypeType())) {
-        return objectType.toString() + "." + propName;
+        // Don't show complex function names or anonymous types.
+        // Instead, try to get a human-readable type name.
+        if (objectType != null &&
+            (objectType.getConstructor() != null ||
+             objectType.isFunctionPrototypeType())) {
+          return objectType.toString() + "." + propName;
+        }
       }
     }
   }
@@ -52,3 +55,4 @@
     return type.toString();
   }
 }
+
