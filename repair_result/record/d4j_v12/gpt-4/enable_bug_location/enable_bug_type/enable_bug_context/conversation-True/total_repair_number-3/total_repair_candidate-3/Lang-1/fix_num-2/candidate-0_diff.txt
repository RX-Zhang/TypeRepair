--- 
+++ 
@@ -10,7 +10,7 @@
     int pfxLen = 0;
     for(final String pfx : hex_prefixes) {
         if (str.startsWith(pfx)) {
-            pfxLen += pfx.length();
+            pfxLen = pfx.length();
             break;
         }
     }
@@ -29,9 +29,14 @@
     String dec;
     String exp;
     final int decPos = str.indexOf('.');
-    final int expPos = str.indexOf('e') + str.indexOf('E') + 1; // assumes both not present
-    // if both e and E are present, this is caught by the checks on expPos (which prevent IOOBE)
-    // and the parsing which will detect if e or E appear in a number due to using the wrong offset
+    final int ePosLower = str.indexOf('e');
+    final int ePosUpper = str.indexOf('E');
+    final int expPos;
+    if (ePosLower > -1 && ePosUpper > -1) {
+        expPos = Math.min(ePosLower, ePosUpper);
+    } else {
+        expPos = Math.max(ePosLower, ePosUpper);
+    }
 
     int numDecimals = 0; // Check required precision (LANG-693)
     if (decPos > -1) { // there is a decimal point
@@ -71,7 +76,7 @@
             case 'L' :
                 if (dec == null
                     && exp == null
-                    && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
+                    && (numeric.charAt(0) == '-' ? isDigits(numeric.substring(1)) : isDigits(numeric))) {
                     try {
                         return createLong(numeric);
                     } catch (final NumberFormatException nfe) { // NOPMD
@@ -99,7 +104,7 @@
             case 'D' :
                 try {
                     final Double d = NumberUtils.createDouble(numeric);
-                    if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
+                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
                         return d;
                     }
                 } catch (final NumberFormatException nfe) { // NOPMD
@@ -163,3 +168,4 @@
 
     return createBigDecimal(str);
 }
+
