--- 
+++ 
@@ -9,34 +9,19 @@
     return null;
   }
 
-  int pos = 0;
-  int startLine = 1;
+  int numLines = getNumLines();
 
-  // If we've saved a previous offset and it's for a line less than the
-  // one we're searching for, then start at that point.
-  if (lineNumber >= lastLine) {
-    pos = lastOffset;
-    startLine = lastLine;
+  if (lineNumber < 1 || lineNumber > numLines) {
+    return null;
   }
 
-  for (int n = startLine; n < lineNumber; n++) {
-    int nextpos = js.indexOf('\n', pos);
-    if (nextpos == -1) {
-      return null;
-    }
-    pos = nextpos + 1;
+  int startOffset = getLineOffset(lineNumber);
+  int endOffset = (lineNumber == numLines) ? js.length() : getLineOffset(lineNumber + 1) - 1;
+
+  if (startOffset > js.length() || startOffset < 0) {
+    return null;
   }
 
-  // Remember this offset for the next search we do.
-  lastOffset = pos;
-  lastLine = lineNumber;
+  return js.substring(startOffset, Math.min(endOffset, js.length()));
+}
 
-  if (js.indexOf('\n', pos) == -1) {
-    // If next new line cannot be found, there are two cases
-    // 1. pos already reaches the end of file, then null should be returned
-    // 2. otherwise, return the contents between pos and the end of file.
-      return null;
-  } else {
-    return js.substring(pos, js.indexOf('\n', pos));
-  }
-}
