--- 
+++ 
@@ -10,22 +10,35 @@
     add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2
     rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)
 
-    if (x[xOffset] >= 0) {
+    double x0 = x[xOffset];
+    double y0 = y[yOffset];
+    
+    // Handle special cases for zero arguments to produce correct signed zero results
+    if (x0 == 0.0 && y0 == 0.0) {
+        // atan2 with both arguments zero, result depends on sign bits
+        result[resultOffset] = Math.copySign(0.0, y0);
+        for (int i = 1; i < getSize(); ++i) {
+            result[resultOffset + i] = 0.0;
+        }
+        return;
+    }
+
+    if (x0 >= 0) {
 
         // compute atan2(y, x) = 2 atan(y / (r + x))
         add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x
         divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r + x)
-        atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))
+        atan(tmp1, 0, tmp2, 0);                      // atan(y / (r + x))
         for (int i = 0; i < tmp2.length; ++i) {
             result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x))
         }
 
     } else {
 
-        // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))
+        // compute atan2(y, x) = +/- pi - 2 * atan(y / (r - x))
         subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r - x
         divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r - x)
-        atan(tmp1, 0, tmp2, 0);                     // atan(y / (r - x))
+        atan(tmp1, 0, tmp2, 0);                      // atan(y / (r - x))
         result[resultOffset] =
                 ((tmp2[0] <= 0) ? -FastMath.PI : FastMath.PI) - 2 * tmp2[0]; // +/-pi - 2 * atan(y / (r - x))
         for (int i = 1; i < tmp2.length; ++i) {
@@ -37,3 +50,4 @@
     // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly
 
 }
+
