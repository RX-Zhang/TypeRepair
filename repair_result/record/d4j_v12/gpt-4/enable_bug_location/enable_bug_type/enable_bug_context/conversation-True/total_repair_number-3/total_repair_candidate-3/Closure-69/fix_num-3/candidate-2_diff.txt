--- 
+++ 
@@ -8,22 +8,17 @@
     return;
   }
 
-  // A couple of types can be called as if they were functions.
-  // If it is a function type, then validate parameters.
   if (childType instanceof FunctionType) {
     FunctionType functionType = (FunctionType) childType;
 
     boolean isExtern = false;
     JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();
-    if(functionJSDocInfo != null) {
+    if (functionJSDocInfo != null) {
       String sourceName = functionJSDocInfo.getSourceName();
       CompilerInput functionSource = compiler.getInput(sourceName);
-      isExtern = functionSource.isExtern();
+      isExtern = functionSource != null && functionSource.isExtern();
     }
 
-    // Non-native constructors should not be called directly
-    // unless they specify a return type and are defined
-    // in an extern.
     if (functionType.isConstructor() &&
         !functionType.isNativeObjectType() &&
         (functionType.getReturnType().isUnknownType() ||
@@ -31,17 +26,17 @@
          !isExtern)) {
       report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());
     }
-
-    // Functions with explcit 'this' types must be called in a GETPROP
-    // or GETELEM.
+    
+    // Check if function has explicit 'this' type and if call is a simple call
+    // If so, report error that it must be called with a "this" type
+    if (functionType.hasThisType() && !NodeUtil.isGet(child.getParent())) {
+      report(t, n, EXPECTED_THIS_TYPE, functionType.toString());
+    }
 
     visitParameterList(t, n, functionType);
     ensureTyped(t, n, functionType.getReturnType());
   } else {
     ensureTyped(t, n);
   }
+}
 
-  // TODO: Add something to check for calls of RegExp objects, which is not
-  // supported by IE.  Either say something about the return type or warn
-  // about the non-portability of the call or both.
-}
