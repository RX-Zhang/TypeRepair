--- 
+++ 
@@ -4,8 +4,8 @@
     long overflow = Integer.MAX_VALUE;
     double r0 = value;
     long a0 = (long)FastMath.floor(r0);
-    if (a0 > overflow) {
-        throw new FractionConversionException(value, a0, 1l);
+    if (a0 > overflow || a0 < -overflow) {
+        throw new FractionConversionException(value, a0, 1L);
     }
 
     // check for (almost) integer arguments, which should not go
@@ -29,36 +29,40 @@
     do {
         ++n;
         double r1 = 1.0 / (r0 - a0);
+        if (Double.isInfinite(r1) || Double.isNaN(r1)) {
+            break;
+        }
         long a1 = (long)FastMath.floor(r1);
         p2 = (a1 * p1) + p0;
         q2 = (a1 * q1) + q0;
-        if ((p2 > overflow) || (q2 > overflow)) {
+
+        if (p2 > overflow || p2 < -overflow || q2 > overflow || q2 < -overflow) {
             throw new FractionConversionException(value, p2, q2);
         }
 
         double convergent = (double)p2 / (double)q2;
-        if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) {
+
+        if (n >= maxIterations || FastMath.abs(convergent - value) <= epsilon || q2 > maxDenominator) {
+            stop = true;
+        } else {
             p0 = p1;
             p1 = p2;
             q0 = q1;
             q1 = q2;
             a0 = a1;
             r0 = r1;
-        } else {
-            stop = true;
         }
     } while (!stop);
 
-    if (n >= maxIterations) {
-        throw new FractionConversionException(value, maxIterations);
+    try {
+        Fraction reduced = Fraction.getReducedFraction((int)p2, (int)q2);
+        this.numerator = reduced.getNumerator();
+        this.denominator = reduced.getDenominator();
+    } catch (ArithmeticException e) {
+        // if reduction failed or overflow occurs, fallback to previous convergent
+        Fraction reduced = Fraction.getReducedFraction((int)p1, (int)q1);
+        this.numerator = reduced.getNumerator();
+        this.denominator = reduced.getDenominator();
     }
+}
 
-    if (q2 < maxDenominator) {
-        this.numerator = (int) p2;
-        this.denominator = (int) q2;
-    } else {
-        this.numerator = (int) p1;
-        this.denominator = (int) q1;
-    }
-
-}
