--- 
+++ 
@@ -4,15 +4,23 @@
         throw new IllegalArgumentException("Instant must not be null");
     }
     
+    // Use initial chronology from formatter or from the instant
+    Chronology chrono = instant.getChronology();
+    chrono = selectChronology(chrono);
+
+    // Use the local instant based on chronology zone and instant millis
     long instantMillis = instant.getMillis();
-    Chronology chrono = instant.getChronology();
     long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);
-    chrono = selectChronology(chrono);
-    
+
     DateTimeParserBucket bucket = new DateTimeParserBucket(
         instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);
     int newPos = parser.parseInto(bucket, text, position);
-    instant.setMillis(bucket.computeMillis(false, text));
+
+    // Compute the millis from parsed values, using false for UTC
+    long parsedMillis = bucket.computeMillis(false, text);
+    // Set millis first
+    instant.setMillis(parsedMillis);
+
     if (iOffsetParsed && bucket.getOffsetInteger() != null) {
         int parsedOffset = bucket.getOffsetInteger();
         DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);
@@ -20,9 +28,13 @@
     } else if (bucket.getZone() != null) {
         chrono = chrono.withZone(bucket.getZone());
     }
+
     instant.setChronology(chrono);
+
     if (iZone != null) {
         instant.setZone(iZone);
     }
+
     return newPos;
 }
+
