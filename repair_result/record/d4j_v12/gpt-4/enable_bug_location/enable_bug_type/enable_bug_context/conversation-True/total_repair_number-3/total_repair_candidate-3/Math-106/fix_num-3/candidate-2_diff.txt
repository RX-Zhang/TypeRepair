--- 
+++ 
@@ -2,6 +2,19 @@
     // try to parse improper fraction
     Fraction ret = super.parse(source, pos);
     if (ret != null) {
+        // check if fraction contains minus in numerator or denominator (not leading)
+        String substring = source.substring(0, pos.getIndex());
+        int slashIndex = substring.indexOf('/');
+        if (slashIndex != -1) {
+            String numeratorPart = substring.substring(substring.indexOf(' ') + 1, slashIndex).trim();
+            String denominatorPart = substring.substring(slashIndex + 1).trim();
+            if ((numeratorPart.startsWith("-") && !numeratorPart.startsWith("-")) || denominatorPart.startsWith("-")) {
+                // invalid minus sign inside numerator or denominator
+                pos.setErrorIndex(pos.getIndex() - 1);
+                pos.setIndex(0);
+                return null;
+            }
+        }
         return ret;
     }
     
@@ -32,9 +45,14 @@
         pos.setIndex(initialIndex);
         return null;
     }
+
+    if (num.intValue() < 0) {
+        // numerator minus sign not allowed here
+        pos.setIndex(initialIndex);
+        pos.setErrorIndex(pos.getIndex());
+        return null;
+    }
     
-        // minus signs should be leading, invalid expression
-
     // parse '/'
     int startIndex = pos.getIndex();
     char c = parseNextCharacter(source, pos);
@@ -68,10 +86,16 @@
         return null;
     }
     
-        // minus signs must be leading, invalid
+    if (den.intValue() < 0) {
+        // denominator minus sign not allowed here
+        pos.setIndex(initialIndex);
+        pos.setErrorIndex(pos.getIndex());
+        return null;
+    }
 
     int w = whole.intValue();
     int n = num.intValue();
     int d = den.intValue();
     return new Fraction(((Math.abs(w) * d) + n) * MathUtils.sign(w), d);
 }
+
