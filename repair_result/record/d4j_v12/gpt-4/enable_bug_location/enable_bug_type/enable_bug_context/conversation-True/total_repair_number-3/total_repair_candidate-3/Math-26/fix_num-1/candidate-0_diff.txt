--- 
+++ 
@@ -1,18 +1,25 @@
 private Fraction(double value, double epsilon, int maxDenominator, int maxIterations)
     throws FractionConversionException
 {
+    if (Double.isNaN(value) || Double.isInfinite(value)) {
+        throw new FractionConversionException(value, 0, 1);
+    }
+
     long overflow = Integer.MAX_VALUE;
     double r0 = value;
-    long a0 = (long)FastMath.floor(r0);
-    if (a0 > overflow) {
-        throw new FractionConversionException(value, a0, 1l);
+    long a0 = (long) FastMath.floor(r0);
+
+    if (a0 > overflow || a0 < Integer.MIN_VALUE) {
+        throw new FractionConversionException(value, a0, 1L);
     }
 
     // check for (almost) integer arguments, which should not go
     // to iterations.
     if (FastMath.abs(a0 - value) < epsilon) {
-        this.numerator = (int) a0;
-        this.denominator = 1;
+        // use getReducedFraction to validate and reduce fraction robustly
+        Fraction reduced = Fraction.getReducedFraction((int)a0, 1);
+        this.numerator = reduced.numerator;
+        this.denominator = reduced.denominator;
         return;
     }
 
@@ -29,15 +36,16 @@
     do {
         ++n;
         double r1 = 1.0 / (r0 - a0);
-        long a1 = (long)FastMath.floor(r1);
+        long a1 = (long) FastMath.floor(r1);
         p2 = (a1 * p1) + p0;
         q2 = (a1 * q1) + q0;
-        if ((p2 > overflow) || (q2 > overflow)) {
+
+        if (p2 > overflow || p2 < Integer.MIN_VALUE || q2 > overflow || q2 < 1) {
             throw new FractionConversionException(value, p2, q2);
         }
 
-        double convergent = (double)p2 / (double)q2;
-        if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) {
+        double convergent = (double) p2 / (double) q2;
+        if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 <= maxDenominator) {
             p0 = p1;
             p1 = p2;
             q0 = q1;
@@ -53,12 +61,13 @@
         throw new FractionConversionException(value, maxIterations);
     }
 
-    if (q2 < maxDenominator) {
-        this.numerator = (int) p2;
-        this.denominator = (int) q2;
+    Fraction fraction;
+    if (q2 <= maxDenominator) {
+        fraction = Fraction.getReducedFraction((int) p2, (int) q2);
     } else {
-        this.numerator = (int) p1;
-        this.denominator = (int) q1;
+        fraction = Fraction.getReducedFraction((int) p1, (int) q1);
     }
+    this.numerator = fraction.numerator;
+    this.denominator = fraction.denominator;
+}
 
-}
