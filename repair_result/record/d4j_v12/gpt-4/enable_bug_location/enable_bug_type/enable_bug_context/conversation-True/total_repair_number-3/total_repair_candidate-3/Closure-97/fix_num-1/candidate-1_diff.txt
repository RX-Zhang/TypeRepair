--- 
+++ 
@@ -2,11 +2,11 @@
   if (left.getType() == Token.NUMBER &&
       right.getType() == Token.NUMBER) {
 
-    double result;
+    double resultDouble;
     double lval = left.getDouble();
     double rval = right.getDouble();
 
-    // check ranges.  We do not do anything that would clip the double to
+    // check ranges. We do not do anything that would clip the double to
     // a 32-bit range, since the user likely does not intend that.
     if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {
       error(BITWISE_OPERAND_OUT_OF_RANGE, left);
@@ -35,23 +35,24 @@
 
     switch (n.getType()) {
       case Token.LSH:
-        result = lvalInt << rvalInt;
+        resultDouble = (double)(lvalInt << rvalInt);
         break;
       case Token.RSH:
-        result = lvalInt >> rvalInt;
+        resultDouble = (double)(lvalInt >> rvalInt);
         break;
       case Token.URSH:
-        // JavaScript handles zero shifts on signed numbers differently than
-        // Java as an Java int can not represent the unsigned 32-bit number
-        // where JavaScript can so use a long here.
-        result = lvalInt >>> rvalInt;
+        // For unsigned right shift (>>>) in JS, handle it using long to avoid sign extension
+        long unsignedLval = lvalInt & 0xFFFFFFFFL;
+        long unsignedResult = unsignedLval >>> rvalInt;
+        // Convert back to double after shift
+        resultDouble = (double) unsignedResult;
         break;
       default:
         throw new AssertionError("Unknown shift operator: " +
             Node.tokenToName(n.getType()));
     }
 
-    Node newNumber = Node.newNumber(result);
+    Node newNumber = Node.newNumber(resultDouble);
     n.getParent().replaceChild(n, newNumber);
     reportCodeChange();
 
@@ -60,3 +61,4 @@
 
   return n;
 }
+
