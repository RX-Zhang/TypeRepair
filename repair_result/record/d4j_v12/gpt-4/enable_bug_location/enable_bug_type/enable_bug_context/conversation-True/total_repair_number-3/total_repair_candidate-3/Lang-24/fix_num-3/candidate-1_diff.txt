--- 
+++ 
@@ -11,7 +11,7 @@
     // deal with any possible sign up front
     int start = (chars[0] == '-') ? 1 : 0;
     if (sz > start + 1) {
-        if (chars[start] == '0' && chars[start + 1] == 'x') {
+        if (chars[start] == '0' && (chars[start + 1] == 'x' || chars[start + 1] == 'X')) {
             int i = start + 2;
             if (i == sz) {
                 return false; // str == "0x"
@@ -87,12 +87,15 @@
                 || chars[i] == 'D'
                 || chars[i] == 'f'
                 || chars[i] == 'F')) {
-            return foundDigit;
+            // '1.1L' should fail (not allowed), so reject if has decimal point and type qualifier L
+            if (chars[i] == 'f' || chars[i] == 'F' || chars[i] == 'd' || chars[i] == 'D') {
+                return foundDigit;
+            }
         }
         if (chars[i] == 'l'
             || chars[i] == 'L') {
             // not allowing L with an exponent or decimal point
-            return foundDigit && !hasExp;
+            return foundDigit && !hasExp && !hasDecPoint;
         }
         // last character is illegal
         return false;
@@ -101,3 +104,4 @@
     // found digit it to make sure weird stuff like '.' and '1E-' doesn't pass
     return !allowSigns && foundDigit;
 }
+
