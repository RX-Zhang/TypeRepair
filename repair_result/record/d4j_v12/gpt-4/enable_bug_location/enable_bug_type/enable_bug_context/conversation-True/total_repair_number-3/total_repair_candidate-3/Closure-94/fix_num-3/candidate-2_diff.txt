--- 
+++ 
@@ -8,13 +8,26 @@
 
     // Binary operators are only valid if both children are valid.
     case Token.BITAND:
-    case Token.BITNOT:
     case Token.BITOR:
     case Token.BITXOR:
+    case Token.ADD:
+    case Token.SUB:
+    case Token.MUL:
+    case Token.DIV:
+    case Token.MOD:
+    case Token.LSH:
+    case Token.RSH:
+    case Token.URSH:
+    case Token.AND:
+    case Token.OR:
+      // For these binary operators, both operands must be valid.
+      return isValidDefineValue(val.getFirstChild(), defines)
+          && isValidDefineValue(val.getLastChild(), defines);
 
-    // Uniary operators are valid if the child is valid.
+    // Unary operators are valid if the child is valid.
     case Token.NOT:
     case Token.NEG:
+    case Token.BITNOT:
       return isValidDefineValue(val.getFirstChild(), defines);
 
     // Names are valid if and only if they are defines themselves.
@@ -23,6 +36,8 @@
       if (val.isQualifiedName()) {
         return defines.contains(val.getQualifiedName());
       }
+      return false;
   }
   return false;
 }
+
