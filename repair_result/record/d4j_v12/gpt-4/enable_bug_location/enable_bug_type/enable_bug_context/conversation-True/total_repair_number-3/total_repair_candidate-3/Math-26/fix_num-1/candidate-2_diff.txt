--- 
+++ 
@@ -3,16 +3,17 @@
 {
     long overflow = Integer.MAX_VALUE;
     double r0 = value;
-    long a0 = (long)FastMath.floor(r0);
-    if (a0 > overflow) {
+    long a0 = (long) FastMath.floor(r0);
+    if (a0 > overflow || a0 < -overflow) {
         throw new FractionConversionException(value, a0, 1l);
     }
 
     // check for (almost) integer arguments, which should not go
     // to iterations.
     if (FastMath.abs(a0 - value) < epsilon) {
-        this.numerator = (int) a0;
-        this.denominator = 1;
+        Fraction reduced = Fraction.getReducedFraction((int) a0, 1);
+        this.numerator = reduced.getNumerator();
+        this.denominator = reduced.getDenominator();
         return;
     }
 
@@ -29,14 +30,14 @@
     do {
         ++n;
         double r1 = 1.0 / (r0 - a0);
-        long a1 = (long)FastMath.floor(r1);
+        long a1 = (long) FastMath.floor(r1);
         p2 = (a1 * p1) + p0;
         q2 = (a1 * q1) + q0;
-        if ((p2 > overflow) || (q2 > overflow)) {
+        if ((p2 > overflow) || (q2 > overflow) || (p2 < -overflow) || (q2 < 0)) {
             throw new FractionConversionException(value, p2, q2);
         }
 
-        double convergent = (double)p2 / (double)q2;
+        double convergent = (double) p2 / (double) q2;
         if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) {
             p0 = p1;
             p1 = p2;
@@ -53,12 +54,13 @@
         throw new FractionConversionException(value, maxIterations);
     }
 
+    Fraction reduced;
     if (q2 < maxDenominator) {
-        this.numerator = (int) p2;
-        this.denominator = (int) q2;
+        reduced = Fraction.getReducedFraction((int) p2, (int) q2);
     } else {
-        this.numerator = (int) p1;
-        this.denominator = (int) q1;
+        reduced = Fraction.getReducedFraction((int) p1, (int) q1);
     }
+    this.numerator = reduced.getNumerator();
+    this.denominator = reduced.getDenominator();
+}
 
-}
