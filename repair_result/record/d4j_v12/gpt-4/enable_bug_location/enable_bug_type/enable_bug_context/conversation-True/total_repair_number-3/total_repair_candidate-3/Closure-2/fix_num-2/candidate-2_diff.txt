--- 
+++ 
@@ -2,26 +2,37 @@
     String functionName, HashMap<String, ObjectType> properties,
     HashMap<String, ObjectType> currentProperties,
     ObjectType interfaceType) {
+  if (interfaceType == null) {
+    // Defensive check: interfaceType should not be null, but if it is, just return.
+    return;
+  }
   ObjectType implicitProto = interfaceType.getImplicitPrototype();
-  Set<String> currentPropertyNames;
-    // This can be the case if interfaceType is proxy to a non-existent
-    // object (which is a bad type annotation, but shouldn't crash).
-    currentPropertyNames = implicitProto.getOwnPropertyNames();
+  if (implicitProto == null) {
+    // Defensive check: if implicitProto is null, no properties to check, return early.
+    return;
+  }
+  Set<String> currentPropertyNames = implicitProto.getOwnPropertyNames();
+  if (currentPropertyNames == null) {
+    // Defensive check: if no property names found, treat as empty set.
+    currentPropertyNames = Collections.emptySet();
+  }
   for (String name : currentPropertyNames) {
     ObjectType oType = properties.get(name);
     if (oType != null) {
       if (!interfaceType.getPropertyType(name).isEquivalentTo(
           oType.getPropertyType(name))) {
-        compiler.report(
-            t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,
-                functionName, name, oType.toString(),
-                interfaceType.toString()));
+        report(t, n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,
+            functionName, name, oType.toString(),
+            interfaceType.toString());
       }
     }
     currentProperties.put(name, interfaceType);
   }
   for (ObjectType iType : interfaceType.getCtorExtendedInterfaces()) {
-    checkInterfaceConflictProperties(t, n, functionName, properties,
-        currentProperties, iType);
+    if (iType != null) {
+      checkInterfaceConflictProperties(t, n, functionName, properties,
+          currentProperties, iType);
+    }
   }
 }
+
