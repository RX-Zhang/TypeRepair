--- 
+++ 
@@ -4,23 +4,32 @@
     Node n = v.getNode();
     int type = n.getType();
     Node parent = n.getParent();
-    if (parent.isVar()) {
+    if (parent != null && parent.isVar()) {
       if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
-      String name = n.getString();
-      Var aliasVar = scope.getVar(name);
-      aliases.put(name, aliasVar);
+        String name = n.getString();
+        Var aliasVar = scope.getVar(name);
+        if (aliasVar == null) {
+          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, name);
+          continue;
+        }
+        if (aliasVar.getInitialValue() == null) {
+          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, name);
+          continue;
+        }
+        Node initialValue = aliasVar.getInitialValue();
+        if (initialValue == null || !initialValue.isQualifiedName()) {
+          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, name);
+          continue;
+        }
+        String qualifiedName = initialValue.getQualifiedName();
 
-      String qualifiedName =
-          aliasVar.getInitialValue().getQualifiedName();
-      transformation.addAlias(name, qualifiedName);
-      // Bleeding functions already get a BAD_PARAMETERS error, so just
-      // do nothing.
-      // Parameters of the scope function also get a BAD_PARAMETERS
-      // error.
-    } else {
-      // TODO(robbyw): Support using locals for private variables.
-      report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
-    }
+        aliases.put(name, aliasVar);
+        transformation.addAlias(name, qualifiedName);
+      } else {
+        // TODO(robbyw): Support using locals for private variables.
+        report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
+      }
     }
   }
 }
+
