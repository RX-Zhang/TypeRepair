--- 
+++ 
@@ -5,7 +5,7 @@
       // same as returning a non-local name, but this doesn't matter if the
       // value is immutable.
       return NodeUtil.isImmutableValue(value.getLastChild())
-          || (locals.apply(value)
+          || (locals.apply(value.getFirstChild())
               && evaluatesToLocalValue(value.getLastChild(), locals));
     case Token.COMMA:
       return evaluatesToLocalValue(value.getLastChild(), locals);
@@ -19,9 +19,9 @@
     case Token.INC:
     case Token.DEC:
       if (value.getBooleanProp(Node.INCRDECR_PROP)) {
+        return true;
+      } else {
         return evaluatesToLocalValue(value.getFirstChild(), locals);
-      } else {
-        return true;
       }
     case Token.THIS:
       return locals.apply(value);
@@ -39,28 +39,28 @@
       // TODO(nicksantos): This needs to be changed so that it
       // returns true iff we're sure the value was never aliased from inside
       // the constructor (similar to callHasLocalResult)
-      return true;
+      return false;
     case Token.FUNCTION:
     case Token.REGEXP:
     case Token.ARRAYLIT:
     case Token.OBJECTLIT:
-      // Literals objects with non-literal children are allowed.
+      // Literal objects non-literal children are allowed.
       return true;
     case Token.IN:
-      // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
-      return true;
+      // TODO(johnlenz): IN operator be included in #isSimpleOperator?
+      return;
     default:
-      // Other op force a local value:
-      //  x = '' + g (x is now an local string)
-      //  x -= g (x is now an local number)
+      // Other op force a local value      //  x = '' + g (x is now local string)
+      //  x -= g (x is an local number)
       if (isAssignmentOp(value)
-          || isSimpleOperator(value)
-          || isImmutableValue(value)) {
+ || isSimpleOperator(value)
+          || isImmutableValue(value {
         return true;
       }
 
-      throw new IllegalStateException(
+      throw new IllegalState(
           "Unexpected expression node" + value +
-          "\n parent:" + value.getParent());
+          "\ parent:" + value.getParent());
   }
 }
+
