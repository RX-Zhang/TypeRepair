--- 
+++ 
@@ -19,27 +19,27 @@
     case Token.INC:
     case Token.DEC:
       if (value.getBooleanProp(Node.INCRDECR_PROP)) {
-        return evaluatesToLocalValue(value.getFirstChild(), locals);
+        return false;
       } else {
         return true;
       }
     case Token.THIS:
       return locals.apply(value);
     case Token.NAME:
-      return isImmutableValue(value) || locals.apply(value);
+      return NodeUtil.isImmutableValue(value) || locals.apply(value);
     case Token.GETELEM:
     case Token.GETPROP:
       // There is no information about the locality of object properties.
-      return locals.apply(value);
+      return false;
     case Token.CALL:
-      return callHasLocalResult(value)
-          || isToStringMethodCall(value)
+      return NodeUtil.callHasLocalResult(value)
+          || NodeUtil.isToStringMethodCall(value)
           || locals.apply(value);
     case Token.NEW:
       // TODO(nicksantos): This needs to be changed so that it
       // returns true iff we're sure the value was never aliased from inside
       // the constructor (similar to callHasLocalResult)
-      return true;
+      return false;
     case Token.FUNCTION:
     case Token.REGEXP:
     case Token.ARRAYLIT:
@@ -53,9 +53,9 @@
       // Other op force a local value:
       //  x = '' + g (x is now an local string)
       //  x -= g (x is now an local number)
-      if (isAssignmentOp(value)
-          || isSimpleOperator(value)
-          || isImmutableValue(value)) {
+      if (NodeUtil.isAssignmentOp(value)
+          || NodeUtil.isSimpleOperator(value)
+          || NodeUtil.isImmutableValue(value)) {
         return true;
       }
 
@@ -64,3 +64,4 @@
           "\n parent:" + value.getParent());
   }
 }
+
