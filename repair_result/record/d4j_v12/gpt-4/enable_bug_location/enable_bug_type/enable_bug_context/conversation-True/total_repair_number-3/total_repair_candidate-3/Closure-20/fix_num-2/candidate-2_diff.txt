--- 
+++ 
@@ -3,17 +3,20 @@
   Node callTarget = n.getFirstChild();
   if (callTarget != null && callTarget.isName() &&
         callTarget.getString().equals("String")) {
-    // Fold String(a) to '' + (a) on immutable literals,
-    // which allows further optimizations
-    //
-    // We can't do this in the general case, because String(a) has
-    // slightly different semantics than '' + (a). See
-    // http://code.google.com/p/closure-compiler/issues/detail?id=759
-    Node value = callTarget.getNext();
-    if (value != null) {
+    // Only fold calls with exactly one argument, to preserve semantics.
+    Node firstArg = callTarget.getNext();
+    Node secondArg = (firstArg != null) ? firstArg.getNext() : null;
+
+    if (firstArg != null && secondArg == null) {
+      // Fold String(a) to '' + (a) on immutable literals,
+      // which allows further optimizations
+      //
+      // We can't do this in the general case, because String(a) has
+      // slightly different semantics than '' + (a). See
+      // http://code.google.com/p/closure-compiler/issues/detail?id=759
       Node addition = IR.add(
           IR.string("").srcref(callTarget),
-          value.detachFromParent());
+          firstArg.detachFromParent());
       n.getParent().replaceChild(n, addition);
       reportCodeChange();
       return addition;
@@ -21,3 +24,4 @@
   }
   return n;
 }
+
