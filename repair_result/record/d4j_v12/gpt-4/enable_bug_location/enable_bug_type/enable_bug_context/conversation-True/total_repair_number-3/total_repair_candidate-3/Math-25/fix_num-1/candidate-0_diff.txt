--- 
+++ 
@@ -18,10 +18,15 @@
         currentX = observations[i].getX();
         currentY = observations[i].getY();
 
-        // update the integrals of f<sup>2</sup> and f'<sup>2</sup>
+        // update the integrals of f^2 and f'^2
         // considering a linear model for f (and therefore constant f')
         final double dx = currentX - previousX;
         final double dy = currentY - previousY;
+        
+        if (dx == 0) {
+            throw new ZeroException();
+        }
+
         final double f2StepIntegral =
             dx * (previousY * previousY + previousY * currentY + currentY * currentY) / 3;
         final double fPrime2StepIntegral = dy * dy / dx;
@@ -41,7 +46,7 @@
     double c1 = sy2 * sxz - sxy * syz;
     double c2 = sxy * sxz - sx2 * syz;
     double c3 = sx2 * sy2 - sxy * sxy;
-    if ((c1 / c2 < 0) || (c2 / c3 < 0)) {
+    if (c2 == 0 || c3 == 0) {
         final int last = observations.length - 1;
         // Range of the observations, assuming that the
         // observations are sorted.
@@ -53,7 +58,30 @@
 
         double yMin = Double.POSITIVE_INFINITY;
         double yMax = Double.NEGATIVE_INFINITY;
-        for (int i = 1; i < observations.length; ++i) {
+        for (int i = 0; i < observations.length; ++i) {
+            final double y = observations[i].getY();
+            if (y < yMin) {
+                yMin = y;
+            }
+            if (y > yMax) {
+               Max = y;
+            }
+        }
+        a = 0.5 * (yMax - yMin);
+    } else if ((c1 / c2 < 0) || (c2 / c3 < 0)) {
+        // In some ill-conditioned cases (cf. MATH-844), the guesser
+        // procedure cannot produce sensible results.
+
+        final int last = observations.length - 1;
+        final double xRange = observations[last].getX() - observations[0].getX();
+        if (xRange == 0) {
+            throw new ZeroException();
+        }
+        omega = 2 * Math.PI / xRange;
+
+        double yMin = Double.POSITIVE_INFINITY;
+        double yMax = Double.NEGATIVE_INFINITY;
+        for (int i = 0; i < observations.length; ++i) {
             final double y = observations[i].getY();
             if (y < yMin) {
                 yMin = y;
@@ -64,10 +92,8 @@
         }
         a = 0.5 * (yMax - yMin);
     } else {
-            // In some ill-conditioned cases (cf. MATH-844), the guesser
-            // procedure cannot produce sensible results.
-
         a = FastMath.sqrt(c1 / c2);
         omega = FastMath.sqrt(c2 / c3);
     }
 }
+
