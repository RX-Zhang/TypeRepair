--- 
+++ 
@@ -4,25 +4,28 @@
     clearResult();
     verifyInterval(min, max);
     
-    double ret = Double.NaN;
-    
     double yMin = f.value(min);
     double yMax = f.value(max);
     
+    // Check if either endpoint is a root (within functionValueAccuracy)
+    if (Math.abs(yMin) <= functionValueAccuracy) {
+        setResult(min, 0);
+        return min;
+    }
+    if (Math.abs(yMax) <= functionValueAccuracy) {
+        setResult(max, 0);
+        return max;
+    }
+    
     // Verify bracketing
-    double sign = yMin * yMax;
-    if (sign >= 0) {
-        // check if either value is close to a zero
-            // neither value is close to zero and min and max do not bracket root.
-            throw new IllegalArgumentException
+    if (yMin * yMax > 0) {
+        throw new IllegalArgumentException
             ("Function values at endpoints do not have different signs." +
                     "  Endpoints: [" + min + "," + max + "]" + 
                     "  Values: [" + yMin + "," + yMax + "]");
-    } else {
-        // solve using only the first endpoint as initial guess
-        ret = solve(min, yMin, max, yMax, min, yMin);
-        // either min or max is a root
     }
 
-    return ret;
+    // solve using the Brent method with initial guess at min
+    return solve(min, yMin, max, yMax, min, yMin);
 }
+
