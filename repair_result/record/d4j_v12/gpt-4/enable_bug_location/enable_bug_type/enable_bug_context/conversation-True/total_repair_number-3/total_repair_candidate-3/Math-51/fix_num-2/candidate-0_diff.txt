--- 
+++ 
@@ -46,6 +46,8 @@
             // the interval.
             x0 = x1;
             f0 = f1;
+            x1 = x;
+            f1 = fx;
             inverted = !inverted;
         } else {
             switch (method) {
@@ -58,17 +60,16 @@
                     // Update formula cannot make any progress: Update the
                     // search interval.
             default:
+                x1 = x;
+                f1 = fx;
                 // Should never happen.
             }
         }
-        // Update from [x0, x1] to [x0, x].
-        x1 = x;
-        f1 = fx;
 
         // If the function value of the last approximation is too small,
         // given the function value accuracy, then we can't get closer to
         // the root than we already are.
-        if (FastMath.abs(f1) <= ftol) {
+        if (Math.abs(f1) <= ftol) {
             switch (allowed) {
             case ANY_SIDE:
                 return x1;
@@ -93,14 +94,13 @@
                 }
                 break;
             default:
-                throw new MathInternalError();
+                throw new RuntimeException("MathInternalError");
             }
         }
 
         // If the current interval is within the given accuracies, we
         // are satisfied with the current approximation.
-        if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
-                                                 atol)) {
+        if (Math.abs(x1 - x0) < Math.max(rtol * Math.abs(x1), atol)) {
             switch (allowed) {
             case ANY_SIDE:
                 return x1;
@@ -113,8 +113,9 @@
             case ABOVE_SIDE:
                 return (f1 >= 0) ? x1 : x0;
             default:
-                throw new MathInternalError();
+                throw new RuntimeException("MathInternalError");
             }
         }
     }
 }
+
