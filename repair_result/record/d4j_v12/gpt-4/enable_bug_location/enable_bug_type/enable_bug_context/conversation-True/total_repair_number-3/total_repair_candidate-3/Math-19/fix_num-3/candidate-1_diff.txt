--- 
+++ 
@@ -6,8 +6,7 @@
     // Checks whether there is at least one finite bound value.
     boolean hasFiniteBounds = false;
     for (int i = 0; i < lB.length; i++) {
-        if (!Double.isInfinite(lB[i]) ||
-            !Double.isInfinite(uB[i])) {
+        if (!Double.isInfinite(lB[i]) && !Double.isInfinite(uB[i])) {
             hasFiniteBounds = true;
             break;
         }
@@ -16,8 +15,7 @@
     boolean hasInfiniteBounds = false;
     if (hasFiniteBounds) {
         for (int i = 0; i < lB.length; i++) {
-            if (Double.isInfinite(lB[i]) ||
-                Double.isInfinite(uB[i])) {
+            if (Double.isInfinite(lB[i]) || Double.isInfinite(uB[i])) {
                 hasInfiniteBounds = true;
                 break;
             }
@@ -34,6 +32,12 @@
             boundaries[1] = uB;
 
             // Abort early if the normalization will overflow (cf. "encode" method).
+            for (int i = 0; i < init.length; i++) {
+                double range = boundaries[1][i] - boundaries[0][i];
+                if (Double.isInfinite(range) || Double.isNaN(range) || range <= 0 || range > Double.MAX_VALUE / 2) {
+                    throw new NumberIsTooLargeException(range, Double.MAX_VALUE / 2, false);
+                }
+            }
         }
     } else {
         // Convert API to internal handling of boundaries.
@@ -49,10 +53,12 @@
                 throw new NotPositiveException(inputSigma[i]);
             }
             if (boundaries != null) {
-                if (inputSigma[i] > boundaries[1][i] - boundaries[0][i]) {
-                    throw new OutOfRangeException(inputSigma[i], 0, boundaries[1][i] - boundaries[0][i]);
+                double range = boundaries[1][i] - boundaries[0][i];
+                if (inputSigma[i] > range) {
+                    throw new OutOfRangeException(inputSigma[i], 0, range);
                 }
             }
         }
     }
 }
+
