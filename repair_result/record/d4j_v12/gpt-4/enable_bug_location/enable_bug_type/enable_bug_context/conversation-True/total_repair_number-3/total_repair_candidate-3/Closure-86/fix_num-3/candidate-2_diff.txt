--- 
+++ 
@@ -5,7 +5,7 @@
       // same as returning a non-local name, but this doesn't matter if the
       // value is immutable.
       return NodeUtil.isImmutableValue(value.getLastChild())
-          || (locals.apply(value)
+          || (locals.apply(value.getFirstChild())
               && evaluatesToLocalValue(value.getLastChild(), locals));
     case Token.COMMA:
       return evaluatesToLocalValue(value.getLastChild(), locals);
@@ -30,21 +30,26 @@
     case Token.GETELEM:
     case Token.GETPROP:
       // There is no information about the locality of object properties.
-      return locals.apply(value);
+      return false;
     case Token.CALL:
       return callHasLocalResult(value)
           || isToStringMethodCall(value)
           || locals.apply(value);
     case Token.NEW:
-      // TODO(nicksantos): This needs to be changed so that it
-      // returns true iff we're sure the value was never aliased from inside
-      // the constructor (similar to callHasLocalResult)
-      return true;
+      // Return true only if the constructor is known to have no side effects.
+      Node constructor = value.getFirstChild();
+      if (constructor != null && constructor.isName()) {
+        String constructorName = constructor.getString();
+        if (CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(constructorName)) {
+          return true;
+        }
+      }
+      return false;
     case Token.FUNCTION:
     case Token.REGEXP:
     case Token.ARRAYLIT:
     case Token.OBJECTLIT:
-      // Literals objects with non-literal children are allowed.
+      // Literal objects with non-literal children are allowed.
       return true;
     case Token.IN:
       // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
@@ -64,3 +69,4 @@
           "\n parent:" + value.getParent());
   }
 }
+
