--- 
+++ 
@@ -18,24 +18,24 @@
         final double a = getA(n, x);
         final double b = getB(n, x);
 
-        double cN = a * hPrev + b * p0;
+        double cN = a * dPrev + b * cPrev;
         double q2 = a * q1 + b * dPrev;
         if (Double.isInfinite(cN) || Double.isInfinite(q2)) {
             double scaleFactor = 1d;
             double lastScaleFactor = 1d;
             final int maxPower = 5;
-            final double scale = FastMath.max(a,b);
+            final double scale = FastMath.max(FastMath.abs(a), FastMath.abs(b));
             if (scale <= 0) {  // Can't scale
                 throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);
             }
             for (int i = 0; i < maxPower; i++) {
                 lastScaleFactor = scaleFactor;
                 scaleFactor *= scale;
-                if (a != 0.0 && a > b) {
-                    cN = hPrev / lastScaleFactor + (b / scaleFactor * p0);
+                if (a != 0.0 && FastMath.abs(a) > FastMath.abs(b)) {
+                    cN = dPrev / lastScaleFactor + (b / scaleFactor * cPrev);
                     q2 = q1 / lastScaleFactor + (b / scaleFactor * dPrev);
                 } else if (b != 0) {
-                    cN = (a / scaleFactor * hPrev) + p0 / lastScaleFactor;
+                    cN = (a / scaleFactor * dPrev) + cPrev / lastScaleFactor;
                     q2 = (a / scaleFactor * q1) + dPrev / lastScaleFactor;
                 }
                 if (!(Double.isInfinite(cN) || Double.isInfinite(q2))) {
@@ -44,8 +44,8 @@
             }
         }
 
-        final double deltaN = cN / q2 / cPrev;
-        hN = cPrev * deltaN;
+        final double deltaN = cN / q2;
+        hN = hPrev * deltaN;
 
         if (Double.isInfinite(hN)) {
             throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,
@@ -60,10 +60,10 @@
             break;
         }
 
-        dPrev = q1;
-        cPrev = cN / q2;
         p0 = hPrev;
-        hPrev = cN;
+        hPrev = hN;
+        dPrev = cN;
+        cPrev = q2;
         q1 = q2;
         n++;
     }
@@ -75,3 +75,4 @@
 
     return hN;
 }
+
