--- 
+++ 
@@ -4,16 +4,30 @@
         throw new IllegalArgumentException("Instant must not be null");
     }
     
-    long instantMillis = instant.getMillis();
     Chronology chrono = instant.getChronology();
-    long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);
+    if (chrono == null) {
+        chrono = DateTimeUtils.getChronology(null);
+    }
     chrono = selectChronology(chrono);
-    int defaultYear = chrono.year().get(instantLocal);
+    int defaultYear = getDefaultYear();
+    if (defaultYear == 0) {
+        long instantMillis = instant.getMillis();
+        int offset = chrono.getZone().getOffset(instantMillis);
+        long instantLocal = instantMillis + offset;
+        defaultYear = chrono.year().get(instantLocal);
+    }
     
     DateTimeParserBucket bucket = new DateTimeParserBucket(
-        instantLocal, chrono, iLocale, iPivotYear, defaultYear);
+        instant.getMillis(), chrono, iLocale, iPivotYear, defaultYear);
     int newPos = parser.parseInto(bucket, text, position);
-    instant.setMillis(bucket.computeMillis(false, text));
+    if (newPos < 0) {
+        return newPos;
+    }
+    Long millis = bucket.computeMillis(false, text);
+    if (millis == null) {
+        return ~position;
+    }
+    instant.setMillis(millis);
     if (iOffsetParsed && bucket.getOffsetInteger() != null) {
         int parsedOffset = bucket.getOffsetInteger();
         DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);
@@ -27,3 +41,4 @@
     }
     return newPos;
 }
+
