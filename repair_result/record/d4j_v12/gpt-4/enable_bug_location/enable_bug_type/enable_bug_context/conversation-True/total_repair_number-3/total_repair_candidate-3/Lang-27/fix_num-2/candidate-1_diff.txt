--- 
+++ 
@@ -4,7 +4,7 @@
     }
     if (StringUtils.isBlank(str)) {
         throw new NumberFormatException("A blank string is not a valid number");
-    }  
+    }
     if (str.startsWith("--")) {
         // this is protection for poorness in java.lang.BigDecimal.
         // it accepts this as a legal value, but it does not appear 
@@ -14,16 +14,22 @@
     }
     if (str.startsWith("0x") || str.startsWith("-0x")) {
         return createInteger(str);
-    }   
+    }
     char lastChar = str.charAt(str.length() - 1);
     String mant;
     String dec;
     String exp;
     int decPos = str.indexOf('.');
-    int expPos = str.indexOf('e') + str.indexOf('E') + 1;
+    int expPosE = str.indexOf('e');
+    int expPosBigE = str.indexOf('E');
+    int expPos = -1;
+    if (expPosE > -1) {
+        expPos = expPosE;
+    } else if (expPosBigE > -1) {
+        expPos = expPosBigE;
+    }
 
     if (decPos > -1) {
-
         if (expPos > -1) {
             if (expPos < decPos) {
                 throw new NumberFormatException(str + " is not a valid number.");
@@ -41,6 +47,7 @@
         }
         dec = null;
     }
+
     if (!Character.isDigit(lastChar) && lastChar != '.') {
         if (expPos > -1 && expPos < str.length() - 1) {
             exp = str.substring(expPos + 1, str.length() - 1);
@@ -62,19 +69,17 @@
                         //Too big for a long
                     }
                     return createBigInteger(numeric);
-
                 }
                 throw new NumberFormatException(str + " is not a valid number.");
             case 'f' :
             case 'F' :
                 try {
-                    Float f = NumberUtils.createFloat(numeric);
+                    Float f = createFloat(numeric);
                     if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
                         //If it's too big for a float or the float value = 0 and the string
                         //has non-zeros in it, then float does not have the precision we want
                         return f;
                     }
-
                 } catch (NumberFormatException nfe) {
                     // ignore the bad number
                 }
@@ -82,8 +87,8 @@
             case 'd' :
             case 'D' :
                 try {
-                    Double d = NumberUtils.createDouble(numeric);
-                    if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
+                    Double d = createDouble(numeric);
+                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
                         return d;
                     }
                 } catch (NumberFormatException nfe) {
@@ -97,7 +102,6 @@
                 //$FALL-THROUGH$
             default :
                 throw new NumberFormatException(str + " is not a valid number.");
-
         }
     } else {
         //User doesn't have a preference on the return type, so let's start
@@ -120,7 +124,6 @@
                 // ignore the bad number
             }
             return createBigInteger(str);
-
         } else {
             //Must be a float,double,BigDec
             boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
@@ -140,9 +143,8 @@
             } catch (NumberFormatException nfe) {
                 // ignore the bad number
             }
-
             return createBigDecimal(str);
-
         }
     }
 }
+
