--- 
+++ 
@@ -4,7 +4,7 @@
     }
     if (StringUtils.isBlank(str)) {
         throw new NumberFormatException("A blank string is not a valid number");
-    }  
+    }
     if (str.startsWith("--")) {
         // this is protection for poorness in java.lang.BigDecimal.
         // it accepts this as a legal value, but it does not appear 
@@ -12,53 +12,57 @@
         // a wrong value.
         return null;
     }
-    if (str.startsWith("0x") || str.startsWith("-0x")) {
-        return createInteger(str);
-    }   
-    char lastChar = str.charAt(str.length() - 1);
+    String strTrimmed = str.trim();
+    if (strTrimmed.startsWith("0x") || strTrimmed.startsWith("0X") || strTrimmed.startsWith("-0x") || strTrimmed.startsWith("-0X")) {
+        // hexadecimal
+        return createInteger(strTrimmed);
+    }
+    char lastChar = strTrimmed.charAt(strTrimmed.length() - 1);
     String mant;
     String dec;
     String exp;
-    int decPos = str.indexOf('.');
-    int expPos = str.indexOf('e') + str.indexOf('E') + 1;
+    int decPos = strTrimmed.indexOf('.');
+    int ePosLower = strTrimmed.indexOf('e');
+    int ePosUpper = strTrimmed.indexOf('E');
+    int expPos = (ePosLower > -1) ? ePosLower : ePosUpper;
 
     if (decPos > -1) {
 
         if (expPos > -1) {
-            if (expPos < decPos || expPos > str.length()) {
-                throw new NumberFormatException(str + " is not a valid number.");
+            if (expPos < decPos || expPos >= strTrimmed.length()) {
+                throw new NumberFormatException(strTrimmed + " is not a valid number.");
             }
-            dec = str.substring(decPos + 1, expPos);
+            dec = strTrimmed.substring(decPos + 1, expPos);
         } else {
-            dec = str.substring(decPos + 1);
+            dec = strTrimmed.substring(decPos + 1);
         }
-        mant = str.substring(0, decPos);
+        mant = strTrimmed.substring(0, decPos);
     } else {
         if (expPos > -1) {
-            if (expPos > str.length()) {
-                throw new NumberFormatException(str + " is not a valid number.");
+            if (expPos >= strTrimmed.length()) {
+                throw new NumberFormatException(strTrimmed + " is not a valid number.");
             }
-            mant = str.substring(0, expPos);
+            mant = strTrimmed.substring(0, expPos);
         } else {
-            mant = str;
+            mant = strTrimmed;
         }
         dec = null;
     }
     if (!Character.isDigit(lastChar) && lastChar != '.') {
-        if (expPos > -1 && expPos < str.length() - 1) {
-            exp = str.substring(expPos + 1, str.length() - 1);
+        if (expPos > -1 && expPos < strTrimmed.length() - 1) {
+            exp = strTrimmed.substring(expPos + 1, strTrimmed.length() - 1);
         } else {
             exp = null;
         }
-        //Requesting a specific type..
-        String numeric = str.substring(0, str.length() - 1);
-        boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
+        // Requesting a specific type..
+        String numeric = strTrimmed.substring(0, strTrimmed.length() - 1);
+        boolean allZeros = isAllZeros(mant) && (exp == null || isAllZeros(exp));
         switch (lastChar) {
-            case 'l' :
-            case 'L' :
+            case 'l':
+            case 'L':
                 if (dec == null
                     && exp == null
-                    && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
+                    && ((numeric.charAt(0) == '-' && isDigits(numeric.substring(1))) || isDigits(numeric))) {
                     try {
                         return createLong(numeric);
                     } catch (NumberFormatException nfe) { // NOPMD
@@ -67,26 +71,25 @@
                     return createBigInteger(numeric);
 
                 }
-                throw new NumberFormatException(str + " is not a valid number.");
-            case 'f' :
-            case 'F' :
+                throw new NumberFormatException(strTrimmed + " is not a valid number.");
+            case 'f':
+            case 'F':
                 try {
                     Float f = NumberUtils.createFloat(numeric);
                     if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
-                        //If it's too big for a float or the float value = 0 and the string
-                        //has non-zeros in it, then float does not have the precision we want
+                        // If it's too big for a float or the float value = 0 and the string
+                        // has non-zeros in it, then float does not have the precision we want
                         return f;
                     }
-
                 } catch (NumberFormatException nfe) { // NOPMD
                     // ignore the bad number
                 }
                 //$FALL-THROUGH$
-            case 'd' :
-            case 'D' :
+            case 'd':
+            case 'D':
                 try {
                     Double d = NumberUtils.createDouble(numeric);
-                    if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
+                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
                         return d;
                     }
                 } catch (NumberFormatException nfe) { // NOPMD
@@ -98,37 +101,36 @@
                     // ignore the bad number
                 }
                 //$FALL-THROUGH$
-            default :
-                throw new NumberFormatException(str + " is not a valid number.");
-
+            default:
+                throw new NumberFormatException(strTrimmed + " is not a valid number.");
         }
     } else {
-        //User doesn't have a preference on the return type, so let's start
-        //small and go from there...
-        if (expPos > -1 && expPos < str.length() - 1) {
-            exp = str.substring(expPos + 1, str.length());
+        // User doesn't have a preference on the return type, so let's start
+        // small and go from there...
+        if (expPos > -1 && expPos < strTrimmed.length() - 1) {
+            exp = strTrimmed.substring(expPos + 1, strTrimmed.length());
         } else {
             exp = null;
         }
         if (dec == null && exp == null) {
-            //Must be an int,long,bigint
+            // Must be an int,long,bigint
             try {
-                return createInteger(str);
+                return createInteger(strTrimmed);
             } catch (NumberFormatException nfe) { // NOPMD
                 // ignore the bad number
             }
             try {
-                return createLong(str);
+                return createLong(strTrimmed);
             } catch (NumberFormatException nfe) { // NOPMD
                 // ignore the bad number
             }
-            return createBigInteger(str);
+            return createBigInteger(strTrimmed);
 
         } else {
-            //Must be a float,double,BigDec
-            boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
+            // Must be a float,double,BigDec
+            boolean allZeros = isAllZeros(mant) && (exp == null || isAllZeros(exp));
             try {
-                Float f = createFloat(str);
+                Float f = createFloat(strTrimmed);
                 if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
                     return f;
                 }
@@ -136,7 +138,7 @@
                 // ignore the bad number
             }
             try {
-                Double d = createDouble(str);
+                Double d = createDouble(strTrimmed);
                 if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
                     return d;
                 }
@@ -144,8 +146,9 @@
                 // ignore the bad number
             }
 
-            return createBigDecimal(str);
+            return createBigDecimal(strTrimmed);
 
         }
     }
 }
+
