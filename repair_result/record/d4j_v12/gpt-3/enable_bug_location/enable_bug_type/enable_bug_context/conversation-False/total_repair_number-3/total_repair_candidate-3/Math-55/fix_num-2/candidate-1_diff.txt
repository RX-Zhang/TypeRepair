--- 
+++ 
@@ -1,5 +1,4 @@
 public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
-
 
     // rescale both vectors without losing precision,
     // to ensure their norm are the same order of magnitude
@@ -11,9 +10,20 @@
     // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
 
     // compute rho as an 8 bits approximation of v1.v2 / v2.v2
+    final double v2DotV2 = v2.x * v2.x + v2.y * v2.y + v2.z * v2.z;
+    final double v1DotV2 = v1.x * v2.x + v1.y * v2.y + v1.z * v2.z;
+    final double rho = (v1DotV2 == 0 || v2DotV2 == 0) ? 0.0 : 
+                       (double) ((int) ((v1DotV2 / v2DotV2) * 256)) / 256.0;
 
+    // compute v3 = v1 - rho * v2
+    final double v3x = v1.x - rho * v2.x;
+    final double v3y = v1.y - rho * v2.y;
+    final double v3z = v1.z - rho * v2.z;
 
     // compute cross product from v3 and v2 instead of v1 and v2
-    return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
+    return new Vector3D(
+            v3y * v2.z - v3z * v2.y,
+            v3z * v2.x - v3x * v2.z,
+            v3x * v2.y - v3y * v2.x);
+}
 
-}
