--- 
+++ 
@@ -1,6 +1,9 @@
 private void visitParameterList(NodeTraversal t, Node call,
     FunctionType functionType) {
   Iterator<Node> arguments = call.children().iterator();
+  if (!arguments.hasNext()) {
+    throw new InputValidationError("Call node must have at least one child");
+  }
   arguments.next(); // skip the function name
 
   Iterator<Node> parameters = functionType.getParameters().iterator();
@@ -9,14 +12,19 @@
   Node argument = null;
   while (arguments.hasNext() &&
          parameters.hasNext()) {
-    // If there are no parameters left in the list, then the while loop
-    // above implies that this must be a var_args function.
-      parameter = parameters.next();
+    parameter = parameters.next();
     argument = arguments.next();
     ordinal++;
 
+    JSType argumentType = getJSType(argument);
+    JSType parameterType = getJSType(parameter);
+    
+    if (argumentType == null || parameterType == null) {
+      throw new TypeError("Argument or parameter type cannot be null");
+    }
+
     validator.expectArgumentMatchesParameter(t, argument,
-        getJSType(argument), getJSType(parameter), call, ordinal);
+        argumentType, parameterType, call, ordinal);
   }
 
   int numArgs = call.getChildCount() - 1;
@@ -30,3 +38,4 @@
             " and no more than " + maxArgs + " argument(s)" : "");
   }
 }
+
