--- 
+++ 
@@ -6,7 +6,7 @@
     double lval = left.getDouble();
     double rval = right.getDouble();
 
-    // check ranges.  We do not do anything that would clip the double to
+    // check ranges. We do not do anything that would clip the double to
     // a 32-bit range, since the user likely does not intend that.
     if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {
       error(BITWISE_OPERAND_OUT_OF_RANGE, left);
@@ -20,7 +20,7 @@
       return n;
     }
 
-    // Convert the numbers to ints
+    // Convert the numbers to ints after validating they are integers
     int lvalInt = (int) lval;
     if (lvalInt != lval) {
       error(FRACTIONAL_BITWISE_OPERAND, left);
@@ -44,11 +44,16 @@
         // JavaScript handles zero shifts on signed numbers differently than
         // Java as an Java int can not represent the unsigned 32-bit number
         // where JavaScript can so use a long here.
-        result = lvalInt >>> rvalInt;
+        result = (long) lvalInt >>> rvalInt; // Cast lvalInt to long for unsigned shift
         break;
       default:
         throw new AssertionError("Unknown shift operator: " +
             Node.tokenToName(n.getType()));
+    }
+
+    // Ensuring result fits within unsigned int range
+    if (result < 0) {
+      result = (result + (1L << 32)); // Convert negative result to unsigned
     }
 
     Node newNumber = Node.newNumber(result);
@@ -60,3 +65,4 @@
 
   return n;
 }
+
