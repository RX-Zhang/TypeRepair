--- 
+++ 
@@ -26,17 +26,24 @@
   }
 
   Node replacement;
-    // All assignments evaluate to true, so make sure that the
-    // expr statement evaluates to true in case it matters.
-    nodes.add(new Node(Token.TRUE));
 
-    // Join these using COMMA.  A COMMA node must have 2 children, so we
-    // create a tree. In the tree the first child be the COMMA to match
-    // the parser, otherwise tree equality tests fail.
-    nodes = Lists.reverse(nodes);
+  // All assignments evaluate to true, so make sure that the
+  // expr statement evaluates to true in case it matters.
+  nodes.add(new Node(Token.TRUE));
+
+  // Join these using COMMA.  A COMMA node must have 2 children, so we
+  // create a tree. In the tree the first child is the COMMA to match
+  // the parser, otherwise tree equality tests fail.
+  nodes = Lists.reverse(nodes);
+
+  if (nodes.size() == 1) {
+    // Only the TRUE node, no assignments.
+    replacement = nodes.get(0);
+  } else {
     replacement = new Node(Token.COMMA);
     Node cur = replacement;
     int i;
+    // Iterate until second to last - 1 node, because we add two children at end
     for (i = 0; i < nodes.size() - 2; i++) {
       cur.addChildToFront(nodes.get(i));
       Node t = new Node(Token.COMMA);
@@ -45,6 +52,7 @@
     }
     cur.addChildToFront(nodes.get(i));
     cur.addChildToFront(nodes.get(i + 1));
+  }
 
   Node replace = ref.getParent();
   replacement.copyInformationFromForTree(replace);
@@ -56,3 +64,4 @@
     replace.getParent().replaceChild(replace, replacement);
   }
 }
+
