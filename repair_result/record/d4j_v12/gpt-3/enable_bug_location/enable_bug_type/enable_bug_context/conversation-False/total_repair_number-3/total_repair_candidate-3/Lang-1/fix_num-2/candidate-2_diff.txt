--- 
+++ 
@@ -8,18 +8,23 @@
     // Need to deal with all possible hex prefixes here
     final String[] hex_prefixes = {"0x", "0X", "-0x", "-0X", "#", "-#"};
     int pfxLen = 0;
+    String prefix = null;
     for(final String pfx : hex_prefixes) {
         if (str.startsWith(pfx)) {
-            pfxLen += pfx.length();
+            prefix = pfx;
+            pfxLen = pfx.length();
             break;
         }
     }
     if (pfxLen > 0) { // we have a hex number
         final int hexDigits = str.length() - pfxLen;
-        if (hexDigits > 16) { // too many for Long
+        // Remove the prefix to get pure hex digits string for length checks
+        // Handle negative hex as well
+        String hexDigitsStr = str.substring(pfxLen);
+        if ((prefix.startsWith("-") && hexDigitsStr.length() > 16) || (!prefix.startsWith("-") && hexDigits > 16)) {
             return createBigInteger(str);
         }
-        if (hexDigits > 8) { // too many for an int
+        if ((prefix.startsWith("-") && hexDigitsStr.length() > 8) || (!prefix.startsWith("-") && hexDigits > 8)) {
             return createLong(str);
         }
         return createInteger(str);
@@ -29,9 +34,17 @@
     String dec;
     String exp;
     final int decPos = str.indexOf('.');
-    final int expPos = str.indexOf('e') + str.indexOf('E') + 1; // assumes both not present
-    // if both e and E are present, this is caught by the checks on expPos (which prevent IOOBE)
-    // and the parsing which will detect if e or E appear in a number due to using the wrong offset
+    final int ePos = str.indexOf('e');
+    final int EPos = str.indexOf('E');
+    final int expPos;
+    if (ePos == -1) {
+        expPos = EPos;
+    } else if (EPos == -1) {
+        expPos = ePos;
+    } else {
+        expPos = Math.min(ePos, EPos);
+    }
+    // if both e and E are present, this resolves to the earliest occurrence
 
     int numDecimals = 0; // Check required precision (LANG-693)
     if (decPos > -1) { // there is a decimal point
@@ -71,7 +84,7 @@
             case 'L' :
                 if (dec == null
                     && exp == null
-                    && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
+                    && ((numeric.charAt(0) == '-' && isDigits(numeric.substring(1))) || isDigits(numeric))) {
                     try {
                         return createLong(numeric);
                     } catch (final NumberFormatException nfe) { // NOPMD
@@ -99,7 +112,7 @@
             case 'D' :
                 try {
                     final Double d = NumberUtils.createDouble(numeric);
-                    if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
+                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
                         return d;
                     }
                 } catch (final NumberFormatException nfe) { // NOPMD
@@ -163,3 +176,4 @@
 
     return createBigDecimal(str);
 }
+
