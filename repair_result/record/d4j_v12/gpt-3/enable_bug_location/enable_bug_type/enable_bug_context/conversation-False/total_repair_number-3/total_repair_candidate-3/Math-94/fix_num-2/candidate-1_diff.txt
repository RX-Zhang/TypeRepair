--- 
+++ 
@@ -1,6 +1,12 @@
 public static int gcd(int u, int v) {
-    if (u * v == 0) {
-        return (Math.abs(u) + Math.abs(v));
+    if (u == 0 && v == 0) {
+        return 0;
+    }
+    if (u == 0) {
+        return Math.abs(v);
+    }
+    if (v == 0) {
+        return Math.abs(u);
     }
     // keep u and v negative, as negative integers range down to
     // -2^31, while positive numbers can only be as large as 2^31-1
@@ -16,7 +22,7 @@
     // B1. [Find power of 2]
     int k = 0;
     while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are
-                                                        // both even...
+                                                    // both even...
         u /= 2;
         v /= 2;
         k++; // cast out twos.
@@ -26,7 +32,7 @@
     }
     // B2. Initialize: u and v have been divided by 2^k and at least
     // one is odd.
-    int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
+    int t = ((u & 1) == 1) ? v : -(u / 2);
     // t negative: u was odd, v may be even (t replaces v)
     // t positive: u was even, v is odd (t replaces u)
     do {
@@ -48,3 +54,4 @@
     } while (t != 0);
     return -u * (1 << k); // gcd is u*2^k
 }
+
