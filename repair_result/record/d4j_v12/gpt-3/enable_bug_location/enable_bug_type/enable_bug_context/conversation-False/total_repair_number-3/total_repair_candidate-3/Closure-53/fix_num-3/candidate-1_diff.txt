--- 
+++ 
@@ -26,25 +26,31 @@
   }
 
   Node replacement;
-    // All assignments evaluate to true, so make sure that the
-    // expr statement evaluates to true in case it matters.
-    nodes.add(new Node(Token.TRUE));
+  // All assignments evaluate to true, so make sure that the
+  // expr statement evaluates to true in case it matters.
+  nodes.add(new Node(Token.TRUE));
 
-    // Join these using COMMA.  A COMMA node must have 2 children, so we
-    // create a tree. In the tree the first child be the COMMA to match
-    // the parser, otherwise tree equality tests fail.
-    nodes = Lists.reverse(nodes);
+  // Join these using COMMA.  A COMMA node must have 2 children, so we
+  // create a tree. In the tree the first child is the COMMA to match
+  // the parser, otherwise tree equality tests fail.
+  nodes = Lists.reverse(nodes);
+  if (nodes.size() == 1) {
+    // Only one node, no need to create COMMA nodes
+    replacement = nodes.get(0);
+  } else {
     replacement = new Node(Token.COMMA);
     Node cur = replacement;
     int i;
     for (i = 0; i < nodes.size() - 2; i++) {
-      cur.addChildToFront(nodes.get(i));
-      Node t = new Node(Token.COMMA);
-      cur.addChildToFront(t);
-      cur = t;
+      Node comma = new Node(Token.COMMA);
+      cur.addChildToBack(comma);
+      cur.addChildToBack(nodes.get(i));
+      cur = comma;
     }
-    cur.addChildToFront(nodes.get(i));
-    cur.addChildToFront(nodes.get(i + 1));
+    // Add the last two nodes
+    cur.addChildToBack(nodes.get(i));
+    cur.addChildToBack(nodes.get(i + 1));
+  }
 
   Node replace = ref.getParent();
   replacement.copyInformationFromForTree(replace);
@@ -56,3 +62,4 @@
     replace.getParent().replaceChild(replace, replacement);
   }
 }
+
