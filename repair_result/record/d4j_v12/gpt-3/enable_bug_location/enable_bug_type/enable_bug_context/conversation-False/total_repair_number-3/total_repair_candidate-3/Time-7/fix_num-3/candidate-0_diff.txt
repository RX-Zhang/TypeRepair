--- 
+++ 
@@ -4,6 +4,11 @@
         throw new IllegalArgumentException("Instant must not be null");
     }
     
+    // Input validation for the text parameter
+    if (text == null || text.trim().isEmpty()) {
+        throw new IllegalArgumentException("Text must not be null or empty");
+    }
+
     long instantMillis = instant.getMillis();
     Chronology chrono = instant.getChronology();
     long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);
@@ -13,6 +18,12 @@
     DateTimeParserBucket bucket = new DateTimeParserBucket(
         instantLocal, chrono, iLocale, iPivotYear, defaultYear);
     int newPos = parser.parseInto(bucket, text, position);
+    
+    // Validate the parsed day of month
+    if (bucket.getDay() != null && (bucket.getDay() < 1 || bucket.getDay() > 29)) {
+        throw new IllegalFieldValueException("dayOfMonth", bucket.getDay(), 1, 29);
+    }
+
     instant.setMillis(bucket.computeMillis(false, text));
     if (iOffsetParsed && bucket.getOffsetInteger() != null) {
         int parsedOffset = bucket.getOffsetInteger();
@@ -27,3 +38,4 @@
     }
     return newPos;
 }
+
