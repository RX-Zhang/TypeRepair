--- 
+++ 
@@ -5,9 +5,7 @@
     double f0 = computeObjectiveValue(x0);
     double f1 = computeObjectiveValue(x1);
 
-    // If one of the bounds is the exact root, return it. Since these are
-    // not under-approximations or over-approximations, we can return them
-    // regardless of the allowed solutions.
+    // If one of the bounds is the exact root, return it.
     if (f0 == 0.0) {
         return x0;
     }
@@ -23,27 +21,29 @@
     final double atol = getAbsoluteAccuracy();
     final double rtol = getRelativeAccuracy();
 
-    // Keep track of inverted intervals, meaning that the left bound is
-    // larger than the right bound.
+    // Keep track of inverted intervals.
     boolean inverted = false;
 
     // Keep finding better approximations.
+    int evaluationCount = 0; // Track the number of evaluations
     while (true) {
         // Calculate the next approximation.
         final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));
         final double fx = computeObjectiveValue(x);
+        evaluationCount++; // Increment evaluation count
 
-        // If the new approximation is the exact root, return it. Since
-        // this is not an under-approximation or an over-approximation,
-        // we can return it regardless of the allowed solutions.
+        // Check for evaluation limit
+        if (evaluationCount > maxEval) {
+            throw new TooManyEvaluationsException(maxEval);
+        }
+
+        // If the new approximation is the exact root, return it.
         if (fx == 0.0) {
             return x;
         }
 
         // Update the bounds with the new approximation.
         if (f1 * fx < 0) {
-            // The value of x1 has switched to the other bound, thus inverting
-            // the interval.
             x0 = x1;
             f0 = f1;
             inverted = !inverted;
@@ -55,8 +55,6 @@
             case PEGASUS:
                 f0 *= f1 / (f1 + fx);
                 break;
-                    // Update formula cannot make any progress: Update the
-                    // search interval.
             default:
                 // Should never happen.
             }
@@ -118,3 +116,4 @@
         }
     }
 }
+
