--- 
+++ 
@@ -1,33 +1,50 @@
 public int translate(CharSequence input, int index, Writer out) throws IOException {
-    // TODO: Protect from ArrayIndexOutOfBounds
-    if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
+    // Protect from ArrayIndexOutOfBounds
+    if (index + 2 >= input.length()) {
+        return 0;
+    }
+    if (input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
         int start = index + 2;
         boolean isHex = false;
 
+        if (start >= input.length()) {
+            return 0;
+        }
         char firstChar = input.charAt(start);
-        if(firstChar == 'x' || firstChar == 'X') {
+        if (firstChar == 'x' || firstChar == 'X') {
             start++;
             isHex = true;
+            if (start >= input.length()) {
+                return 0;
+            }
         }
 
         int end = start;
-        while(input.charAt(end) != ';') {
+        while (end < input.length() && input.charAt(end) != ';') {
             end++;
+        }
+        if (end == input.length()) {
+            return 0; // no terminating ';'
         }
 
         int entityValue;
         try {
-            if(isHex) {
-                entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
-            } else {
-                entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
-            }
-        } catch(NumberFormatException nfe) {
+            entityValue = Integer.parseInt(input.subSequence(start, end).toString(), isHex ? 16 : 10);
+        } catch (NumberFormatException nfe) {
             return 0;
         }
 
+        if (entityValue > 0xFFFF) {
+            // Supplementary character, write surrogate pair
+            char[] surrogates = Character.toChars(entityValue);
+            out.write(surrogates[0]);
+            out.write(surrogates[1]);
+        } else {
             out.write(entityValue);
-        return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+        }
+
+        return (end - index) + 1;
     }
     return 0;
 }
+
