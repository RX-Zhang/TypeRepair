--- 
+++ 
@@ -6,10 +6,6 @@
         throw new NumberFormatException("\"\" is not a valid number.");
     }
     if (val.startsWith("--")) {
-        // this is protection for poorness in java.lang.BigDecimal.
-        // it accepts this as a legal value, but it does not appear 
-        // to be in specification of class. OS X Java parses it to 
-        // a wrong value.
         return null;
     }
     if (val.startsWith("0x") || val.startsWith("-0x")) {
@@ -23,7 +19,6 @@
     int expPos = val.indexOf('e') + val.indexOf('E') + 1;
 
     if (decPos > -1) {
-
         if (expPos > -1) {
             if (expPos < decPos) {
                 throw new NumberFormatException(val + " is not a valid number.");
@@ -41,28 +36,25 @@
         }
         dec = null;
     }
+    
     if (!Character.isDigit(lastChar)) {
         if (expPos > -1 && expPos < val.length() - 1) {
             exp = val.substring(expPos + 1, val.length() - 1);
         } else {
             exp = null;
         }
-        //Requesting a specific type..
         String numeric = val.substring(0, val.length() - 1);
         boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
         switch (lastChar) {
             case 'l' :
             case 'L' :
-                if (dec == null
-                    && exp == null
-                    && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
+                if (dec == null && exp == null && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
                     try {
                         return createLong(numeric);
                     } catch (NumberFormatException nfe) {
                         //Too big for a long
                     }
                     return createBigInteger(numeric);
-
                 }
                 throw new NumberFormatException(val + " is not a valid number.");
             case 'f' :
@@ -70,11 +62,8 @@
                 try {
                     Float f = NumberUtils.createFloat(numeric);
                     if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
-                        //If it's too big for a float or the float value = 0 and the string
-                        //has non-zeros in it, then float does not have the precision we want
                         return f;
                     }
-
                 } catch (NumberFormatException e) {
                     // ignore the bad number
                 }
@@ -83,7 +72,7 @@
             case 'D' :
                 try {
                     Double d = NumberUtils.createDouble(numeric);
-                    if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
+                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
                         return d;
                     }
                 } catch (NumberFormatException nfe) {
@@ -97,18 +86,14 @@
                 //Fall through
             default :
                 throw new NumberFormatException(val + " is not a valid number.");
-
         }
     } else {
-        //User doesn't have a preference on the return type, so let's start
-        //small and go from there...
         if (expPos > -1 && expPos < val.length() - 1) {
             exp = val.substring(expPos + 1, val.length());
         } else {
             exp = null;
         }
         if (dec == null && exp == null) {
-            //Must be an int,long,bigint
             try {
                 return createInteger(val);
             } catch (NumberFormatException nfe) {
@@ -120,9 +105,7 @@
                 // empty catch
             }
             return createBigInteger(val);
-
         } else {
-            //Must be a float,double,BigDec
             boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
             try {
                 Float f = createFloat(val);
@@ -140,10 +123,8 @@
             } catch (NumberFormatException nfe) {
                 // empty catch
             }
-
             return createBigDecimal(val);
-
         }
-
     }
 }
+
