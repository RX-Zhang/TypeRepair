--- 
+++ 
@@ -18,7 +18,7 @@
 
   // set up an interpolator sharing the integrator arrays
   AbstractStepInterpolator interpolator;
-  if (requiresDenseOutput() || (! eventsHandlersManager.isEmpty())) {
+  if (requiresDenseOutput() || (!eventsHandlersManager.isEmpty())) {
     final RungeKuttaStepInterpolator rki = (RungeKuttaStepInterpolator) prototype.copy();
     rki.reinitialize(this, yTmp, yDotK, forward);
     interpolator = rki;
@@ -55,9 +55,9 @@
         if (vecAbsoluteTolerance == null) {
             scale = new double[y0.length];
             java.util.Arrays.fill(scale, scalAbsoluteTolerance);
-          } else {
+        } else {
             scale = vecAbsoluteTolerance;
-          }
+        }
         hNew = initializeStep(equations, forward, getOrder(), scale,
                               stepStart, y, yDotK[0], yTmp, yDotK[1]);
         firstTime = false;
@@ -137,17 +137,17 @@
       System.arraycopy(yDotK[stages - 1], 0, yDotK[0], 0, y0.length);
     }
 
-    if (manager.reset(stepStart, y) && ! lastStep) {
+    if (manager.reset(stepStart, y) && !lastStep) {
       // some event handler has triggered changes that
       // invalidate the derivatives, we need to recompute them
       computeDerivatives(stepStart, y, yDotK[0]);
     }
 
-    if (! lastStep) {
+    if (!lastStep) {
       // in some rare cases we may get here with stepSize = 0, for example
       // when an event occurs at integration start, reducing the first step
       // to zero; we have to reset the step to some safe non zero value
-        stepSize = filterStep(stepSize, forward, true);
+      stepSize = filterStep(stepSize, forward, true);
 
       // stepsize control for next step
       final double factor = Math.min(maxGrowth,
@@ -166,3 +166,4 @@
   return stopTime;
 
 }
+
