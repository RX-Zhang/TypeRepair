--- 
+++ 
@@ -1,16 +1,24 @@
 private void visitNew(NodeTraversal t, Node n) {
   Node constructor = n.getFirstChild();
   JSType type = getJSType(constructor).restrictByNotNullOrUndefined();
-  if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) {
-    FunctionType fnType = type.toMaybeFunctionType();
-    if (fnType != null) {
-      visitParameterList(t, n, fnType);
-      ensureTyped(t, n, fnType.getInstanceType());
+
+  try {
+    if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) {
+      FunctionType fnType = type.toMaybeFunctionType();
+      if (fnType != null) {
+        visitParameterList(t, n, fnType);
+        ensureTyped(t, n, fnType.getInstanceType());
+      } else {
+        ensureTyped(t, n);
+      }
     } else {
+      report(t, n, NOT_A_CONSTRUCTOR);
       ensureTyped(t, n);
     }
-  } else {
-    report(t, n, NOT_A_CONSTRUCTOR);
+  } catch (IllegalStateException e) {
+    // Handle the IllegalStateException gracefully, e.g., report and continue
+    report(t, n, NOT_A_CONSTRUCTOR, "Exception: " + e.getMessage());
     ensureTyped(t, n);
   }
 }
+
