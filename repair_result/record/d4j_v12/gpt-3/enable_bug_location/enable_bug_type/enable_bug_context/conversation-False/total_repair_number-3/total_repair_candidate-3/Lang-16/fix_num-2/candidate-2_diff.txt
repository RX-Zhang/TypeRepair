--- 
+++ 
@@ -4,7 +4,7 @@
     }
     if (StringUtils.isBlank(str)) {
         throw new NumberFormatException("A blank string is not a valid number");
-    }  
+    }
     if (str.startsWith("--")) {
         // this is protection for poorness in java.lang.BigDecimal.
         // it accepts this as a legal value, but it does not appear 
@@ -12,18 +12,22 @@
         // a wrong value.
         return null;
     }
-    if (str.startsWith("0x") || str.startsWith("-0x")) {
+    // Normalize to handle 0x and -0x or 0X and -0X hex prefix.
+    String lowerStr = str.toLowerCase();
+    if (lowerStr.startsWith("0x") || lowerStr.startsWith("-0x")) {
         return createInteger(str);
-    }   
+    }
     char lastChar = str.charAt(str.length() - 1);
     String mant;
     String dec;
     String exp;
     int decPos = str.indexOf('.');
-    int expPos = str.indexOf('e') + str.indexOf('E') + 1;
+    int expPos = str.indexOf('e');
+    if (expPos == -1) {
+        expPos = str.indexOf('E');
+    }
 
     if (decPos > -1) {
-
         if (expPos > -1) {
             if (expPos < decPos || expPos > str.length()) {
                 throw new NumberFormatException(str + " is not a valid number.");
@@ -50,15 +54,15 @@
         } else {
             exp = null;
         }
-        //Requesting a specific type..
+        // Requesting a specific type..
         String numeric = str.substring(0, str.length() - 1);
         boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
         switch (lastChar) {
-            case 'l' :
-            case 'L' :
+            case 'l':
+            case 'L':
                 if (dec == null
-                    && exp == null
-                    && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
+                        && exp == null
+                        && ((numeric.charAt(0) == '-' && isDigits(numeric.substring(1))) || isDigits(numeric))) {
                     try {
                         return createLong(numeric);
                     } catch (NumberFormatException nfe) { // NOPMD
@@ -68,13 +72,13 @@
 
                 }
                 throw new NumberFormatException(str + " is not a valid number.");
-            case 'f' :
-            case 'F' :
+            case 'f':
+            case 'F':
                 try {
                     Float f = NumberUtils.createFloat(numeric);
                     if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
-                        //If it's too big for a float or the float value = 0 and the string
-                        //has non-zeros in it, then float does not have the precision we want
+                        // If it's too big for a float or the float value = 0 and the string
+                        // has non-zeros in it, then float does not have the precision we want
                         return f;
                     }
 
@@ -82,11 +86,11 @@
                     // ignore the bad number
                 }
                 //$FALL-THROUGH$
-            case 'd' :
-            case 'D' :
+            case 'd':
+            case 'D':
                 try {
                     Double d = NumberUtils.createDouble(numeric);
-                    if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
+                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
                         return d;
                     }
                 } catch (NumberFormatException nfe) { // NOPMD
@@ -98,20 +102,20 @@
                     // ignore the bad number
                 }
                 //$FALL-THROUGH$
-            default :
+            default:
                 throw new NumberFormatException(str + " is not a valid number.");
 
         }
     } else {
-        //User doesn't have a preference on the return type, so let's start
-        //small and go from there...
+        // User doesn't have a preference on the return type, so let's start
+        // small and go from there...
         if (expPos > -1 && expPos < str.length() - 1) {
             exp = str.substring(expPos + 1, str.length());
         } else {
             exp = null;
         }
         if (dec == null && exp == null) {
-            //Must be an int,long,bigint
+            // Must be an int,long,bigint
             try {
                 return createInteger(str);
             } catch (NumberFormatException nfe) { // NOPMD
@@ -125,7 +129,7 @@
             return createBigInteger(str);
 
         } else {
-            //Must be a float,double,BigDec
+            // Must be a float,double,BigDec
             boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
             try {
                 Float f = createFloat(str);
@@ -149,3 +153,4 @@
         }
     }
 }
+
