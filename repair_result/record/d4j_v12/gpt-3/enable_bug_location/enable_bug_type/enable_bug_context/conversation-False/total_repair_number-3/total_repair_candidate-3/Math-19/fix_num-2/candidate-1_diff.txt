--- 
+++ 
@@ -6,8 +6,7 @@
     // Checks whether there is at least one finite bound value.
     boolean hasFiniteBounds = false;
     for (int i = 0; i < lB.length; i++) {
-        if (!Double.isInfinite(lB[i]) ||
-            !Double.isInfinite(uB[i])) {
+        if (!Double.isInfinite(lB[i]) && !Double.isInfinite(uB[i])) {
             hasFiniteBounds = true;
             break;
         }
@@ -16,8 +15,7 @@
     boolean hasInfiniteBounds = false;
     if (hasFiniteBounds) {
         for (int i = 0; i < lB.length; i++) {
-            if (Double.isInfinite(lB[i]) ||
-                Double.isInfinite(uB[i])) {
+            if (Double.isInfinite(lB[i]) || Double.isInfinite(uB[i])) {
                 hasInfiniteBounds = true;
                 break;
             }
@@ -34,6 +32,13 @@
             boundaries[1] = uB;
 
             // Abort early if the normalization will overflow (cf. "encode" method).
+            if (boundaries[1].length > 0 && boundaries[0].length > 0) {
+                for (int i = 0; i < boundaries[0].length; i++) {
+                    if (boundaries[1][i] <= boundaries[0][i]) {
+                        throw new NumberIsTooLargeException(boundaries[1][i], boundaries[0][i], true);
+                    }
+                }
+            }
         }
     } else {
         // Convert API to internal handling of boundaries.
@@ -56,3 +61,4 @@
         }
     }
 }
+
