--- 
+++ 
@@ -4,7 +4,7 @@
     }
     if (StringUtils.isBlank(str)) {
         throw new NumberFormatException("A blank string is not a valid number");
-    }  
+    }
     if (str.startsWith("--")) {
         // this is protection for poorness in java.lang.BigDecimal.
         // it accepts this as a legal value, but it does not appear 
@@ -12,18 +12,31 @@
         // a wrong value.
         return null;
     }
-    if (str.startsWith("0x") || str.startsWith("-0x")) {
+    String normalizedStr = str.toLowerCase();
+    if (normalizedStr.startsWith("0x") || normalizedStr.startsWith("-0x")) {
         return createInteger(str);
-    }   
+    }
     char lastChar = str.charAt(str.length() - 1);
     String mant;
     String dec;
     String exp;
+    
     int decPos = str.indexOf('.');
-    int expPos = str.indexOf('e') + str.indexOf('E') + 1;
+    int ePos = str.indexOf('e');
+    int EPos = str.indexOf('E');
+    int expPos = -1;
+    
+    if (ePos == -1 && EPos == -1) {
+        expPos = -1;
+    } else if (ePos == -1) {
+        expPos = EPos;
+    } else if (EPos == -1) {
+        expPos = ePos;
+    } else {
+        expPos = Math.min(ePos, EPos);
+    }
 
     if (decPos > -1) {
-
         if (expPos > -1) {
             if (expPos < decPos || expPos > str.length()) {
                 throw new NumberFormatException(str + " is not a valid number.");
@@ -58,7 +71,7 @@
             case 'L' :
                 if (dec == null
                     && exp == null
-                    && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
+                    && ((numeric.charAt(0) == '-' && isDigits(numeric.substring(1))) || isDigits(numeric))) {
                     try {
                         return createLong(numeric);
                     } catch (NumberFormatException nfe) { // NOPMD
@@ -77,7 +90,6 @@
                         //has non-zeros in it, then float does not have the precision we want
                         return f;
                     }
-
                 } catch (NumberFormatException nfe) { // NOPMD
                     // ignore the bad number
                 }
@@ -86,7 +98,7 @@
             case 'D' :
                 try {
                     Double d = NumberUtils.createDouble(numeric);
-                    if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
+                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
                         return d;
                     }
                 } catch (NumberFormatException nfe) { // NOPMD
@@ -100,7 +112,6 @@
                 //$FALL-THROUGH$
             default :
                 throw new NumberFormatException(str + " is not a valid number.");
-
         }
     } else {
         //User doesn't have a preference on the return type, so let's start
@@ -123,7 +134,6 @@
                 // ignore the bad number
             }
             return createBigInteger(str);
-
         } else {
             //Must be a float,double,BigDec
             boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
@@ -143,9 +153,8 @@
             } catch (NumberFormatException nfe) { // NOPMD
                 // ignore the bad number
             }
-
             return createBigDecimal(str);
-
         }
     }
 }
+
