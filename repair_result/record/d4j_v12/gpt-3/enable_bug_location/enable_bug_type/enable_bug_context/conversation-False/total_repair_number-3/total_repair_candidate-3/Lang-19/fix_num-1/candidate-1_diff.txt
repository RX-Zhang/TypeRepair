--- 
+++ 
@@ -1,23 +1,29 @@
 public int translate(CharSequence input, int index, Writer out) throws IOException {
     int seqEnd = input.length();
     // Uses -2 to ensure there is something after the &#
-    if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
+    if(index < seqEnd && input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
         int start = index + 2;
         boolean isHex = false;
 
-        char firstChar = input.charAt(start);
-        if(firstChar == 'x' || firstChar == 'X') {
-            start++;
-            isHex = true;
-
-            // Check there's more than just an x after the &#
+        if (start < seqEnd) {
+            char firstChar = input.charAt(start);
+            if(firstChar == 'x' || firstChar == 'X') {
+                start++;
+                isHex = true;
+            }
+        } else {
+            return 0; // No valid entity found
         }
 
         int end = start;
         // Note that this supports character codes without a ; on the end
-        while(input.charAt(end) != ';') 
-        {
+        while(end < seqEnd && input.charAt(end) != ';') {
             end++;
+        }
+
+        // If we reached the end without finding a semicolon, return 0
+        if (end == seqEnd) {
+            return 0; // No valid entity found
         }
 
         int entityValue;
@@ -28,7 +34,7 @@
                 entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
             }
         } catch(NumberFormatException nfe) {
-        System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
+            System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
             return 0;
         }
 
@@ -40,8 +46,8 @@
             out.write(entityValue);
         }
 
-
         return 2 + (end - start) + (isHex ? 1 : 0) + 1;
     }
     return 0;
 }
+
