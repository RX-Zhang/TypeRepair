--- 
+++ 
@@ -1,6 +1,12 @@
 public static int gcd(int u, int v) {
-    if (u * v == 0) {
-        return (Math.abs(u) + Math.abs(v));
+    if (u == 0 && v == 0) {
+        return 0;
+    }
+    if (u == 0) {
+        return Math.abs(v);
+    }
+    if (v == 0) {
+        return Math.abs(u);
     }
     // keep u and v negative, as negative integers range down to
     // -2^31, while positive numbers can only be as large as 2^31-1
@@ -13,12 +19,13 @@
     if (v > 0) {
         v = -v;
     } // make v negative
+
     // B1. [Find power of 2]
     int k = 0;
-    while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are
+    while (((u & 1) == 0) && ((v & 1) == 0) && k < 31) { // while u and v are
                                                         // both even...
-        u /= 2;
-        v /= 2;
+        u >>= 1;
+        v >>= 1;
         k++; // cast out twos.
     }
     if (k == 31) {
@@ -26,14 +33,21 @@
     }
     // B2. Initialize: u and v have been divided by 2^k and at least
     // one is odd.
-    int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
+
+    int t;
+    if ((u & 1) == 1) {
+        t = v;
+    } else {
+        t = -(u >> 1);
+    }
     // t negative: u was odd, v may be even (t replaces v)
     // t positive: u was even, v is odd (t replaces u)
+
     do {
         /* assert u<0 && v<0; */
         // B4/B3: cast out twos from t.
         while ((t & 1) == 0) { // while t is even..
-            t /= 2; // cast out twos
+            t >>= 1; // cast out twos
         }
         // B5 [reset max(u,v)]
         if (t > 0) {
@@ -42,9 +56,10 @@
             v = t;
         }
         // B6/B3. at this point both u and v should be odd.
-        t = (v - u) / 2;
+        t = (v - u) >> 1;
         // |u| larger: t positive (replace u)
         // |v| larger: t negative (replace v)
     } while (t != 0);
     return -u * (1 << k); // gcd is u*2^k
 }
+
