--- 
+++ 
@@ -5,17 +5,17 @@
       // same as returning a non-local name, but this doesn't matter if the
       // value is immutable.
       return NodeUtil.isImmutableValue(value.getLastChild())
-          || (locals.apply(value)
+          || (locals.apply(value.getLastChild())
               && evaluatesToLocalValue(value.getLastChild(), locals));
     case Token.COMMA:
       return evaluatesToLocalValue(value.getLastChild(), locals);
     case Token.AND:
     case Token.OR:
       return evaluatesToLocalValue(value.getFirstChild(), locals)
-         && evaluatesToLocalValue(value.getLastChild(), locals);
+          && evaluatesToLocalValue(value.getLastChild(), locals);
     case Token.HOOK:
-      return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)
-         && evaluatesToLocalValue(value.getLastChild(), locals);
+      return evaluatesToLocalValue(value.getFirstChild(), locals)
+          && evaluatesToLocalValue(value.getLastChild(), locals);
     case Token.INC:
     case Token.DEC:
       if (value.getBooleanProp(Node.INCRDECR_PROP)) {
@@ -36,23 +36,21 @@
           || isToStringMethodCall(value)
           || locals.apply(value);
     case Token.NEW:
-      // TODO(nicksantos): This needs to be changed so that it
-      // returns true iff we're sure the value was never aliased from inside
-      // the constructor (similar to callHasLocalResult)
-      return true;
+      // This should return false if we cannot guarantee no aliasing.
+      return false;
     case Token.FUNCTION:
     case Token.REGEXP:
     case Token.ARRAYLIT:
     case Token.OBJECTLIT:
-      // Literals objects with non-literal children are allowed.
+      // Literal objects with non-literal children are allowed.
       return true;
     case Token.IN:
-      // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
+      // Include IN operator as it does not affect locality.
       return true;
     default:
-      // Other op force a local value:
-      //  x = '' + g (x is now an local string)
-      //  x -= g (x is now an local number)
+      // Other ops force a local value:
+      //  x = '' + g (x is now a local string)
+      //  x -= g (x is now a local number)
       if (isAssignmentOp(value)
           || isSimpleOperator(value)
           || isImmutableValue(value)) {
@@ -60,7 +58,8 @@
       }
 
       throw new IllegalStateException(
-          "Unexpected expression node" + value +
-          "\n parent:" + value.getParent());
+          "Unexpected expression node: " + value +
+          "\n parent: " + value.getParent());
   }
 }
+
