--- 
+++ 
@@ -3,6 +3,12 @@
     double[] w = new double[5];
     double[] h = new double[5];
     w[0] = constraint.getWidth();
+    
+    // Check for valid height constraint before proceeding
+    if (constraint.getHeight() < 0) {
+        throw new IllegalArgumentException("Height constraint must be non-negative.");
+    }
+    
     if (this.topBlock != null) {
         RectangleConstraint c1 = new RectangleConstraint(w[0], null,
                 LengthConstraintType.FIXED, 0.0,
@@ -13,13 +19,22 @@
     }
     w[1] = w[0];
     if (this.bottomBlock != null) {
+        double remainingHeight = constraint.getHeight() - h[0];
+        if (remainingHeight < 0) {
+            throw new IllegalArgumentException("Remaining height for bottom block must be non-negative.");
+        }
         RectangleConstraint c2 = new RectangleConstraint(w[0], null,
                 LengthConstraintType.FIXED, 0.0, new Range(0.0,
-                constraint.getHeight() - h[0]), LengthConstraintType.RANGE);
+                remainingHeight), LengthConstraintType.RANGE);
         Size2D size = this.bottomBlock.arrange(g2, c2);
         h[1] = size.height;
     }
     h[2] = constraint.getHeight() - h[1] - h[0];
+    
+    if (h[2] < 0) {
+        throw new IllegalArgumentException("Calculated height for left block must be non-negative.");
+    }
+    
     if (this.leftBlock != null) {
         RectangleConstraint c3 = new RectangleConstraint(0.0,
                 new Range(0.0, constraint.getWidth()),
@@ -30,8 +45,12 @@
     }
     h[3] = h[2];
     if (this.rightBlock != null) {
+        double remainingWidth = constraint.getWidth() - w[2];
+        if (remainingWidth < 0) {
+            throw new IllegalArgumentException("Remaining width for right block must be non-negative.");
+        }
         RectangleConstraint c4 = new RectangleConstraint(0.0,
-                new Range(0.0, constraint.getWidth() - w[2]),
+                new Range(0.0, remainingWidth),
                 LengthConstraintType.RANGE, h[2], null,
                 LengthConstraintType.FIXED);
         Size2D size = this.rightBlock.arrange(g2, c4);
@@ -39,6 +58,11 @@
     }
     h[4] = h[2];
     w[4] = constraint.getWidth() - w[3] - w[2];
+    
+    if (w[4] < 0) {
+        throw new IllegalArgumentException("Calculated width for center block must be non-negative.");
+    }
+    
     RectangleConstraint c5 = new RectangleConstraint(w[4], h[4]);
     if (this.centerBlock != null) {
         this.centerBlock.arrange(g2, c5);
@@ -66,3 +90,4 @@
     }
     return new Size2D(constraint.getWidth(), constraint.getHeight());
 }
+
