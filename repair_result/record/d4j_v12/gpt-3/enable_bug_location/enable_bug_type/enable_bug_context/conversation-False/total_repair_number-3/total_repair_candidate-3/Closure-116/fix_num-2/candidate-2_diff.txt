--- 
+++ 
@@ -5,7 +5,6 @@
   }
 
   Node block = fnNode.getLastChild();
-
 
   // CALL NODE: [ NAME, ARG1, ARG2, ... ]
   Node cArg = callNode.getFirstChild().getNext();
@@ -15,7 +14,7 @@
   // parameter list.
   if (!callNode.getFirstChild().isName()) {
     if (NodeUtil.isFunctionObjectCall(callNode)) {
-      // TODO(johnlenz): Support replace this with a value.
+      // Ensure this is valid
       if (cArg == null || !cArg.isThis()) {
         return CanInlineResult.NO;
       }
@@ -29,20 +28,16 @@
   // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]
   Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();
   while (cArg != null || fnParam != null) {
-    // For each named parameter check if a mutable argument use more than one.
+    // For each named parameter check if a mutable argument is used more than once.
     if (fnParam != null) {
       if (cArg != null) {
-
         // Check for arguments that are evaluated more than once.
-        // Note: Unlike block inlining, there it is not possible that a
-        // parameter reference will be in a loop.
         if (NodeUtil.mayEffectMutableState(cArg, compiler)
             && NodeUtil.getNameReferenceCount(
                 block, fnParam.getString()) > 1) {
           return CanInlineResult.NO;
         }
       }
-
       // Move to the next name.
       fnParam = fnParam.getNext();
     }
@@ -59,3 +54,4 @@
 
   return CanInlineResult.YES;
 }
+
