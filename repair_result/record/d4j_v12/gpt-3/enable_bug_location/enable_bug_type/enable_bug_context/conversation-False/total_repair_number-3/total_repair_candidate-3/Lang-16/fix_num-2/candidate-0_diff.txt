--- 
+++ 
@@ -4,7 +4,7 @@
     }
     if (StringUtils.isBlank(str)) {
         throw new NumberFormatException("A blank string is not a valid number");
-    }  
+    }
     if (str.startsWith("--")) {
         // this is protection for poorness in java.lang.BigDecimal.
         // it accepts this as a legal value, but it does not appear 
@@ -12,15 +12,17 @@
         // a wrong value.
         return null;
     }
-    if (str.startsWith("0x") || str.startsWith("-0x")) {
+    if (str.startsWith("0x") || str.startsWith("0X") || str.startsWith("-0x") || str.startsWith("-0X")) {
         return createInteger(str);
-    }   
+    }
     char lastChar = str.charAt(str.length() - 1);
     String mant;
     String dec;
     String exp;
     int decPos = str.indexOf('.');
-    int expPos = str.indexOf('e') + str.indexOf('E') + 1;
+    int ePos = str.indexOf('e');
+    int EPos = str.indexOf('E');
+    int expPos = (ePos > -1) ? ePos : EPos;
 
     if (decPos > -1) {
 
@@ -54,22 +56,21 @@
         String numeric = str.substring(0, str.length() - 1);
         boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
         switch (lastChar) {
-            case 'l' :
-            case 'L' :
+            case 'l':
+            case 'L':
                 if (dec == null
                     && exp == null
-                    && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
+                    && ((numeric.charAt(0) == '-' && isDigits(numeric.substring(1))) || isDigits(numeric))) {
                     try {
                         return createLong(numeric);
                     } catch (NumberFormatException nfe) { // NOPMD
                         // Too big for a long
                     }
                     return createBigInteger(numeric);
-
                 }
                 throw new NumberFormatException(str + " is not a valid number.");
-            case 'f' :
-            case 'F' :
+            case 'f':
+            case 'F':
                 try {
                     Float f = NumberUtils.createFloat(numeric);
                     if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
@@ -82,11 +83,11 @@
                     // ignore the bad number
                 }
                 //$FALL-THROUGH$
-            case 'd' :
-            case 'D' :
+            case 'd':
+            case 'D':
                 try {
                     Double d = NumberUtils.createDouble(numeric);
-                    if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
+                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
                         return d;
                     }
                 } catch (NumberFormatException nfe) { // NOPMD
@@ -98,7 +99,7 @@
                     // ignore the bad number
                 }
                 //$FALL-THROUGH$
-            default :
+            default:
                 throw new NumberFormatException(str + " is not a valid number.");
 
         }
@@ -149,3 +150,4 @@
         }
     }
 }
+
