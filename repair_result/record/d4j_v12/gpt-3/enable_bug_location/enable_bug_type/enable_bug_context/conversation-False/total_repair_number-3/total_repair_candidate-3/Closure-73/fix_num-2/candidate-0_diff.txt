--- 
+++ 
@@ -31,7 +31,7 @@
         // Break <!-- into <\!--
         final String START_COMMENT = "!--";
 
-        if (s.regionMatches(true, i + 1, END_SCRIPT, 0,
+        if (s.regionMatches(false, i + 1, END_SCRIPT, 0,
                             END_SCRIPT.length())) {
           sb.append("<\\");
         } else if (s.regionMatches(false, i + 1, START_COMMENT, 0,
@@ -46,21 +46,23 @@
         //  character can be represented in this character set.
         if (outputCharsetEncoder != null) {
           if (outputCharsetEncoder.canEncode(c)) {
-            sb.append(c);
+            // Accept only characters that should be output literally,
+            // and escape control or non-ascii characters explicitly.
+            if (c >= 0x20 && c <= 0x7e) {
+              sb.append(c);
+            } else {
+              appendHexJavaScriptRepresentation(sb, c);
+            }
           } else {
             // Unicode-escape the character.
             appendHexJavaScriptRepresentation(sb, c);
           }
         } else {
-          // No charsetEncoder provided - pass straight latin characters
-          // through, and escape the rest.  Doing the explicit character
-          // check is measurably faster than using the CharsetEncoder.
-          if (c > 0x1f && c <= 0x7f) {
+          // No charsetEncoder provided - pass straight ascii printable chars through,
+          // escape others.
+          if (c >= 0x20 && c <= 0x7e) {
             sb.append(c);
           } else {
-            // Other characters can be misinterpreted by some js parsers,
-            // or perhaps mangled by proxies along the way,
-            // so we play it safe and unicode escape them.
             appendHexJavaScriptRepresentation(sb, c);
           }
         }
@@ -69,3 +71,4 @@
   sb.append(quote);
   return sb.toString();
 }
+
