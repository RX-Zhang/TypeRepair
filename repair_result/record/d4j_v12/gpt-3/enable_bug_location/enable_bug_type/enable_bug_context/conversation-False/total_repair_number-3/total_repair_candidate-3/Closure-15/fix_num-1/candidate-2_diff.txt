--- 
+++ 
@@ -1,21 +1,20 @@
 public boolean apply(Node n) {
   // When the node is null it means, we reached the implicit return
-  // where the function returns (possibly without an return statement)
+  // where the function returns (possibly without a return statement)
   if (n == null) {
     return false;
   }
 
   // TODO(user): We only care about calls to functions that
-  // passes one of the dependent variable to a non-side-effect free
+  // pass one of the dependent variables to a non-side-effect free
   // function.
-  if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {
+  if (n.isCall() && NodeUtil.callHasSideEffects(n, compiler)) {
     return true;
   }
 
-  if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {
+  if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n, compiler)) {
     return true;
   }
-
 
   for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
     if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {
@@ -24,3 +23,4 @@
   }
   return false;
 }
+
