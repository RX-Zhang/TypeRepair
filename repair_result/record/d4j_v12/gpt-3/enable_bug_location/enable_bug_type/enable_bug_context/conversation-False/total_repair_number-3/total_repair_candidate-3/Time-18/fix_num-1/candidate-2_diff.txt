--- 
+++ 
@@ -3,6 +3,29 @@
                               int secondOfMinute, int millisOfSecond)
     throws IllegalArgumentException
 {
+    // Input validation
+    if (year < 0) {
+        throw new IllegalArgumentException("Year cannot be negative");
+    }
+    if (monthOfYear < 1 || monthOfYear > 12) {
+        throw new IllegalArgumentException("Month must be in the range [1, 12]");
+    }
+    if (dayOfMonth < 1 || dayOfMonth > 31) {
+        throw new IllegalArgumentException("Day must be in the range [1, 31]");
+    }
+    if (hourOfDay < 0 || hourOfDay > 23) {
+        throw new IllegalArgumentException("Hour must be in the range [0, 23]");
+    }
+    if (minuteOfHour < 0 || minuteOfHour > 59) {
+        throw new IllegalArgumentException("Minute must be in the range [0, 59]");
+    }
+    if (secondOfMinute < 0 || secondOfMinute > 59) {
+        throw new IllegalArgumentException("Second must be in the range [0, 59]");
+    }
+    if (millisOfSecond < 0 || millisOfSecond > 999) {
+        throw new IllegalArgumentException("Millisecond must be in the range [0, 999]");
+    }
+
     Chronology base;
     if ((base = getBase()) != null) {
         return base.getDateTimeMillis
@@ -12,9 +35,9 @@
 
     // Assume date is Gregorian.
     long instant;
-        instant = iGregorianChronology.getDateTimeMillis
-            (year, monthOfYear, dayOfMonth,
-             hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+    instant = iGregorianChronology.getDateTimeMillis
+        (year, monthOfYear, dayOfMonth,
+         hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
     if (instant < iCutoverMillis) {
         // Maybe it's Julian.
         instant = iJulianChronology.getDateTimeMillis
@@ -27,3 +50,4 @@
     }
     return instant;
 }
+
