--- 
+++ 
@@ -1,11 +1,8 @@
 static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
   switch (value.getType()) {
     case Token.ASSIGN:
-      // A result that is aliased by a non-local name, is the effectively the
-      // same as returning a non-local name, but this doesn't matter if the
-      // value is immutable.
       return NodeUtil.isImmutableValue(value.getLastChild())
-          || (locals.apply(value)
+          || (locals.apply(value.getLastChild())
               && evaluatesToLocalValue(value.getLastChild(), locals));
     case Token.COMMA:
       return evaluatesToLocalValue(value.getLastChild(), locals);
@@ -14,7 +11,7 @@
       return evaluatesToLocalValue(value.getFirstChild(), locals)
          && evaluatesToLocalValue(value.getLastChild(), locals);
     case Token.HOOK:
-      return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)
+      return evaluatesToLocalValue(value.getFirstChild(), locals)
          && evaluatesToLocalValue(value.getLastChild(), locals);
     case Token.INC:
     case Token.DEC:
@@ -29,30 +26,22 @@
       return isImmutableValue(value) || locals.apply(value);
     case Token.GETELEM:
     case Token.GETPROP:
-      // There is no information about the locality of object properties.
       return locals.apply(value);
     case Token.CALL:
       return callHasLocalResult(value)
           || isToStringMethodCall(value)
           || locals.apply(value);
     case Token.NEW:
-      // TODO(nicksantos): This needs to be changed so that it
-      // returns true iff we're sure the value was never aliased from inside
-      // the constructor (similar to callHasLocalResult)
-      return true;
+      // This needs to ensure that the value was never aliased from inside the constructor.
+      return !locals.apply(value) || isImmutableValue(value);
     case Token.FUNCTION:
     case Token.REGEXP:
     case Token.ARRAYLIT:
     case Token.OBJECTLIT:
-      // Literals objects with non-literal children are allowed.
       return true;
     case Token.IN:
-      // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
       return true;
     default:
-      // Other op force a local value:
-      //  x = '' + g (x is now an local string)
-      //  x -= g (x is now an local number)
       if (isAssignmentOp(value)
           || isSimpleOperator(value)
           || isImmutableValue(value)) {
@@ -64,3 +53,4 @@
           "\n parent:" + value.getParent());
   }
 }
+
