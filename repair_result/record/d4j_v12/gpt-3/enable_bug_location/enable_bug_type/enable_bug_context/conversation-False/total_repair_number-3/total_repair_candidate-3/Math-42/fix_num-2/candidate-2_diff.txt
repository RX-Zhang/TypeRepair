--- 
+++ 
@@ -1,7 +1,7 @@
 protected RealPointValuePair getSolution() {
   int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
-  Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;
-  double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());
+  Integer negativeVarBasicRow = negativeVarColumn >= 0 ? getBasicRow(negativeVarColumn) : null;
+  double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());
 
   Set<Integer> basicRows = new HashSet<Integer>();
   double[] coefficients = new double[getOriginalNumDecisionVariables()];
@@ -12,13 +12,10 @@
         continue;
       }
       Integer basicRow = getBasicRow(colIndex);
-          // if the basic row is found to be the objective function row
-          // set the coefficient to 0 -> this case handles unconstrained 
-          // variables that are still part of the objective function
-      if (basicRows.contains(basicRow)) {
-          // if multiple variables can take a given value
-          // then we choose the first and set the rest equal to 0
-          coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);
+      if (basicRow == null || basicRows.contains(basicRow)) {
+          // if the variable is not basic or another variable already occupies the row,
+          // then set coefficient accordingly
+          coefficients[i] = 0;
       } else {
           basicRows.add(basicRow);
           coefficients[i] =
@@ -28,3 +25,4 @@
   }
   return new RealPointValuePair(coefficients, f.getValue(coefficients));
 }
+
