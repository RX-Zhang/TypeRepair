--- 
+++ 
@@ -11,12 +11,23 @@
          parameters.hasNext()) {
     // If there are no parameters left in the list, then the while loop
     // above implies that this must be a var_args function.
-      parameter = parameters.next();
+    parameter = parameters.next();
     argument = arguments.next();
     ordinal++;
 
-    validator.expectArgumentMatchesParameter(t, argument,
-        getJSType(argument), getJSType(parameter), call, ordinal);
+    // Ensure argument types are checked and matched
+    JSType argumentType = getJSType(argument);
+    JSType parameterType = getJSType(parameter);
+    if (argumentType != null && parameterType != null) {
+      validator.expectArgumentMatchesParameter(t, argument, argumentType, parameterType, call, ordinal);
+    } else {
+      // Handle the case where types are not resolvable
+      report(t, call, WRONG_ARGUMENT_COUNT,
+              validator.getReadableJSTypeName(call.getFirstChild(), false),
+              String.valueOf(ordinal), String.valueOf(functionType.getMinArguments()),
+              functionType.getMaxArguments() != Integer.MAX_VALUE ?
+              " and no more than " + functionType.getMaxArguments() + " argument(s)" : "");
+    }
   }
 
   int numArgs = call.getChildCount() - 1;
@@ -30,3 +41,4 @@
             " and no more than " + maxArgs + " argument(s)" : "");
   }
 }
+
