--- 
+++ 
@@ -5,6 +5,11 @@
     double sxy = 0;
     double sxz = 0;
     double syz = 0;
+
+    // Adding boundary check to avoid runtime errors
+    if (observations == null || observations.length < 2) {
+        throw new IllegalArgumentException("At least two observations are required.");
+    }
 
     double currentX = observations[0].getX();
     double currentY = observations[0].getY();
@@ -22,6 +27,11 @@
         // considering a linear model for f (and therefore constant f')
         final double dx = currentX - previousX;
         final double dy = currentY - previousY;
+
+        if (dx == 0) {
+            throw new IllegalArgumentException("Consecutive observations cannot have the same x value.");
+        }
+
         final double f2StepIntegral =
             dx * (previousY * previousY + previousY * currentY + currentY * currentY) / 3;
         final double fPrime2StepIntegral = dy * dy / dx;
@@ -41,19 +51,21 @@
     double c1 = sy2 * sxz - sxy * syz;
     double c2 = sxy * sxz - sx2 * syz;
     double c3 = sx2 * sy2 - sxy * sxy;
-    if ((c1 / c2 < 0) || (c2 / c3 < 0)) {
+
+    // Correcting logical error in conditions
+    if (c2 == 0 || (c1 / c2 < 0) || (c2 / c3 < 0)) {
         final int last = observations.length - 1;
         // Range of the observations, assuming that the
         // observations are sorted.
         final double xRange = observations[last].getX() - observations[0].getX();
         if (xRange == 0) {
-            throw new ZeroException();
+            throw new IllegalArgumentException("Zero range in x values.");
         }
         omega = 2 * Math.PI / xRange;
 
         double yMin = Double.POSITIVE_INFINITY;
         double yMax = Double.NEGATIVE_INFINITY;
-        for (int i = 1; i < observations.length; ++i) {
+        for (int i = 0; i < observations.length; ++i) { // Start from 0 to include the first observation
             final double y = observations[i].getY();
             if (y < yMin) {
                 yMin = y;
@@ -64,10 +76,10 @@
         }
         a = 0.5 * (yMax - yMin);
     } else {
-            // In some ill-conditioned cases (cf. MATH-844), the guesser
-            // procedure cannot produce sensible results.
-
+        // In some ill-conditioned cases (cf. MATH-844), the guesser
+        // procedure cannot produce sensible results.
         a = FastMath.sqrt(c1 / c2);
         omega = FastMath.sqrt(c2 / c3);
     }
 }
+
