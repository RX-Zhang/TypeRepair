--- 
+++ 
@@ -7,7 +7,8 @@
     return n;
   }
 
-  if (!right.isNumber()) {
+  // Input validation for right
+  if (right == null || !right.isNumber()) {
     // Sometimes people like to use complex expressions to index into
     // arrays, or strings to index into array methods.
     return n;
@@ -15,26 +16,31 @@
 
   double index = right.getDouble();
   int intIndex = (int) index;
+
+  // Check if index is not an integer
   if (intIndex != index) {
-    error(INVALID_GETELEM_INDEX_ERROR, right);
+    error(PeepholeFoldConstants.INVALID_GETELEM_INDEX_ERROR, right);
     return n;
   }
 
+  // Check for negative index
   if (intIndex < 0) {
-    error(INDEX_OUT_OF_BOUNDS_ERROR, right);
+    error(PeepholeFoldConstants.INDEX_OUT_OF_BOUNDS_ERROR, right);
     return n;
   }
 
   Node current = left.getFirstChild();
   Node elem = null;
+
+  // Check for index out of bounds
   for (int i = 0; current != null && i < intIndex; i++) {
       elem = current;
-
-    current = current.getNext();
+      current = current.getNext();
   }
 
+  // If elem is null, index is out of bounds
   if (elem == null) {
-    error(INDEX_OUT_OF_BOUNDS_ERROR, right);
+    error(PeepholeFoldConstants.INDEX_OUT_OF_BOUNDS_ERROR, right);
     return n;
   }
 
@@ -49,3 +55,4 @@
   reportCodeChange();
   return elem;
 }
+
