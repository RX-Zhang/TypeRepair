--- 
+++ 
@@ -4,6 +4,11 @@
 
     clearResult();
     verifySequence(min, initial, max);
+
+    // Validate that min and max are in the correct order
+    if (min >= max) {
+        throw new IllegalArgumentException("Invalid interval: min must be less than max.");
+    }
 
     // return the initial guess if it is good enough
     double yInitial = f.value(initial);
@@ -15,8 +20,13 @@
     // return the first endpoint if it is good enough
     double yMin = f.value(min);
     if (Math.abs(yMin) <= functionValueAccuracy) {
-        setResult(yMin, 0);
+        setResult(min, 0); // Corrected to return min instead of yMin
         return result;
+    }
+
+    // Check if min and max bracket the root
+    if (yMin * f.value(max) > 0) {
+        throw new IllegalArgumentException("Function values at endpoints do not have different signs. Endpoints: [" + min + ", " + max + "], Values: [" + yMin + ", " + f.value(max) + "]");
     }
 
     // reduce interval if min and initial bracket the root
@@ -27,7 +37,7 @@
     // return the second endpoint if it is good enough
     double yMax = f.value(max);
     if (Math.abs(yMax) <= functionValueAccuracy) {
-        setResult(yMax, 0);
+        setResult(max, 0); // Corrected to return max instead of yMax
         return result;
     }
 
@@ -36,8 +46,7 @@
         return solve(f, initial, yInitial, max, yMax, initial, yInitial);
     }
 
-
     // full Brent algorithm starting with provided initial guess
     return solve(f, min, yMin, max, yMax, initial, yInitial);
+}
 
-}
